#+TITLE: Org mode config
#+DESCRIPTION: Configuration for org-mode
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent
Enable lexical binding (needed for some of the org-roam config). *This must be at the top of the file.*
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
#+END_SRC

* General

Save all org buffers periodically to reduce conflicts between desktop and orgzly on mobile.
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 60 t 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

Don't show blank lines between headings in folded view.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC

Most of this is from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this]] guide:

Set the org directory and method for getting the full path to an org file from its name.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Prettier bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))
    ;; :custom
    ;; (org-bullets-bullet-list '("\u200b"))) ;; 0 width space for no bullets
    ;; (org-bullets-bullet-list '("|" "\u200b" "|" "|" "|" "|" "|" "|"))) ;; vertical bar
    ;; (org-bullets-bullet-list '("\u200b" "✜" "◉" "○" "✸" "✿" "◆" "▶" "✸")))
#+END_SRC

Increase list indentation
#+BEGIN_SRC emacs-lisp
(setq org-list-indent-offset 2)
#+END_SRC

Set a sequence for list bullet symbols.
#+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
#+END_SRC

Copied from https://mstempl.netlify.app/post/beautify-org-mode/. Replace list dash / plus with bullet symbols.
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+END_SRC

Stop org files from being opened in new windows.
#+BEGIN_SRC emacs-lisp
(setq org-link-frame-setup '((file . find-file)))
#+END_SRC

* Sidebar
The tree sidebar provides an outline on the left that you can use to jump around the file. The regular sidebar on the right shows TODO items in the file.
#+BEGIN_SRC emacs-lisp
(use-package org-sidebar
  :straight (org-sidebar :type git :host github :repo "alphapapa/org-sidebar")
  :bind (("<f5>" . org-sidebar-tree-toggle)
	 ("<f6>" . org-sidebar-toggle))
  )
#+END_SRC
* COMMENT Indentation
Don't use this because it causes problems with scrolling over large images.

Indent org files by default
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-visual-indent
  :straight (org-visual-outline :type git :host github :repo "legalnonsense/org-visual-outline")
  :config
  (setq org-visual-indent-color-indent '((1 (:background "darkgray" :foreground "darkgray" :height .1))))
  (org-visual-indent-mode))
#+END_SRC

* Indentation
Don't hide stars since this gets rid of bullets as well, and I have leading stars hidden anyway.
#+BEGIN_SRC emacs-lisp
(setq org-indent-mode-turns-on-hiding-stars nil)
#+END_SRC

* Export
Enable using :ignore: in a heading to leave off the heading (but not content) of a section in export.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+END_SRC

Allow overriding variable values in buffer for export (using =#+BIND: variable value=)
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

Allow formatting code blocks using minted in $\LaTeX$ export. From [[https://stackoverflow.com/questions/46438516/how-to-encapsualte-code-blocks-into-a-frame-when-exporting-to-pdf/60396939#60396939][Stack Overflow]].
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

Add support for Elsevier article format. From https://write.as/dani/writing-a-phd-thesis-with-org-mode.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
		   '("elsarticle"
		     "\\documentclass{elsarticle}
   [NO-DEFAULT-PACKAGES]
   [PACKAGES]
   [EXTRA]"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

* Refiling
Set targets for refiling. Use =C-c C-w= to refile. This determines what options you're prompted with. Includes everything in all the agenda files, plus the someday file and various list files.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)
                           ("someday.org" :level . 1)
			   ("l-media.org" :maxlevel . 2)
			   ("l-ideas.org" :maxlevel . 2)))
#+END_SRC

Include the file name in the outline path to allow refiling as a top-level heading.
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Create ids for links so they will work even if you move them across files.
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-clone-delete-id t)
#+END_SRC

* Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cC" 'klk/open-calendar)
#+END_SRC

* Images
Make files start with inline images loaded, and add a hook to display them after executing a code block to display resulting graphs.
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

Set this to =nil= to allow customizing image preview size with something like:
=#ATTR_ORG: :width 200=
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

Scale up latex preview images.
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
(setq org-preview-latex-image-directory "/tmp/ltximg/")
(setq org-preview-latex-default-process 'imagemagick)
#+END_SRC

This package uses AucTeX's preview library for org mode LaTeX previews, which is faster. Especially important since I'm regenerating previews in all open buffers when I change themes.
#+BEGIN_SRC emacs-lisp
(use-package org-auctex
  :straight (org-auctex :type git :host github :repo "karthink/org-auctex")
  :config (add-hook 'org-mode-hook 'org-auctex-mode))
#+END_SRC

* Tasks

** General
Stop parent tasks from being marked as complete if they have incomplete children.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Set the =TODO= states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence
			   "TODO(t!)"
			   "NEXT(n)"
			   "WAITING(w@)"
			   "PROJECT(p)"
			   "INP(i!)"
			   "|"
			   "DONE(d)"
			   "CANCELLED(c@)"
			   "NOTE(e)"
			   )
			   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-unavailable-files t)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/org-checklist.html][org-checklist]] supports recurring checklists
#+BEGIN_SRC emacs-lisp
;(use-package org-checklist)
#+END_SRC

** Archiving
   Archive to =archive.org= under a tree heading with the name of the origin file.
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

** Logging
 Log state changes in a drawer, not in the task content.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-state-notes-into-drawer t)
 #+END_SRC

 This will log a CLOSED timestamp when an item is marked as done. This is consistent with what orgzly does, and seems to show up in the agenda much like state change logs, except it makes archived items show up as well.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 #+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates `(
			("t" "Tasks")
			("tt" "Todo"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("tn" "Next task"
			 entry (file ,(org-file-path "inbox.org"))
			 "* NEXT %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("ts" "Scheduled Todo"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %? \nSCHEDULED: %^{scheduled}t\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("td" "Todo with Deadline"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %? \nDEADLINE: %^{deadline}t\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("n" "Notes")
			("ng" "Gardening related"
			 entry (file+headline ,(org-file-path "p-garden.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?")
			("nh" "Health related"
			 entry (file+headline ,(org-file-path "p-health.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?")
			("nf" "Finance related"
			 entry (file+headline ,(org-file-path "p-financial.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?")
			("nr" "Research related"
			 entry (file+olp+datetree ,(org-file-path "research.org") "Notes")
			 "* %?")
			("p" "Project"
			 entry (file ,(org-file-path "gtd.org"))
			 "* PROJECT %^{name} \n:PROPERTIES:\n:CREATED: %U\n:PROJECT: %\\1\n:OUTCOME: %?\n:END:\n")
			("T" "Troubleshooting"
			 entry (file ,(org-file-path "troubleshooting.org"))
			 "* %^{problem} \n:PROPERTIES:\n:CREATED: %U\n:END:\n** Solution\n%^{solution}\n** Details\n%?")
			("w" "Weekly" entry
			 (file ,(org-file-path "journal/weekly2022.org"))
			 "** Week %^{week number}
[[file:~/Dropbox/org/roam/dailies/%^{start of week (yyyymmdd).org}]]
,*** Goals / priorities :goals:
- %?
,*** Review :weekly:
,*** Key Ideas :keyideas:\n")
			("m" "Monthly" entry
			 (file ,(org-file-path "journal/weekly2022.org"))
			 "* %^{month}
,** %\\1 Goals / priorities :goals:
- %?
,** %\\1 Review :monthly:
,** %\\1 Key Ideas :monthlykeyideas:
,** %\\1 Highlights :highlights:\n" :empty-lines 1)
			("a" "Accomplishments" entry
			 (file+olp+datetree ,(org-file-path "accomplishments.org"))
			 "* %?")
			("D" "Daily" entry
			 (file+olp+datetree ,(org-file-path "journal/daily.org"))
			 "* NOTE %? \nSCHEDULED: %t\nCLOSED: %t")
			("N" "Daily Note" entry
			 (file+olp+datetree ,(org-file-path "journal/daily.org"))
			 "* NOTE %? \nSCHEDULED: %^{Date}t\nCLOSED: %^{Same date again}t")
			))
#+END_SRC

** Agenda
Make agenda full screen.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

Some agenda view tweaks.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-include-deadlines t)
(setq org-agenda-start-with-log-mode t)
(setq org-deadline-warning-days 7)
#+END_SRC

Add more space for the category in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format '((agenda . " %i %-15:c%?-12t% s")
				 (todo . " %i %-12:c")
				 (tags . " %i %-12:c")
				 (search . " %i %-12:c")))
#+END_SRC

Set files to be included in the agenda. Includes archive because I like to see old completed tasks in the agenda, and also =daily.org= because I want to show my one-line daily summaries in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files `(,(org-file-path "inbox.org")
			 ,(org-file-path "mobile inbox.org")
			 ,(org-file-path "gcal.org")
			 ,(org-file-path "gcal-school.org")
			 ,(org-file-path "gtd.org")
			 ,(org-file-path "research.org")
			 ,(org-file-path "recurring.org")
			 ,(org-file-path "archive.org")
			 ,(org-file-path "school.org")
			 ,(org-file-path "p-financial.org")
			 ,(org-file-path "p-health.org")
			 ,(org-file-path "p-garden.org")
			 ,(org-file-path "journal/daily.org")))
#+END_SRC

Enable inline tasks.
#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

Super Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :config
  (org-super-agenda-mode t))
(require 'org-habit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun timestamp-in-n-days (n)
  "Get the timestamp of n days in the future."
  (format-time-string "%Y-%m-%d" (time-add (* 3600 24 n) (current-time))))

(setq org-agenda-custom-commands
      (list
       (quote
	("d" "Daily Agenda"
	 (
	  (
	   agenda "" ((org-agenda-span 'day)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
		      (org-super-agenda-groups
		       '(
			 (:name "⏰ Calendar" :time-grid t)
			 (:name "☆ Important" :priority "A")
			 (:name "⚠ Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
			 (:name "☆ Due" :and (:deadline today :not (:habit t)))
			 (:auto-property "Project")
			 (:auto-category)
			 (:name "Misc. Scheduled" :and (:scheduled today :not (:habit t)))
			 (:name "📌 Routines" :and (:habit t :category "recurring" :tag "habit"))
			 (:name "📌 Chores" :and (:habit t :category "recurring" :tag "chore"))
			 ))
		      ))
	  )))
       (quote
	("x" "Daily Agenda"
	 (
	  (
	   agenda "" (
		      (org-agenda-span 'day)
		      (org-agenda-overriding-header "Today")
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
		      (org-super-agenda-groups
		       '((:name "Calendar" :time-grid t)
			 (:name "☆ Important" :priority "A")
			 (:name "⚠ Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
			 (:name "Scheduled Today" :scheduled today)
			 (:auto-property "Project")
			 (:auto-category)
			 (:name "☆ Due" :and (:deadline today :not (:habit t)))
			 ))
		      ))
	  (alltodo "" ((org-agenda-overriding-header "Upcoming Schedule")
                       (org-super-agenda-groups
                        `((:name "Tomorrow" :scheduled (on ,(timestamp-in-n-days 1)))
			  (:name "In Two Days" :scheduled (on ,(timestamp-in-n-days 2)))
			  (:discard (:anything t))
			  ))))
	  ;; (todo "NEXT"
	  ;; 	((org-agenda-overriding-header "Next Tasks")
	  ;; 	 (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
	  ;; 	 ))
	  )))
       (quote
	("U" "Unscheduled"
	 ((todo ""
		((org-agenda-overriding-header "Unscheduled Tasks")
		 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("PROJECT"))))))
	 ((org-agenda-todo-ignore-scheduled 'future)
	  (org-agenda-sorting-strategy '(deadline-up)))))
       (quote("N" "Next tasks" todo "NEXT"
	      ((org-agenda-overriding-header "Next Tasks")
	       (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
	       ))
	     )
       (quote("p" "Project tasks" todo ""
	      (
	       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("PROJECT")))
	       (org-super-agenda-groups '((:auto-property "Project" :not (:todo "PROJECT")) (:discard (:anything t))))
	       )
	      ))
       (quote
	("n" "Notes"
	 (
	  (agenda "" ((org-agenda-span 'week)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
					; (org-agenda-compact-blocks t)
		      (org-super-agenda-groups
		       '(
			 (:name "Daily Summary" :and (:time-grid t :tag "daily"))
			 (:discard (:anything t))
			 ))
		      )))))
       )
      )
#+END_SRC

* Journal

*** COMMENT deft
Deft is good for searching through files in a directory, like the journal directory.
=deft-parse-title= override is from https://github.com/jrblevin/deft/issues/75 so the title isn't just ":PROPERTIES:" with org-roam V2.

Note: this causes some annoyances because it seems to trigger auto-saves in org-roam files every couple of seconds.
#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-c d" . deft)
  :bind ("C-c D" . deft-find-file)
  :commands (deft)
  :config
  (setq deft-default-extension "org"
	deft-extensions '("org")
	deft-directory "~/Dropbox/org/roam"
	deft-recursive t
	deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n\\(#\\+.+\n\\)*\\(- .+::.+\n\\)?"
	deft-use-filename-as-title nil
	deft-file-naming-rules '((noslash . "-")
				 (nospace . "-")
				 (case-fn . downcase))
	deft-text-mode 'org-mode)
  )
(advice-add 'deft-parse-title :override
    (lambda (file contents)
      (if deft-use-filename-as-title
	  (deft-base-filename file)
	(let* ((case-fold-search 't)
	       (begin (string-match "title: " contents))
	       (end-of-begin (match-end 0))
	       (end (string-match "\n" contents begin)))
	  (if begin
	      (substring contents end-of-begin end)
	    (format "%s" file))))))
#+END_SRC

*** ripgrep
An alternative to =deft=, using =ripgrep=. Nice in that it actually shows the matches, not just the beginning of the file containing a match.
Config based on https://renatgalimov.github.io/org-basb-code/. Note that I had to add the =defvar= line per the comment on [[https://stackoverflow.com/a/20967895][this answer]], since =helm-rg-default-directory= is a lexical variable.
#+BEGIN_SRC emacs-lisp
(use-package helm-rg
  :init
  (defun helm-rg-roam-directory (&optional query)
    "Search with rg in your roam directory, QUERY."
    (interactive)
    (defvar helm-rg-default-directory)
    (let ((helm-rg-default-directory "~/Dropbox/org/roam"))
      (helm-rg query nil)))
  :bind (("C-c n R" . helm-rg-roam-directory)))
#+END_SRC

*** random note
Random note, for looking at a random past entry.
#+BEGIN_SRC emacs-lisp
(use-package org-randomnote
	:bind ("C-c r" . org-randomnote)
	:config
	(setq org-randomnote-candidates (directory-files "~/Dropbox/org/roam/dailies" t "^[0-9]+.org$" t))
	(setq org-randomnote-open-behavior 'indirect-buffer)
	)
#+END_SRC

* Visual

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-preserve-indentation t)
#+END_SRC

Hide emphasis markers like *,/,=

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

But show them when the cursor is on the word.
#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :config (add-hook 'org-mode-hook 'org-appear-mode))
#+END_SRC

Load images inline.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

This changes the context settings for sparse subtrees so that it will show the content of a heading matching the tag.
#+BEGIN_SRC emacs-lisp
(push '(tags-tree . local) org-show-context-detail)
#+END_SRC

Use variable font sizes for headings
#+BEGIN_SRC emacs-lisp
;; (custom-set-faces
;;   '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
;;   '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
;;   '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
;;   '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
;; )
#+END_SRC

* Code
** General
Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Additional shortcuts for inserting code blocks.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("r" "#+BEGIN_SRC R \n?\n#+END_SRC"))
#+END_SRC

* Roam
After much struggling with getting the org-roam buffer to follow links reasonably, the configuration below (dedicated side window, from [[https://org-roam.discourse.group/t/sidebar-roam-buffer-gets-replaced-with-org-roam-node-instead-of-updating/2162/6][this discussion]]) works well enough.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight (org-roam :type git :flavor melpa :host github :repo "org-roam/org-roam")
  :demand t ; force this to be loaded
  :custom
  (org-roam-directory "~/Dropbox/org/roam")
  :config
  (org-roam-db-autosync-mode)
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (add-hook 'org-roam-mode-hook #'visual-line-mode)
  (define-key org-roam-mode-map [mouse-1] #'org-roam-preview-visit)
  (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-side-window)
                   (dedicated . t)
                   (side . right)
                   (slot . 0)
                   (window-width . 0.33)
                   (window-parameters . ((no-other-window . t)
                                         (no-delete-other-windows . t)))))
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head
		    "%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+STARTUP: indent\n#+title: ${title}\n#+startup: latexpreview\n#+filetags: \n")
           :unnarrowed t)
	  ("p" "person" plain
           "%?"
           :if-new (file+head
		    "%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n#+startup: latexpreview\n#+filetags: :person: \n")
           :unnarrowed t)
	  ("e" "podcast episode" plain
           "Episode of %?"
           :if-new (file+head
		    "%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n#+startup: latexpreview\n#+filetags: :podcast:episode:\n ")
           :unnarrowed t)
	  ("o" "organization" plain
           "%?"
           :if-new (file+head
		    "%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n#+startup: latexpreview\n#+filetags: :organization: \n")
           :unnarrowed t)
	  ("r" "bibliography reference" plain "%?"
           :if-new
           (file+head "references/${citekey}.org" "#+title: ${title}\n#+author: ${author}\n#+date: ${date}\n#+filetags: :reference:\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ${file}\n:END:\n")
	   :unnarrowed t)))
(setq org-roam-dailies-directory "dailies/")
(setq org-roam-dailies-capture-templates
      (quote (("d" "daily" plain
               "%?"
               :if-new (file+head
                        "%<%Y%m%d>.org"
                        "#+STARTUP: indent\n#+title: %<%Y-%m-%d (%A)>\n")
               :unnarrowed t))))
#+END_SRC

  Handy config from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/ to add roam files with the =Project= tag to the agenda list, so I can track TODOs within a project.

Add existing projects to agenda list on startup:
#+BEGIN_SRC emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (append org-agenda-files (my/org-roam-list-notes-by-tag "project"))))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)
#+END_SRC

And add new projects to agenda list after capture.
#+BEGIN_SRC emacs-lisp
(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "project")
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n"
      :if-new (file+head
	       "%<%Y%m%d%H%M%S>-${slug}"
	       "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:")
      :unnarrowed t))))
#+END_SRC

Set key bindings and end =use-package= =org-roam= config.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
:bind (("C-c j" . org-roam-dailies-goto-today)
       ("C-c t" . org-roam-dailies-goto-tomorrow)
       ("C-c y" . org-roam-dailies-goto-yesterday)
       ("C-c n d" . org-roam-dailies-goto-date)
       ("C-c n f" . org-roam-node-find)
       ("C-c n l" . org-roam-buffer-toggle)
       ("C-c n i" . org-roam-node-insert)
       ("C-c f" . org-roam-dailies-goto-next-note)
       ("C-c b" . org-roam-dailies-goto-previous-note)))
#+END_SRC


  Graphical UI
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))
#+END_SRC
* Reference management
** pdf-tools
Better pdf interactions in Emacs.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width)
  ;; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  :custom
  (pdf-annot-activate-created-annotations t "automatically annotate highlights")
)
#+END_SRC

Emacs 29's =pixel-scroll-precision-mode= doesn't seem to work with pdf-tools ([[https://github.com/vedang/pdf-tools/issues/56][issue]]). For now, work around it by turning mode off when changing to a pdf buffer, and on otherwise.
#+BEGIN_SRC emacs-lisp
(defun my/set-precision-scrolling ()
  (if (eq major-mode 'pdf-view-mode)
      (pixel-scroll-precision-mode -1)
    (pixel-scroll-precision-mode 1)))

(add-hook 'buffer-list-update-hook #'my/set-precision-scrolling)
#+END_SRC

** bibtex
Set paths that will be used by multiple packages.
#+BEGIN_SRC emacs-lisp
(setq bib-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      pdf-files-directory "~/Dropbox/papers/bibtex")
#+END_SRC

** helm-bibtex
Set up =helm-bibtex= to use the Zotero =.bib= file and store notes in the =org-roam= directory.
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :config
  (require 'helm-config)
  (setq bibtex-completion-bibliography bib-files
        bibtex-completion-library-path pdf-files-directory
        bibtex-completion-pdf-field "File"
        bibtex-completion-notes-path org-roam-directory))
#+END_SRC

** org-ref
Manage references in org mode.
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :after helm-bibtex
  :bind (:map org-mode-map ("C-c ]" . org-ref-insert-link))
  :config
  (setq org-latex-prefer-user-labels t)
  :demand
  )
#+END_SRC

** org-roam-bibtex
Integrate bibtex with =org-roam=.
#+BEGIN_SRC emacs-lisp
(use-package org-roam-bibtex
  :after (org-roam helm-bibtex)
  :bind (:map org-mode-map ("C-c n b" . orb-note-actions))
  :config
  (require 'org-ref) ; optional: if Org Ref is not loaded anywhere else, load it here
  (org-roam-bibtex-mode)
  :demand)
#+END_SRC

** org-noter
Attach notes to locations in the pdf.
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org-roam
  :config
  (setq org-noter-notes-window-location 'horizontal-split
	org-noter-always-create-frame nil
	org-noter-hide-other nil
	org-noter-notes-search-path 'org-roam-directory
	org-noter-doc-split-fraction '(0.66 . 0.5)
   )
  :bind (:map org-mode-map ("C-c n n" . org-noter))
  )
#+END_SRC

** Anki
#+BEGIN_SRC emacs-lisp
(use-package org-anki
  :config
  (setq org-anki-default-deck "Default")
  :bind (("C-c s" . org-anki-sync-entry))
  )
#+END_SRC
* Calendar
  Set up syncing with google calendar  following https://github.com/emacsmirror/org-gcal.

** calfw
  Basic calfw config from https://github.com/kiwanami/emacs-calfw
  #+BEGIN_SRC emacs-lisp
    (use-package calfw
      :init
      (setq cfw:fchar-junction ?╋
	    cfw:fchar-vertical-line ?┃
	    cfw:fchar-horizontal-line ?━
	    cfw:fchar-left-junction ?┣
	    cfw:fchar-right-junction ?┫
	    cfw:fchar-top-junction ?┯
	    cfw:fchar-top-left-corner ?┏
	    cfw:fchar-top-right-corner ?┓
	    calendar-week-start-day 1 ; 0:Sunday, 1:Monday
	    ))
    (use-package calfw-org)
    (use-package calfw-ical)
    (use-package calfw-cal)

  (defun klk/open-calendar ()
    "CFW config for my calendars."
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "DarkGreen")
      (cfw:ical-create-source "gcal" (klk/get-gcal) "Blue")
     )))
  #+END_SRC

** org-gcal
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :config
  (setq org-gcal-client-id (klk/get-gcal-client-id)
	org-gcal-client-secret (klk/get-gcal-client-secret)
	org-gcal-fetch-file-alist `((,(klk/get-gcal-id) . "~/Dropbox/org/gtd/gcal.org")
				    (,(klk/get-gcal-id-school) . "~/Dropbox/org/gtd/gcal-school.org"))))
#+END_SRC
* babel

** venv
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :init
  (venv-workon "base")
  )
#+END_SRC

** jupyter
[[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] requires [[https://github.com/nnicandro/emacs-zmq][emacs-zmq]]. To install =emacs-zmq=, after running the following, go to =straight/build/zmq= and run =make=.

May need to first run =sudo dnf install libstdc++-static=.

#+BEGIN_SRC emacs-lisp
(use-package zmq)

(use-package jupyter
  :config
  (require 'jupyter-julia))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

Fix for ansi color sequence issue from https://github.com/nnicandro/emacs-jupyter/issues/380
#+BEGIN_SRC emacs-lisp
(defun jupyter-ansi-color-apply-on-region (begin end)
  (ansi-color-apply-on-region begin end t))
#+END_SRC

** load languages
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (jupyter . t)
   (octave . t)
   ;; other languages..
   ))
#+END_SRC
