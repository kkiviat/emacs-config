#+TITLE: Org mode config
#+DESCRIPTION: Configuration for org-mode
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent

* General

Save all org buffers periodically to reduce conflicts between desktop and orgzly on mobile.
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 60 t 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

Most of this is from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this]] guide:

Set the org directory and method for getting the full path to an org file from its name.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Prettier bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Color the TODO states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
'(("WAITING" . (:foreground "darkorange" :background "lightyellow" :weight bold :box t))
	("TODO" . (:foreground "darkblue" :background "lightblue" :weight bold :box t))
	("PROJECT" . (:foreground "black"))
	("NEXT" . (:foreground "darkblue" :background "lightblue" :weight bold :box t))))
#+END_SRC

* Fonts
Enable changing font face per buffer. From https://www.emacswiki.org/emacs/FacesPerBuffer.

ETBookOT font is installed from https://github.com/edwardtufte/et-book (by downloading the .otf files in =et-book-ligatures-enabled= and putting them in =~/.local/share/fonts= and running =fc-cache -f -v=). (Font name obtained from =fc-list=.)
#+BEGIN_SRC emacs-lisp
;; Use variable width font faces in current buffer
(defun my-buffer-face-mode-variable ()
  "Set font to a variable width (proportional) fonts in current buffer"
  (interactive)
  (setq buffer-face-mode-face '(:family "ETBookOT" :height 130))
  (buffer-face-mode))

 ;; Use monospaced font faces in current buffer
 (defun my-buffer-face-mode-fixed ()
   "Sets a fixed width (monospace) font in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Consolas"))
   (buffer-face-mode))
#+END_SRC

Use the variable font for org buffers by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'my-buffer-face-mode-variable)
#+END_SRC

But use monospace font in code blocks and tables.  From https://github.com/jparcill/emacs_config/blob/master/config.el
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
#+END_SRC

* Refiling
Set targets for refiling. Use =C-c C-w= to refile. This determines what options you're prompted with. Includes everything in all the agenda files, plus the someday file and various list files.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)
                           ("someday.org" :level . 1)
			   ("l-media.org" :maxlevel . 2)
			   ("l-ideas.org" :maxlevel . 2)))
#+END_SRC

Include the file name in the outline path to allow refiling as a top-level heading.
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Create ids for links so they will work even if you move them across files.
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-clone-delete-id t)
#+END_SRC


* Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cC" 'klk/open-calendar)
#+END_SRC


* Images
Make files start with inline images loaded, and add a hook to display them after executing a code block to display resulting graphs.
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

Scale up latex preview images.
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
#+END_SRC

* Tasks

** General
Stop parent tasks from being marked as complete if they have incomplete children.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Set the =TODO= states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence
			   "TODO(t!)"
			   "NEXT(n)"
			   "WAITING(w@)"
			   "PROJECT(p)"
			   "INP(i!)"
			   "|"
			   "DONE(d)"
			   "CANCELLED(c@)"
			   "NOTE(e)"
			   )
			   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-unavailable-files t)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/org-checklist.html][org-checklist]] supports recurring checklists
#+BEGIN_SRC emacs-lisp
;(use-package org-checklist)
#+END_SRC

** Archiving
   Archive to =archive.org= under a tree heading with the name of the origin file.
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

** Logging
 Log state changes in a drawer, not in the task content.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-state-notes-into-drawer t)
 #+END_SRC

 This will log a CLOSED timestamp when an item is marked as done. This is consistent with what orgzly does, and seems to show up in the agenda much like state change logs, except it makes archived items show up as well.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 #+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates `(
			("t" "Tasks")
			("tt" "Todo"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("tn" "Next task"
			 entry (file ,(org-file-path "inbox.org"))
			 "* NEXT %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("ts" "Scheduled Todo"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %? \nSCHEDULED: %^{scheduled}t\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("td" "Todo with Deadline"
			 entry (file ,(org-file-path "inbox.org"))
			 "* TODO %? \nDEADLINE: %^{deadline}t\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n")
			("n" "Notes")
			("ng" "Gardening related"
			 entry (file+headline ,(org-file-path "p-garden.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?")
			("nh" "Health related"
			 entry (file+headline ,(org-file-path "p-health.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?")
			("nf" "Finance related"
			 entry (file+headline ,(org-file-path "p-financial.org") "Notes")
			 "* %^{title}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?")
			("p" "Project"
			 entry (file ,(org-file-path "gtd.org"))
			 "* PROJECT %^{name} \n:PROPERTIES:\n:CREATED: %U\n:PROJECT: %\\1\n:OUTCOME: %?\n:END:\n")
			("w" "Weekly" entry
			 (file ,(org-file-path "journal/weekly2021.org"))
			 "** Week %^{week number}
[[file:~/Dropbox/org/roam/dailies/%^{start of week (yyyymmdd).org}]]
,*** Goals / priorities :goals:
- %?
,*** Review :weekly:
,*** Key Ideas :keyideas:\n")
			("m" "Monthly" entry
			 (file ,(org-file-path "journal/weekly2021.org"))
			 "* %^{month}
,** %\\1 Goals / priorities :goals:
- %?
,** %\\1 Review :monthly:
,** %\\1 Key Ideas :monthlykeyideas:
,** %\\1 Highlights :highlights:\n" :empty-lines 1)
			("D" "Daily" entry
			 (file+datetree ,(org-file-path "journal/daily.org"))
			 "* NOTE %? \nSCHEDULED: %t\nCLOSED: %t")
			("N" "Daily Note" entry
			 (file+datetree ,(org-file-path "journal/daily.org"))
			 "* NOTE %? \nSCHEDULED: %^{Date}t\nCLOSED: %^{Same date again}t")
			))
#+END_SRC

** Agenda
Make agenda full screen.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

Some agenda view tweaks.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-include-deadlines t)
(setq org-agenda-start-with-log-mode t)
(setq org-deadline-warning-days 7)
#+END_SRC

Set files to be included in the agenda. Includes archive because I like to see old completed tasks in the agenda, and also =daily.org= because I want to show my one-line daily summaries in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files `(,(org-file-path "inbox.org")
			 ,(org-file-path "mobile inbox.org")
			 ,(org-file-path "gtd.org")
			 ,(org-file-path "work.org")
			 ,(org-file-path "recurring.org")
			 ,(org-file-path "archive.org")
			 ,(org-file-path "p-financial.org")
			 ,(org-file-path "p-health.org")
			 ,(org-file-path "p-garden.org")
			 ,(org-file-path "journal/daily.org")))
#+END_SRC

Super Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :config
  (org-super-agenda-mode t))
(require 'org-habit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      (list
       (quote
	("h" "Hotlist"
	 ((tags-todo "DEADLINE<\"<+0d>\""
		     ((org-agenda-overriding-header "OVERDUE")))
	  (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
		     ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
	  (tags-todo "DEADLINE=\"\"+PRIORITY={A}|DEADLINE>\"<+1w>\"+PRIORITY={A}"
		     ((org-agenda-overriding-header "HIGH PRIORITY")))
	  (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
		     ((org-agenda-overriding-header "FLAGGED")
		      (org-agenda-skip-function
		       '(org-agenda-skip-entry-when-regexp-matches))
		      (org-agenda-skip-regexp "\\[#A\\]"))))
	 ((org-agenda-todo-ignore-scheduled 'future)
	  (org-agenda-sorting-strategy '(deadline-up)))))
       (quote
	("x" "Daily Agenda"
	 (
	  (tags-todo "+PRIORITY={A}"
		     ((org-agenda-overriding-header "High Priority Tasks")))
	  (
	   agenda "" ((org-agenda-span 'day)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
					; (org-agenda-compact-blocks t)
		      (org-super-agenda-groups
		       '(
			 (:name "⏰ Calendar" :time-grid t)
			 (:name "⚠ Overdue!" :deadline past)
			 (:name "⚠ Overdue!" :and (:scheduled past :not (:habit t)))
			 (:auto-property "Project")
			 (:auto-tags)
			 (:name "Misc. Scheduled" :and (:scheduled today :not (:habit t)))
			 (:name "Due" :and (:deadline today :not (:habit t)))
			 (:name "⭐ Next" :todo "NEXT")
			 (:name "⭐ Important" :priority "A")
			 ;(:name "📌 Routines" :and (:habit t :category "recurring" :tag "habit"))
			 (:name "📌 Chores" :and (:habit t :category "recurring" :tag "chore"))
			 ))
		      ))
	  ;; (todo "NEXT"
	  ;; 	((org-agenda-overriding-header "Next Tasks")
	  ;; 	 (org-super-agenda-groups '((:auto-property "Project")))
	  ;; 	 ))
	  )))
       (quote
	("U" "Unscheduled"
	 ((todo ""
		((org-agenda-overriding-header "Unscheduled Tasks")
		 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("PROJECT"))))))
	 ((org-agenda-todo-ignore-scheduled 'future)
	  (org-agenda-sorting-strategy '(deadline-up)))))
       (quote("p" "Project tasks" todo ""
	      (
	       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("PROJECT")))
	       (org-super-agenda-groups '((:auto-property "Project" :not (:todo "PROJECT")) (:discard (:anything t))))
	       )
	      ))
       (quote
	("n" "Notes"
	 (
	  (agenda "" ((org-agenda-span 'week)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
					; (org-agenda-compact-blocks t)
		      (org-super-agenda-groups
		       '(
			 (:name "Daily Summary" :and (:time-grid t :tag "daily"))
			 (:discard (:anything t))
			 ))
		      )))))
       )
      )
#+END_SRC

* Journal

*** deft
Deft is good for searching through files in a directory, like the journal directory.
#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-c d" . deft)
  :bind ("C-c D" . deft-find-file)
  :commands (deft)
  :config
  (setq deft-default-extension "org")
  (setq deft-extensions '("org"))
  (setq deft-directory "~/Dropbox/org/roam")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title nil)
  (setq deft-file-naming-rules '((noslash . "-")
				 (nospace . "-")
				 (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  )
#+END_SRC

*** random note
Random note, for looking at a random past entry.
#+BEGIN_SRC emacs-lisp
(use-package org-randomnote
	:bind ("C-c r" . org-randomnote)
	:config
	(setq org-randomnote-candidates (directory-files "~/Dropbox/org/roam/dailies" t "^[0-9]+.org$" t))
	(setq org-randomnote-open-behavior 'indirect-buffer)
	)
#+END_SRC

* Visual

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Hide emphasis markers like *,/,=

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

Load images inline.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

This changes the context settings for sparse subtrees so that it will show the content of a heading matching the tag.
#+BEGIN_SRC emacs-lisp
(push '(tags-tree . local) org-show-context-detail)
#+END_SRC


* Code
** General
Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Additional shortcuts for inserting code blocks.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("r" "#+BEGIN_SRC R \n?\n#+END_SRC"))
#+END_SRC


* Roam
  Making the generated graphs navigatable requires setting up org-protocol. See the [[https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029][org roam manual]] for instructions on setting up org-protocol.
#+BEGIN_SRC emacs-lisp
(server-start)
(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Dropbox/org/roam")
  :config
  (require 'org-roam-protocol)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}
,#+startup: latexpreview
,#+roam_tags: \n"
           :unnarrowed t)
	  ("p" "person" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}
,#+startup: latexpreview
,#+roam_tags: person \n"
           :unnarrowed t)
	  ("o" "organization" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}
,#+startup: latexpreview
,#+roam_tags: organization \n"
           :unnarrowed t)
	  ("l" "literature" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}
,#+startup: latexpreview
,#+author: ${author}
,#+year: ${year}
,#+roam_tags: literature\n"
           :unnarrowed t)))
  (setq org-roam-dailies-directory "dailies/")
  (setq org-roam-graph-exclude-matcher '("dailies"))
  (setq org-roam-dailies-capture-templates
	'(("d" "daily" plain
	   #'org-roam-capture--get-point
	   "%?"
	   :file-name "dailies/%<%Y%m%d>"
	   :head "#+title: %<%Y-%m-%d (%A)>\nRemember to write single line summary (C-c c D)\n\n"
	   :unnarrowed t)))
  :bind (("C-c T" . org-roam-dailies-today)
	 :map org-roam-mode-map
	      (("C-c n l" . org-roam)
	       ("C-c n f" . org-roam-find-file)
	       ("C-c n g" . org-roam-graph)
	       ("C-c f" . org-roam-dailies-find-next-note)
	       ("C-c b" . org-roam-dailies-find-previous-note))
	      :map org-mode-map
	      (("C-c n i" . org-roam-insert))
	      (("C-c n I" . org-roam-insert-immediate))))

#+END_SRC


Package that creates a beautiful interactive graph of your roam files, on http://127.0.0.1:8080/.
#+BEGIN_SRC emacs-lisp
(use-package org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+END_SRC

* Calendar
  Set up syncing with google calendar  following https://github.com/emacsmirror/org-gcal.
  Basic calfw config from https://github.com/kiwanami/emacs-calfw
  #+BEGIN_SRC emacs-lisp
	  (use-package calfw
	    :init
	    (setq cfw:fchar-junction ?╋
		  cfw:fchar-vertical-line ?┃
		  cfw:fchar-horizontal-line ?━
		  cfw:fchar-left-junction ?┣
		  cfw:fchar-right-junction ?┫
		  cfw:fchar-top-junction ?┯
		  cfw:fchar-top-left-corner ?┏
		  cfw:fchar-top-right-corner ?┓
		  calendar-week-start-day 1 ; 0:Sunday, 1:Monday
		  ))
	  (use-package calfw-org)
	  (use-package calfw-ical)
	  (use-package calfw-cal)

	(defun klk/open-calendar ()
	  "CFW config for my calendars."
	  (interactive)
	  (cfw:open-calendar-buffer
	   :contents-sources
	   (list
	    (cfw:org-create-source "DarkGreen")
	    (cfw:ical-create-source "gcal" (klk/get-gcal) "Blue")
	   )))
  #+END_SRC

* babel
  #+BEGIN_SRC emacs-lisp
(use-package jupyter
  :config
  (require 'jupyter-julia))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (jupyter . t)
     ;; other languages..
     ))
#+END_SRC
