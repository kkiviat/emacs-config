#+TITLE: Base emacs configuration
#+DESCRIPTION: Core configuration
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent

* Sensible Defaults
sensible-defaults.el is from [[https://github.com/hrs/sensible-defaults.el][here]].
Enable everything, but disable the visual bell function.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(setq ring-bell-function 'ignore)
#+END_SRC


* Windows
Hide window chrome
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode 0)
 (menu-bar-mode 0)
 (scroll-bar-mode -1)
 #+END_SRC

Start with window maximized and partially transparent.
Transparency toggling / setting code based on [[https://www.reddit.com/r/emacs/comments/9e98hp/translucent_background/e5pi7bl/][this reddit post]].
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))

(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(90 90))))
(global-set-key (kbd "<f9>") 'toggle-transparency)

;; Set transparency of emacs
(defun transparency (arg &optional active)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nEnter alpha value (1-100): \np")
  (let* ((elt (assoc 'alpha default-frame-alist))
         (old (frame-parameter nil 'alpha))
         (new (cond ((atom old)     `(,arg ,arg))
                    ((eql 1 active) `(,arg ,(cadr old)))
                    (t              `(,(car old) ,arg)))))
    (if elt (setcdr elt new) (push `(alpha ,@new) default-frame-alist))
    (set-frame-parameter nil 'alpha new)))
(global-set-key (kbd "C-c p") 'transparency)
#+END_SRC

Allows undo and redo of changes in window configurations.
By default, undo is bound to *C-c <left>* and redo to *C-c <right>*.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode 1))
#+END_SRC

* Scrolling
Emacs 29 has smooth scrolling natively.
#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29")
      (progn
	(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; two lines at a time
	(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
	(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
	(setq scroll-step 1) ;; keyboard scroll one line at a time

					; stop emacs from recentering the buffer point when the point goes outside the window
	(setq scroll-conservatively 101)
	)
    (progn
      (pixel-scroll-precision-mode)
      (setq pixel-scroll-precision-large-scroll-height 40.0)
      (setq pixel-scroll-precision-interpolation-factor 30)
      (setq scroll-conservatively 101) ;; keyboard scroll one line at a time
      )
    )
#+END_SRC


* Line numbers
  Display line numbers except in certain modes. From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode org-agenda-mode pdf-view-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+END_SRC


* Text
Make the text bigger by default. (sensible-defaults binds font resize to C-- and C-+)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC

Default to visual line mode for some modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :demand
     :bind (("M-x" . helm-M-x)
     	 ("M-y" . helm-show-kill-ring)
     	 ("C-x b" . helm-mini)
     	 ("C-x C-f" . helm-find-files))
     :init
     (helm-mode 1)
     :config
     (setq helm-split-window-in-side-p t
     	helm-move-to-line-cycle-in-source t
     	helm-autoresize-mode t
     	helm-ff-file-name-history-use-recentf t)
    )
#+END_SRC


* Themes
#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory "~/.emacs.d/themes")
(setq custom--inhibit-theme-enable nil)
#+END_SRC

** fonts
Enable changing font face per buffer. From https://www.emacswiki.org/emacs/FacesPerBuffer.

ETBookOT font is installed from https://github.com/edwardtufte/et-book (by downloading the .otf files in =et-book-ligatures-enabled= and putting them in =~/.local/share/fonts= and running =fc-cache -f -v=). (Font name obtained from =fc-list=.)

Set the default variable and fixed-pitch fonts.
#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans 3"))))
   '(fixed-pitch ((t ( :family "Hack")))))
#+END_SRC

Functions to change fonts. "default" includes org buffers when =fixed-pitch-mode= is not enabled. "fixed" controls code blocks, etc. "variable" controls the font in org buffers when =fixed-pitch-mode= is enabled.
#+BEGIN_SRC emacs-lisp
(defun klk-change-font (choice)
  "Top-level function to choose the class of font to change then change it"
  (interactive
   (let ((choices '("default" "fixed" "variable")))
     (list (completing-read "Choose: " choices nil t))))
  (command-execute
   (cond ((string= choice "default") 'klk/change-default-font-family)
	 ((string= choice "fixed") 'klk/change-fixed-font-family)
	 ((string= choice "variable") 'klk/change-variable-font-family)))
  choice)

(defun klk/change-variable-font-family (choice)
  "Change the font used for variable width text"
  (interactive
   (let ((choices '("boldfont" "Source Sans 3" "ETBookOT" "KG Part of Me")))
     (list (completing-read "Choose: " choices nil t))))
  (custom-theme-set-faces
   'user
   `(variable-pitch ((t (:family ,choice)))))
  choice)

(defun klk/change-fixed-font-family (choice)
  "Change the font used for fixed width (including default) text"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Free Mono" "Source Code Pro")))
     (list (completing-read "Choose: " choices nil t))))
  (custom-theme-set-faces
   'user
   `(fixed-pitch ((t (:family ,choice)))))
  choice)

(defun klk/change-default-font-family (choice)
  "Change the font used for default text (used in org buffers when not variable pitch)"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Source Sans Mono" "FreeMono" "Source Code Pro" "Hack")))
     (list (completing-read "Choose: " choices nil t))))
  (custom-theme-set-faces
   'user
   `(default ((t (:family ,choice)))))
  choice)
#+END_SRC


Enable changing font per buffer.
#+BEGIN_SRC emacs-lisp
(defun klk-buffer-set-font-family (family)
  "Set font to the specified family in current buffer"
  (setq buffer-face-mode-face `(:family ,family))
  (buffer-face-mode))
#+END_SRC

Functions to toggle =variable-pitch-mode= it for all org buffers.
#+BEGIN_SRC emacs-lisp
(defun klk-org-variable-pitch-on ()
  (interactive)
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode 1))))
  (buffer-list))
  )

(defun klk-org-variable-pitch-off ()
  (interactive)
  (remove-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode -1))))
  (buffer-list))
  )

(defun klk-toggle-variable-pitch-org-buffers ()
  (interactive)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (call-interactively 'variable-pitch-mode))))
  (buffer-list))
  )
#+END_SRC

Use monospace font in code blocks and tables.  From https://github.com/jparcill/emacs_config/blob/master/config.el
#+BEGIN_SRC emacs-lisp
(defun klk-set-org-block-fixed-pitch ()
  (interactive)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  )
#+END_SRC

** COMMENT general customizations
Disabled for now because I'm using the config from org-modern to add padding

Add more padding in text buffers.  Based on https://lepisma.xyz/2017/10/28/ricing-org-mode/index.html.
#+BEGIN_SRC emacs-lisp
(defun klk-text-file-spacing ()
  (setq line-spacing 0.1)
  ;; (setq header-line-format " ") ; add top margin
  (setq display-line-numbers nil)
  (setq left-fringe-width 0) ; disable fringe
  (setq right-fringe-width 0)
  (progn
  (setq left-margin-width 2) ; add side margins
  (setq right-margin-width 2)
  (set-window-buffer nil (current-buffer)))
  )

(add-hook 'text-mode-hook 'klk-text-file-spacing)
#+END_SRC

** Load themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :defer t)
#+END_SRC

Install the nice bespoke theme, but set it to color source code blocks as well.
#+BEGIN_SRC emacs-lisp
  (use-package bespoke-themes
    :straight (:type git :host github :repo "mclear-tools/bespoke-themes" :branch "main")
    :config
    ;; Set use of italics
    (setq bespoke-set-italic-comments t
	  bespoke-set-italic-keywords t)
    ;; Set variable pitch
    (setq bespoke-set-variable-pitch t)
    ;; Set initial theme variant
    (setq bespoke-set-theme 'light)
    )

  (add-hook 'bespoke-after-load-theme-hook 'my/customize-theme-bespoke)


  (defun my/customize-theme-bespoke (_theme &rest _args)
    (when (member 'bespoke custom-enabled-themes)
      (custom-theme-set-faces
       'bespoke

       '(org-block-begin-line
	 ((t (:underline "#A7A6AA" :foreground "white" :background "#30608C" :extend t))))
       '(org-block
	 ((t (:background "#EFF0F1" :extend t))))
       '(org-block-end-line
	 ((t (:overline "#A7A6AA" :foreground "white" :background "#30608C" :extend t))))
       '(highlight-symbol-face
	 ((t (:background "#DBE1EB"))))
       )))

  (advice-add 'load-theme :after #'my/customize-theme-bespoke)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package bespoke-modeline
  :straight (:type git :host github :repo "mclear-tools/bespoke-modeline")
  :init
  ;; Set header line
  (setq bespoke-modeline-position 'top)
  ;; Set mode-line height
  (setq bespoke-modeline-size 3)
  ;; Show diff lines in mode-line
  (setq bespoke-modeline-git-diff-mode-line t)
  ;; Set mode-line cleaner
  (setq bespoke-modeline-cleaner t)
  ;; Use mode-line visual bell
  (setq bespoke-modeline-visual-bell t)
  ;; Set vc symbol
  (setq  bespoke-modeline-vc-symbol "G:")
  :config
  (bespoke-modeline-mode))
#+END_SRC

** toggle themes
Spring theme uses fonts from https://www.ishouldbemoppingthefloor.com/2015/02/20-free-spring-fonts.html
#+BEGIN_SRC emacs-lisp
(defun klk-disable-all-themes ()
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme)))

(defun klk-choose-theme ()
  (interactive)
  (let ((choices '(("Spring"  . (lambda () (load-theme 'Spring t)))
		   ("Bespoke" . (lambda () (load-theme 'bespoke t)))
		   ("White"  . (lambda () (load-theme 'white t)))
		   ("Clean"  . (lambda () (load-theme 'clean t)))
                   ("Nier" . (lambda () (load-theme 'nier t)))
		   ("Dark" . (lambda () (load-theme 'doom-palenight t)))
		   ("Dark Yellow" . (lambda () (load-theme 'dark-yellow t)))
                   ("DefaultPlus"  . (lambda () (load-theme 'defaultplus t))))))
    (let ((choice (alist-get
		   (completing-read "Choose: " choices) choices nil nil 'equal)))
      (klk-disable-all-themes)
      (funcall choice)
      (klk-set-org-block-fixed-pitch)
      )
    )
  )
#+END_SRC

Set up hook for theme changes. Refreshes $\LaTeX$ previews in all open org buffers, and toggles =org-bullets-mode= to update bullets.
=org-latex-preview= needs a =C-u C-u= prefix argument to reload for the whole buffer. =C-u= corresponds to 4, =C-u= corresponds to 16.
#+BEGIN_SRC emacs-lisp
(defun klk-refresh-org-buffer-colors (&rest args)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
	      (let ((current-prefix-arg '(16))) ; C-u C-u
		(call-interactively 'org-latex-preview))
	      (org-bullets-mode))))
  (buffer-list))
  ;; Reset colors of window divider
  (dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
  )

(advice-add 'load-theme :after 'klk-refresh-org-buffer-colors)
#+END_SRC

** Set up current theme
#+BEGIN_SRC emacs-lisp
(load-theme 'bespoke t)
(klk-set-org-block-fixed-pitch) ; default
#+END_SRC

* Prettify
** org-modern
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :straight (org-modern :type git :host github :repo "minad/org-modern")
  :config
  (setq org-modern-star nil)
  )
#+END_SRC

Include their config to add padding to buffers and tweak a few other things.
#+BEGIN_SRC emacs-lisp
(modify-all-frames-parameters
 '((right-divider-width . 40)
   (internal-border-width . 40)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))


(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…"

 ;; Agenda styling
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")
#+END_SRC
** icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode-hook . all-the-icons-dired-mode))
  ;; :hook (dired-mode . (lambda () (interactive)
  ;;                       (unless (file-remote-p default-directory)
  ;;                         (all-the-icons-dired-mode)))))
#+END_SRC

* Flyspell
  #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight nil
  :hook
  (text-mode . flyspell-mode))
  #+END_SRC

* Highlighting
  Highlight all occurrences of word under the cursor. Config from http://xenodium.com/emacs-highlight-symbol-mode/
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (set-face-attribute 'highlight-symbol-face nil
			:background "#858585"
			:foreground "default")
    (setq highlight-symbol-idle-delay 0)
    (setq highlight-symbol-on-navigation-p t)
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
  #+END_SRC


* Backups / saves
From [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]]
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

Save history between sessions.
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
#+END_SRC


* Undo tree
More typical undo mode. Adds C-/ mapping to undo and C-? mapping to redo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil))
#+END_SRC


* Projectile
+ =C-c p p= to switch to a project
+ =C-c p s r= to ripgrep through current project
+ =C-c p S= save all project buffers
+ =C-c p f= select file in project
#+BEGIN_SRC emacs-lisp
(use-package rg) ;; ripgrep for searching in projectile

(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '(("~/Dropbox/org/gtd" . 3) ("~/" . 1) ("~/openfoam/" . 1)))
)
#+END_SRC

* Perspective
=perspective.el= allows saving multiple buffer lists / window configurations and quickly switching between them.
- =C-z s= switch to or create new perspective
- =C-z [n|p]= switch to next or previous perspective
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)
  :custom
  (persp-mode-prefix-key (kbd "C-z"))
  :init
  (persp-mode)
  :config
  (setq persp-state-default-file "~/Dropbox/org/.persp")
  (add-hook 'kill-emacs-hook #'persp-state-save))

(use-package persp-projectile
  :after projectile)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (use-package yasnippet-snippets)
  (yas-global-mode t)
  (add-to-list #'yas-snippet-dirs "~/.emacs.d/my-snippets")
  (yas-reload-all)'
  :diminish yas-minor-mode)
#+END_SRC


* Latex
Feature name different from package name; see https://github.com/raxod502/straight.el/issues/516
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex)
#+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit)
  #+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

(use-package multi-vterm)
#+END_SRC

* imenu
#+BEGIN_SRC emacs-lisp
(use-package imenu
  :config
  (setq org-imenu-depth 3))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '(;(recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))
  (setq dashboard-set-navigator t)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-navigator-buttons
        `((;; Github
           (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Github"
            "Github"
            (lambda (&rest _) (browse-url "https://github.com/kkiviat/emacs-config")))
           ;; Perspectives
           (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
            "Restore"
            "Restore"
            (lambda (&rest _) (persp-state-load persp-state-default-file)))
           ))))
#+END_SRC
