#+TITLE: Base emacs configuration
#+DESCRIPTION: Emacs configuration
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent
Enable lexical binding (needed for some of the org-roam config). *This must be at the top of the file.*
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
#+END_SRC

* Basics
** Saving
#+BEGIN_SRC emacs-lisp
  ;; Auto-revert modified files
  (add-hook 'after-init-hook #'global-auto-revert-mode)

  ;; Save a list of recently accessed files
  (add-hook 'after-init-hook #'recentf-mode)

  ;; Save minibuffer history across Emacs sessions
  (add-hook 'after-init-hook #'savehist-mode)

  ;; Remember the last location in a file
  (add-hook 'after-init-hook #'save-place-mode)
#+END_SRC

** recentf
Don't include mounted folders in recentf list, as it will have problems starting without the drive mounted.
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (add-to-list 'recentf-exclude "/mnt/"))
#+END_SRC

** Utilities

#+BEGIN_SRC emacs-lisp
(defun klk/save-buffer-and-exit()
    "Save current buffer and kill window"
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))

(defun klk/yank-file-path ()
    (interactive)
    (kill-new (buffer-file-name)))

(defun klk/yank-file-name ()
    (interactive)
    (kill-new (buffer-name)))

(defun klk/get-date-string ()
  (format-time-string "%Y-%m-%d %A" (org-read-date nil t)))

#+END_SRC

[[https://github.com/bbatsov/crux][Crux]] has various useful functions.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :straight (crux :type git :host github :repo "bbatsov/crux")
  :bind
  ("C-c o" . crux-open-with)
  ("C-x C-r" . crux-rename-buffer-and-file)
  ("C-x C-k" . crux-delete-buffer-and-file))
#+END_SRC

*** explain pause mode
#+BEGIN_SRC emacs-lisp
(use-package explain-pause-mode
  :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode")
  :config
  (explain-pause-mode))
#+END_SRC

** Help
*** which-key
Show possible command completions after typing a prefix.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (setq which-key-separator " ")
  (setq which-key-idle-delay 0.5)
 )
#+END_SRC
*** helpful
Get more information about functions, etc.
#+BEGIN_SRC emacs-lisp
(use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Text
Make the text bigger by default.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 120)
#+END_SRC

Default to visual line mode for some modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

*** fonts

ETbb font from https://ctan.org/pkg/etbb

Office Code Pro from https://github.com/nathco/Office-Code-Pro

SF Pro font from https://github.com/sahibjotsaggu/San-Francisco-Pro-Fonts

Put fonts in =~/.local/share/fonts= and run =fc-cache -f -v= to install.

Set the default variable and fixed-pitch fonts.
#+BEGIN_SRC emacs-lisp
  (when (member "Office Code Pro" (font-family-list))
    (set-face-attribute 'default nil :font "Office Code Pro"))

  ;; (when (member "SF Pro Display" (font-family-list))
  ;;   (set-face-attribute 'variable-pitch nil :font "SF Pro Display"))

  (when (member "Iosevka Aile" (font-family-list))
    (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'light :height 1.5))

  (when (member "Office Code Pro" (font-family-list))
    (set-face-attribute 'fixed-pitch nil :font "Office Code Pro" :height 0.8))
#+END_SRC

Mixed pitch
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))
#+END_SRC

Keybindings to scale font
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-=") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Undo tree
More typical undo mode. Adds C-/ mapping to undo and C-? mapping to redo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil))
#+END_SRC

** Windows

Allows undo and redo of changes in window configurations.
By default, undo is bound to *C-c <left>* and redo to *C-c <right>*.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode 1))
#+END_SRC

Set up keybinding for =ace-window= to quickly jump to a window.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+END_SRC

** Tabs

Basic tab configuration.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (global-set-key (kbd "C-l") 'tab-bar-switch-to-next-tab)
  (global-set-key (kbd "C-h") 'tab-bar-switch-to-prev-tab))
#+END_SRC

Use =vim-tab-bar= for nicer looking tabs.
#+BEGIN_SRC emacs-lisp
(use-package vim-tab-bar
  :commands vim-tab-bar-mode
  :hook
  (after-init . vim-tab-bar-mode))
#+END_SRC
** Keybindings
*** Evil mode

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
  (define-key evil-motion-state-map (kbd ";") 'evil-ex)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'help-mode 'normal)
  (evil-set-initial-state 'helpful-mode 'normal)
  (evil-set-initial-state 'special-mode 'normal)
  (evil-set-initial-state 'vterm-mode 'insert)
  (evil-set-initial-state 'fundamental-mode 'insert)
  (evil-set-initial-state 'messages-buffer-mode 'normal))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Use ESC to cancel everything
#+END_SRC

Additional evil keybindings for other parts of Emacs.
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list
        (remove 'outline evil-collection-mode-list))
  (evil-collection-init))

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+END_SRC

Avy-style jumping for evil motion commands. Type space followed by a motion key then type the letters corresponding to the desired candidate target.
#+BEGIN_SRC emacs-lisp
(use-package evil-easymotion
  :config
  (evilem-default-keybindings "SPC"))
#+END_SRC

Evil escape.
#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :init
  (setq-default evil-escape-key-sequence "fd")
  (setq evil-escape-unordered-key-sequence t)
  (evil-escape-mode 1))
#+END_SRC

Unbind =C-.= for use with embark, and unbind RET so it can be used to follow org mode links.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (define-key evil-motion-state-map (kbd "RET") nil))
#+END_SRC
*** General
#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)
  (general-create-definer klk/leader-key-def
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")
  (general-auto-unbind-keys)
  (general-create-definer klk/leader-key-def-major-mode
    :states '(normal visual motion emacs insert)
    :keymaps 'override
    :prefix "M-,")
  (klk/leader-key-def
    ;; Window management
    "w" '(:ignore t :which-key "window")
    "wl" 'windmove-right
    "wh" 'windmove-left
    "wk" 'windmove-up
    "wj" 'windmove-down
    "wR" 'winner-redo
    "wd" 'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wu" 'winner-undo
    "wR" 'winner-redo
    "wm" '(delete-other-windows :which-key "maximize")
    "wr" 'rotate-frame-clockwise
    "wh" 'split-window-below
    "wv" 'split-window-right
    "wt" 'transparency

    ;; Files
    "f" '(:ignore t :which-key "files")
    "fy" '(klk/yank-file-path :which-key "yank file path")
    "fY" '(klk/yank-file-name :which-key "yank file name")
    "fk" '(crux-delete-buffer-and-file :which-key "delete current file")
    "fr" '(crux-rename-buffer-and-file :which-key "rename current file")
    "fo" '(crux-open-with :which-key "open externally")
    "ff" '(find-file :which-key "find file")

    "," 'previous-buffer
    "." 'next-buffer

    ;; Yanking
    "y" '(:ignore t :which-key "yank")
    "yf" 'klk/yank-file-path
    "yr" 'klk/yank-roam-ref

    ;; Tabs
    "tn" 'tab-bar-new-tab :which-key "new tab"
    "tk" 'tab-bar-close-tab :which-key "kill tab"
    "tr" 'tab-bar-rename-tab :which-key "rename tab"

    ;; Themes
    "td" 'klk/switch-dark-theme :which-key "dark theme"
    "tl" 'klk/switch-light-theme :which-key "light theme"
    "to" 'klk/switch-modus-operandi :which-key "modus operandi theme"

    ;; Utilities
    "q" 'klk/save-buffer-and-exit

    "r"'(:ignore t :which-key "refile")
    "rr" '(org-refile :which-key "choose heading")
    "rf" '(klk/refile-in-same-file :which-key "same file")
    "rd" '((lambda () (interactive) (org-reverse-datetree--refile-to-file (buffer-file-name))) :which-key "datetree")

    "k" '(:keymap bookmark-map :which-key "bookmarks")
    "h" '(:keymap help-map :which-key "help")

    ;; Org
    "o"'(:ignore t :which-key "org")
    "ot" '(org-set-tags-command :which-key "add tag")

    ;; ;; notes
    ;; "ez" '(klk/export-zettel :which-key "export zettel")

    ;; Jump around
    ;; "gh" #'ap/avy-org-goto-to-heading-timer
    "gg" #'avy-goto-char-timer))
    ;; "gl" #'avy-goto-line
    ;; "gp" #'avy-pop-mark))

#+END_SRC

** Visual
*** Themes

#+BEGIN_SRC emacs-lisp
(use-package doom-themes :defer t)
(load-theme 'doom-palenight t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun klk-disable-all-themes ()
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme)))

(defun klk/switch-dark-theme ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'doom-palenight t))

(defun klk/switch-light-theme ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'leuven t))

(defun klk/switch-modus-operandi ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'modus-operandi t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun customize-leuven ()
      "Customize Leuven theme"
      (if (member 'leuven custom-enabled-themes)
          (custom-theme-set-faces
           'leuven
           '(font-lock-string-face ((t (:foreground "#F8F8F0" :background "#171717")))))))
(customize-leuven)
#+END_SRC

*** Prettify

**** Prettify symbols
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq-default prettify-symbols-alist '(
				 ("[#A]" . "⚑")
				 ("[#B]" . "⚐")
				 ("#+BEGIN_QUOTE" . "❝")
				 ("#+END_QUOTE" . "❞")
				 ("#+begin_quote" . "❝")
				 ("#+end_quote" . "❞")
				 ("#+BEGIN_SRC" . "❯")
				 ("#+END_SRC" . "❮")
				 ("#+begin_src" . "❯")
				 ("#+end_src" . "❮")
				 (":END:" . "―")
				 ("#+TITLE: " . "")
				 ("#+title: " . "")
				 ("#+RESULTS:" . "🠶")))
  :hook (org-mode . prettify-symbols-mode))
#+END_SRC

**** Emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode)
  :config
  (bind-key* (kbd "C-c .") #'emojify-insert-emoji)) ; override binding in any mode
#+END_SRC

**** Indents
#+BEGIN_SRC emacs-lisp
(setq org-list-indent-offset 4)
#+END_SRC

*** Olivetti mode
#+BEGIN_SRC emacs-lisp
(use-package olivetti
    :general
    (klk/leader-key-def
      "m o" '(olivetti-mode :wk "olivetti"))
    :init
    (setq olivetti-body-width 90) ;; 0.6
    (setq olivetti-recall-visual-line-mode-entry-state t)
    :hook (text-mode . (lambda () (olivetti-mode 1))))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-mode 1))
#+END_SRC

Needed to display icons in doom-modeline.
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons)
#+END_SRC
*** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode)
  :config (setq all-the-icons-dired-monochrome nil))
#+END_SRC

** Images
*** display
Make files start with inline images loaded, and add a hook to display them after executing a code block to display resulting graphs.
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

Set this to =nil= to allow customizing image preview size with something like:
=#ATTR_ORG: :width 200=
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

*** org-download
Note: need =xclip= installed for =org-download-clipboard=.

I have some modifications to make screenshot pasting work in markdown files as well.
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :config
  (defun klk/org-download-clipboard-md ()
    "like org-download-clipboard, but with markdown link format and no annotation"
    (interactive)
    (let ((org-download-link-format "![screenshot](%s)\n")
	  (org-download-annotate-function '(lambda (link) "")))
      (org-download-clipboard))
    (markdown-display-inline-images))
  (defun klk/org-download-set-dir ()
    (when buffer-file-name
      (let ((dir (if (string-prefix-p (file-truename org-roam-dir) (buffer-file-name))
		   org-roam-image-dir
		 (concat (file-name-directory (buffer-file-name)) "images/"))))
      (setq-local org-download-image-dir dir))))

  ; force the code to run in markdown mode as well as org mode
  (advice-add 'org-download-org-mode-p :override
              (lambda () (or (eq major-mode 'org-mode) (when (derived-mode-p 'org-mode) t) (eq major-mode 'markdown-mode))))
  :hook
  (org-mode . klk/org-download-set-dir)
  (markdown-mode . klk/org-download-set-dir)
  :general
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "d" '(:ignore t :which-key "org-download")
    "d s" '(org-download-screenshot :which-key "screenshot")
    "d c" '(org-download-clipboard :which-key "clipboard")
    "i r" '(org-download-rename-at-point :which-key "rename image"))
  (klk/leader-key-def
    :keymaps 'markdown-mode-map
    "d" '(:ignore t :which-key "org-download")
    "d c" '(klk/org-download-clipboard-md :which-key "clipboard"))
  :custom
  (org-download-heading-lvl nil)
  (org-download-screenshot-method "spectacle -br -o %s"))
#+END_SRC

** Scrolling

*NOTE*: Need to clone https://github.com/jdtsmith/ultra-scroll.

Ultra-scroll makes scrolling faster, and in particular lets you scroll over large images without jumping.

#+BEGIN_SRC emacs-lisp
(use-package ultra-scroll
  :straight nil
  :load-path "~/github/ultra-scroll"
  :init
  (setq scroll-conservatively 101 ; important!
        scroll-margin 0) 
  :config
  (ultra-scroll-mode 1))
#+END_SRC
** Git
*** Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit
  :straight (magit :type git :host github :repo "magit/magit")
  :general
  (klk/leader-key-def
    "gs" '(magit-status :which-key "magit status"))
  )
  #+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :init (global-git-gutter-mode +1))
#+END_SRC

** Math

*** LaTeX rendering with math-preview

Taken from [[https://daryl.wakatara.com/emacs-gtd-flow-evolved/#science-stuff][this nice config]].

[[https://gitlab.com/matsievskiysv/math-preview][math-preview]] uses MathJax to display LaTeX. It has an external dependency, but it makes rendering much faster.

#+BEGIN_SRC emacs-lisp
(use-package math-preview
  :general
  (klk/leader-key-def
    "m p" '(math-preview-all :which-key "latex preview"))
	:custom
    (math-preview-scale 1.25)
    (math-preview-command "~/.npm-packages/bin/math-preview")
    (math-preview-tex-marks-inline
			'(("$" "$")))
    (math-preview-tex-marks
	 '(("\\begin{equation}" "\\end{equation}")
		 ("\\begin{equation*}" "\\end{equation*}")
		 ("\\begin{align}" "\\end{align}")
		 ("\\begin{align*}" "\\end{align*}")
		 ("$$" "$$")
		 ))
    ;; Remove labels to avoid error when re-evaluating
    ;; This is supposed to be a list of functions, but it doesn't
    ;; seem to work if there's more than one. But the default value
    ;; doesn't seem important.
    (math-preview-tex-preprocess-functions '((lambda (x)
					       (puthash 'string
							(s-replace-regexp "\\label{.+}" ""
									  (gethash 'string x))
							x)))))
(add-hook 'markdown-mode-hook #'math-preview-all)
;; (add-hook 'org-mode-hook #'math-preview-all)
(defalias #'org-latex-preview #'math-preview-at-point)
(defalias #'org-clear-latex-preview #'math-preview-clear-region)
#+END_SRC

*** org-fragtog

Automatically disable LaTeX images when the cursor is on them, and re-enable after leaving.

#+BEGIN_SRC emacs-lisp
(use-package org-fragtog
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+END_SRC

** Completion
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :bind
  (:map yas-minor-mode-map
        ("M-e" . yas-expand)
        ([(tab)] . nil)
        ("TAB" . nil))
  :config
  (use-package yasnippet-snippets)
  (add-to-list 'yas-key-syntaxes 'yas-longest-key-from-whitespace)
  (setq yas-triggers-in-field t)
  (add-to-list #'yas-snippet-dirs (expand-file-name "my-snippets" user-emacs-directory))
  (yas-reload-all)
  :init
  (yas-global-mode t)
  :diminish yas-minor-mode)
#+END_SRC
*** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  ;; :straight (:files (:defaults "extensions/*"))
  :defer t
  :commands vertico-mode
  :bind (:map vertico-map
         ("M-j" . vertico-next)
         ("M-k" . vertico-previous)
         ("M-J" . vertico-next-group)
         ("M-K" . vertico-previous-group)
         ("RET" . vertico-directory-enter)
         ("DEL" . vertico-directory-delete-char)
         ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook
  (rfn-eshadow-update-overlay . vertico-directory-tidy)
  (after-init . vertico-mode)
  :custom
  (vertico-cycle t))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Marginalia
Provides nice annotations for minibuffer completion options (like command descriptions and keyboard shortcuts).
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :defer t
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :commands (marginalia-mode marginalia-cycle)
  :hook (after-init . marginalia-mode))
#+END_SRC

*** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :general
  (klk/leader-key-def
    "s" '(:ignore t :which-key "search")
    "s s" 'consult-line
    "s o" '(consult-outline :which-key "outline")
    "s h" '(consult-org-heading :which-key "org heading")
    "s p" '(consult-ripgrep :which-key "ripgrep project"))
  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; (autoload 'projectile-project-root "projectile"))
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))
#+END_SRC

Quickly select another directory in minibuffer.
#+BEGIN_SRC emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+END_SRC

*** Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :defer t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim))        ;; good alternative: M-.

  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))


(use-package embark-consult
  :after (embark consult)
  ;; :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

*** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :defer t
  :commands (corfu-mode global-corfu-mode)
  :hook ((prog-mode . corfu-mode)
	 (shell-mode . corfu-mode)
	 (eshell-mode . corfu-mode))
  :custom
  (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect 'prompt) ;; Always preselect the prompt
  ;; Enable corfu in minibuffer if no completion UI is active
  (global-corfu-minibuffer
      (lambda ()
        (not (or (bound-and-true-p mct--active)
                 (bound-and-true-p vertico--input)
                 (eq (current-local-map) read-passwd-map)))))

  :bind
  (:map corfu-map
	("SPC" . corfu-insert-separator)
	("TAB" . corfu-next)
	("C-j" . corfu-next)
	("C-k" . corfu-previous)
	([tab] . corfu-next)
	("S-TAB" . corfu-previous)
	([backtab] . corfu-previous))
  :config
  (evil-make-overriding-map corfu-map)
  (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
  (advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
  :config
  (global-corfu-mode))

(use-package emacs
  :custom
  ;; TAB cycle if there are only few candidates
  (completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (tab-always-indent 'complete)

  ;; Emacs 30 and newer: Disable Ispell completion function.
  ;; Try `cape-dict' as an alternative.
  ;; (text-mode-ispell-word-completion nil)

  ;; Hide commands in M-x which do not apply to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC
*** Cape
#+BEGIN_SRC emacs-lisp
(use-package cape
  :ensure t
  :defer t
  :commands (cape-dabbrev cape-file cape-elisp-block)
  :bind ("C-c p" . cape-prefix-map)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :defer t
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-max-scrollback 10000)
  ;; Speed up vterm
  (setq vterm-timer-delay 0.01))

(use-package multi-vterm)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :general
  (klk/leader-key-def
    "t" '(:ignore t :which-key "treemacs")
    ;; "t d" '(treemacs-select-directory :which-key "select directory")
    "t p" '(treemacs-projectile :which-key "add project"))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("<f4>"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))
#+END_SRC
** casual
#+BEGIN_SRC emacs-lisp
(use-package casual)
#+END_SRC
** dired
*** show title from YAML for markdown files
I'm trying out using timestamps as file names so that I can interact with my markdown files smoothly from either Obsidian or from Emacs using md-roam. The latter requires the title to be in the frontmatter, while Obsidian requires it to be the file name. I don't want to have to worry about keeping those in sync, so instead I will just have the title in the frontmatter. Using the Obsidian front matter title plugin, Obsidian will show the frontmatter title everywhere. But in dired we'll need to add true title.

Since I'm naming files by denote-style IDs and separating the true title from the file name with =--=, this looks nice with denote's dired font-locking.
#+BEGIN_SRC emacs-lisp
(defun klk/extract-yaml-title (file)
  "Extract title from YAML front matter in FILE."
  (when (and (file-regular-p file)
             (string-match-p "[0-9]\\{8\\}T[0-9]\\{6\\}\\.md\\'" file))
    (with-temp-buffer
      (insert-file-contents file nil 0 1000) ; Read first 1000 chars
      (goto-char (point-min))
      (when (looking-at "^---\\s-*$")
        (forward-line 1)
        (let ((yaml-end (save-excursion
                         (when (re-search-forward "^---\\s-*$" nil t)
                           (line-beginning-position)))))
          (when yaml-end
            (when (re-search-forward "^title:\\s-*\\(.+\\)\\s-*$" yaml-end t)
              (string-trim (match-string 1) "[\"\']" "[\"\']"))))))))

(defun klk/dired-show-yaml-titles ()
  "Add YAML titles to current dired buffer."
  (interactive)
  (when (derived-mode-p 'dired-mode)
    (let ((inhibit-read-only t)
          (modified-lines 0))
      (save-excursion
        (goto-char (point-min))
        ;; Skip header lines
        (dired-goto-next-file)
        (while (not (eobp))
          (let* ((filename (dired-get-filename 'no-dir t))
                 (full-path (dired-get-filename nil t)))
            (when (and filename full-path)
              (let ((title (klk/extract-yaml-title full-path)))
                (when (and title (not (string-empty-p title)))
                  (dired-move-to-end-of-filename)
                  ;; Check if we already have a title (to avoid duplicates)
                  ;; (unless (looking-at " | ")
                    (insert (format " -- %s" title))
                    (setq modified-lines (1+ modified-lines))))))
          (forward-line 1)))
      )))
(add-hook 'dired-after-readin-hook #'klk/dired-show-yaml-titles)
#+END_SRC
* Projects
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :general
  (klk/leader-key-def
    "p" '(:keymap projectile-command-map :which-key "project")
    "pe" '(projectile-run-eshell :which-key "project eshell")
    "pn" '(klk/open-org-project-notes-file :which-key "project notes")
    "py" '(klk/yank-project-root :which-key "yank root"))
    :config
  (setq projectile-project-search-path '(("~/Dropbox/org/" . 3) ("~/" . 2) ("~/Dropbox/projects/" . 3)))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :general
  (klk/leader-key-def
    "pb" '(consult-projectile-switch-to-buffer :which-key "project buffer")
    "pf" '(consult-projectile-find-file :which-key "project file")))
#+END_SRC
* Notes
** org-journal

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :general
  (klk/leader-key-def
    "j" '(:ignore t :wk "journal")
    "j j" '(org-journal-new-entry :wk "new entry")
    "j o" '(org-journal-open-current-journal-file :wk "open file")
    "j d" '(org-journal-new-date-entry :wk "new entry at date")
    "j s" '(org-journal-search :wk "search")
    "j S" '(org-journal-search-forever :wk "search all"))
  (klk/leader-key-def
    :keymaps 'org-journal-mode-map
    "," 'org-journal-previous-entry
    "." 'org-journal-next-entry)
  :config
  (defun my-org-download-set-dir ()
    (setq-local org-download-image-dir
		(concat (file-name-directory (buffer-file-name)) "/images/" (file-name-base buffer-file-name) "/") ))
  :custom
  ;; Don't carry over
  (org-journal-file-type 'yearly)
  (org-journal-carryover-items "")
  (org-journal-dir "~/Dropbox/org/journal/")
  (org-journal-file-format "%Y.org")
  (org-journal-date-format "%A, %Y-%m-%d"))
#+END_SRC

** org-roam
*** org-roam utilities
Insert a point a list of links to all backlinks to the current node if they are not already linked to.
#+BEGIN_SRC emacs-lisp
(defun klk/insert-missing-backlinks ()
  (interactive)
  (let ((backlinks
	 (flatten-tree
	  (org-roam-db-query [:select source :from links :where (= dest $s1)]
			    (org-roam-id-at-point))))
	(links
	 (flatten-tree
	  (org-roam-db-query [:select dest :from links :where (= source $s1)]
			    (org-roam-id-at-point)))))
    (seq-doseq (id backlinks)
      (let* ((backlink-node (org-roam-node-from-id id))
	     (title (org-roam-node-title backlink-node))
	     (link (if (md-roam--markdown-file-p (buffer-file-name (buffer-base-buffer)))
		       (md-roam--wiki-link-create id title title)
		     (org-link-make-string (concat "id:" id) title))))
	(if (not (member id links))
	    (insert (concat "- " link "\n")))))))
#+END_SRC

Turning headings into nodes: add an id as well as a CREATED property with the current timestamp.
#+BEGIN_SRC emacs-lisp
(defun klk/org-roam-node-from-heading ()
  (interactive)
  (save-excursion
    (org-back-to-heading)
    (org-id-get-create)
    (org-set-property "CREATED" (format-time-string "[%Y-%m-%d %T]"))))
#+END_SRC

*** setup
#+BEGIN_SRC emacs-lisp
(defvar org-roam-dir "~/Dropbox/org/roam")
(defvar org-roam-image-dir "~/Dropbox/org/roam/images/")
(defvar org-roam-attachments-dir "~/Dropbox/org/roam/attachments/")
(defun org-roam-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-roam-dir) filename))

(use-package org-roam
  :straight (org-roam :type git :flavor melpa :host github :repo "org-roam/org-roam")
  :after markdown-mode ; to work with md-roam
  :custom
  (org-roam-directory org-roam-dir)
  (org-roam-file-extensions '("org" "md"))
  :config
  (add-to-list  'load-path "~/github/md-roam")
  (require 'md-roam)
  (md-roam-mode 1)
  (setq md-roam-node-insert-type 'id) ; insert id links
  (setq org-roam-file-exclude-regexp
	(concat "^" (expand-file-name org-roam-directory) "/.obsidian/"))
  (add-hook 'org-roam-mode-hook #'visual-line-mode)
  (define-key org-roam-mode-map [mouse-1] #'org-roam-preview-visit)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
		 (display-buffer-in-direction)
		 (direction . right)
		 (window-width . 0.33)
		 (window-height . fit-window-to-buffer))))
#+END_SRC

*** org-roam capture templates
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head
		    "%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
        ("p" "project" plain
           "%?"
           :if-new (file+head
		    "projects/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n* Purpose\n")
           :unnarrowed t)
        ("P" "person" plain
           "%?"
           :if-new (file+head
		    "administrative/people/${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
        ("M" "meeting" plain
           "* <%<%Y-%m-%d>> ${title} :meeting:\n\n** Participants\n%?\n** Agenda\n\n** Notes\n\n** Action Items\n"
           :if-new (file+head
		    "administrative/meetings/lab-meetings.org"
		    "#+title: Lab meetings")
           :unnarrowed t)
        ("s" "source" plain
           "%?"
           :if-new (file+head
		    "zettel/source/@${citar-citekey}.md"
		    "---
title: ${title}
date: %U
author: ${citar-author}
id: %<%Y-%m-%dT%H%M%S>
year: ${citar-date}
roam_refs: ${citar-citekey}
---

- **source**:: [@${citar-citekey}]
- **topics**::

,**summary**::

")
           :unnarrowed t)
        ("m" "main" plain
           "%?"
           :if-new (file+head
		    "zettelkasten/main/%<%Y%m%dT%H%M%S>.md"
		    "---
title: ${title}
date: %U
id: %<%Y-%m-%dT%H%M%S>
---

")
           :unnarrowed t)
	  ("t" "technical" plain
           "%?"
           :if-new (file+head
		    "resources/technical/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("o" "org-file" plain
           "%?"
           :if-new (file+head
		    "${slug}.org"
		    "#+title: ${title}\n#+date: %U\n#+SETUPFILE: ~/Dropbox/org/roam/resources/latexsetupfile.org\n\n* References :ignore:\n#+PRINT_BIBLIOGRAPHY:")
           :unnarrowed t)
	  ("h" "howto" plain
	   "%?"
           :if-new (file+head
		    "resources/howto/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("r" "bibliography reference" plain
           "%?"
           :target
           (file+head
            "resources/references/@${citar-citekey}.org"
            "#+title: ${note-title} (${citar-citekey})
,#+author: ${citar-author}
,#+year: ${citar-date}
,#+created: %U

[cite:@${citar-citekey}]
,* Summary

,* Notes\n")
           :unnarrowed t)))

  (setq org-roam-dailies-directory "dailies/")
  (setq org-roam-dailies-capture-templates
	(quote (("d" "daily" plain
		 "%?"
		 :if-new (file+head
                          "%<%Y-%m-%d>.org"
                          "#+title: %<%Y-%m-%d (%A)>\n")
		 :unnarrowed t)))))
  #+END_SRC

*** slugs
Change org-roam's slugs to use dashes instead of underscores in filename, like in Denote. Copied from [[https://www.reddit.com/r/emacs/comments/omxl6n/config_for_orgroam_v2/][this post]].
  #+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (cl-defmethod org-roam-node-slug ((node org-roam-node))
    "Return the slug of NODE."
    (let ((title (org-roam-node-title node))
          (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                             768    ; U+0300 COMBINING GRAVE ACCENT
                             769    ; U+0301 COMBINING ACUTE ACCENT
                             770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                             771 ; U+0303 COMBINING TILDE
                             772 ; U+0304 COMBINING MACRON
                             774 ; U+0306 COMBINING BREVE
                             775 ; U+0307 COMBINING DOT ABOVE
                             776 ; U+0308 COMBINING DIAERESIS
                             777 ; U+0309 COMBINING HOOK ABOVE
                             778 ; U+030A COMBINING RING ABOVE
                             780 ; U+030C COMBINING CARON
                             795 ; U+031B COMBINING HORN
                             803 ; U+0323 COMBINING DOT BELOW
                             804 ; U+0324 COMBINING DIAERESIS BELOW
                             805 ; U+0325 COMBINING RING BELOW
                             807 ; U+0327 COMBINING CEDILLA
                             813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                             814 ; U+032E COMBINING BREVE BELOW
                             816 ; U+0330 COMBINING TILDE BELOW
                             817 ; U+0331 COMBINING MACRON BELOW
                             )))
      (cl-flet* ((nonspacing-mark-p (char)
                                    (memq char slug-trim-chars))
		 (strip-nonspacing-marks (s)
					 (string-glyph-compose
                                          (apply #'string (seq-remove #'nonspacing-mark-p
                                                                      (string-glyph-decompose s)))))
		 (cl-replace (title pair)
                             (replace-regexp-in-string (car pair) (cdr pair) title)))
	(let* ((pairs `(("[^[:alnum:][:digit:]]" . "-") ;; convert anything not alphanumeric
			;; ("__*" . "_") ;; remove sequential underscores
			;; ("^_" . "")   ;; remove starting underscore
			;; ("_$" . "")   ;; remove ending underscore
			))
               (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
          (downcase slug))))))
#+END_SRC

*** filter by type
Allow filtering by type (from subdirectory). From https://jethrokuan.github.io/org-roam-guide/. Use subdirectories to define properties of nodes.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
	(file-name-nondirectory
	 (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  ;; Display the type as a column.
  (setq org-roam-node-display-template
	(concat "${type:15} ${todo:8} ${title:150} " (propertize "${tags:20}" 'face 'org-tag)))

  (defun klk/org-roam-node-in-archive (node)
    (cl-search "zzArchive" (file-name-directory (org-roam-node-file node))))

  (defun klk/org-roam-find-default ()
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (and (not (string-match-p "^[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} (\\(Monday\\|Tuesday\\|Wednesday\\|Thursday\\|Friday\\|Saturday\\|Sunday\\))$" (org-roam-node-title node)))
            (not (klk/org-roam-node-in-archive node))))))

  (defun klk/org-roam-insert-default ()
    (interactive)
    (org-roam-node-insert
     (lambda (node)
       (and (not (string-match-p "^[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} (\\(Monday\\|Tuesday\\|Wednesday\\|Thursday\\|Friday\\|Saturday\\|Sunday\\))$" (org-roam-node-title node)))
            (not (klk/org-roam-node-in-archive node))))))

  (defun klk/org-roam-find-by-type (type-name &optional exclude-archive)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (and (string-equal type-name (org-roam-node-type node))
            (if exclude-archive (not (klk/org-roam-node-in-archive node)) t)))))
  
  (defun klk/org-roam-find-excluding-types (type-names &optional exclude-archive)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (and (not (member (org-roam-node-type node) type-names ))
            (if exclude-archive (not (klk/org-roam-node-in-archive node)) t)))))

  (defun klk/org-roam-insert-by-type (type-name &optional exclude-archive)
    (interactive)
    (org-roam-node-insert
     (lambda (node)
       (and (string-equal type-name (org-roam-node-type node))
            (if exclude-archive (not (klk/org-roam-node-in-archive node)) t)))))

  (defun klk/org-roam-insert-excluding-types (type-names &optional exclude-archive)
    (interactive)
    (org-roam-node-insert
     (lambda (node)
       (and (not (member (org-roam-node-type node) type-names ))
            (if exclude-archive (not (klk/org-roam-node-in-archive node)) t))))))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :general
  (klk/leader-key-def
    "n" '(:ignore t :which-key "org-roam")
    "n N" '(klk/org-roam-node-from-heading :wk "create node from heading")
    "n c" '(my/org-roam-capture-task :wk "capture task")
    "n l" '(org-roam-buffer-toggle :wk "backlinks")
    "n p p" '(my/org-roam-find-project :wk "personal project")
    "n p r" '(my/org-roam-find-research-project :wk "research project")
    "n j" '(org-roam-dailies-goto-today :wk "today")
    "n y" '(org-roam-dailies-goto-yesterday :wk "yesterday")
    "n d" '(org-roam-dailies-goto-date :wk "open date")
    "n ," '(org-roam-dailies-goto-previous-note :wk "previous day")
    "n ." '(org-roam-dailies-goto-next-note :wk "next day")
    "n i" '(org-roam-node-insert :wk "insert")
    "n a" '(:ignore t :which-key "all")
    "n a f" '(org-roam-node-find :wk "find all")
    "n a i" '(org-roam-node-insert :wk "insert all")
    "n f" '((lambda () (interactive) (klk/org-roam-find-default)) :wk "find all but dailies and archive")
    "n i" '((lambda () (interactive) (klk/org-roam-insert-default)) :wk "insert all but dailies and archive")
    "n r" '(:ignore t :which-key "references")
    "n r f" '((lambda () (interactive) (klk/org-roam-find-by-type "references" t)) :wk "find")
    "n r i" '((lambda () (interactive) (klk/org-roam-insert-by-type "references" t)) :wk "insert")
    "n z" '(:ignore t :which-key "zettel")
    "n z f" '((lambda () (interactive) (klk/org-roam-find-by-type "zettel" t)) :wk "find")
    "n z i" '((lambda () (interactive) (klk/org-roam-insert-by-type "zettel" t)) :wk "insert")
    "n h" '(:ignore t :which-key "howto")
    "n h f" '((lambda () (interactive) (klk/org-roam-find-by-type "howto" t)) :wk "find")
    "n h i" '((lambda () (interactive) (klk/org-roam-insert-by-type "howto" t)) :wk "insert")))
#+END_SRC

*** images

I insert a lot of screenshots into org-roam notes, but I don't want to have to worry about where the links point, in case I decide to move a file to another directory. To solve this, I define a single directory for org-roam images, and set =org-link-abbrev-alist= so I can use links of the form =[[org-roam-images:myimage.png]]=.

#+BEGIN_SRC emacs-lisp
(setq org-link-abbrev-alist
      `(("org-roam-images"  . ,org-roam-image-dir)
	("org-roam-attachments"  . ,org-roam-attachments-dir)))
#+END_SRC

Here I define a function that converts all png links in a file to use the =org-roam-images:= syntax (if in the org-roam directory), and add advice to call this after inserting a screenshot.

#+BEGIN_SRC emacs-lisp
(defun klk/convert-org-roam-image-links (&optional arg)
  "Replace links to png files to be relative to the org-roam-images directory"
  (interactive)
  (when (string-prefix-p (file-truename org-roam-directory) (expand-file-name (buffer-file-name)))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\\[\\[file:[^\]]*/\\(.*\.png\\)" nil t)
	(replace-match "[[org-roam-images:\\1"))
      (org-redisplay-inline-images))))

(advice-add 'org-download-screenshot :after 'klk/convert-org-roam-image-links)
(advice-add 'org-download-clipboard :after 'klk/convert-org-roam-image-links)
#+END_SRC

**** inserting images
Functions to help with inserting images in org and markdown. Prompts for a file from the roam images directory, then inserts an org-roam-images link or a markdown image construct with the relative path to that files.

#+BEGIN_SRC emacs-lisp
(defun klk/insert-org-roam-image-md ()
  "Insert a relative markdown link to chosen file"
  (interactive)
  (let ((relative-path (file-relative-name
   (read-file-name "Choose image " org-roam-image-dir)
   (file-name-directory buffer-file-name))))
    (insert (concat "![image](" relative-path ")")))
  (markdown-display-inline-images))

(defun klk/insert-org-roam-image ()
  "Insert an org-roam-images link to chosen file"
  (interactive)
  (let ((image-name (file-name-nondirectory (read-file-name "Choose image " org-roam-image-dir))))
    (insert (concat "[[org-roam-images:" image-name "]]")))
  (org-display-inline-images))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "ii" 'klk/insert-org-roam-image :wk "insert image"))
#+END_SRC

** denote
#+BEGIN_SRC emacs-lisp
(use-package denote
  :custom
  (denote-directory org-roam-dir)
  (xref-search-program 'ripgrep)
  (denote-known-keywords '(""))
  (denote-backlinks-show-context t)
  (denote-prompts '(file-type title signature keywords))
  (denote-date-prompt-use-org-read-date t)
  :general
  (klk/leader-key-def
    "dn" '(denote :wk "denote new file")
    "ds" '(denote-sort-dired :wk "denote sort dired")
    "db" '(denote-link-backlinks :wk "denote backlinks")
    "dk" '(denote-rename-file-keywords :wk "denote change keywords")
    "dt" '(denote-rename-file-title :wk "denote change title")
    "df" '(consult-notes :wk "find note")
    "do" '(denote-open-or-create :wk "open note")
    "di" '(denote-link-or-create :wk "denote insert link"))
  :config
  (add-hook 'dired-mode-hook #'denote-dired-mode)
  (add-hook 'dired-before-readin-hook #'denote-dired-mode))
#+END_SRC

** howm
#+BEGIN_SRC emacs-lisp
(use-package howm
  :ensure true
  :init
  ;; Use with org mode 
  (require 'howm-org)
  (setq howm-keyword-body-regexp "[^>=\n]+")
  (setq howm-ref-body-regexp "[^=\n]+")   

  ;; Preferences
  (setq howm-directory "~/Dropbox/org/roam/howm") ;; Where to store the files?
  (setq howm-follow-theme t) ;; Use your Emacs theme colors. (*3)
  ;; 
  ;; Performance
  (setq howm-menu-expiry-hours 1) ;; Cache menu N hours. (*4)
  (setq howm-menu-refresh-after-save nil) ;; Speed up note saving. (*5)
  (defun klk-howm-menu ()
    (interactive)
    (if (and (string= (buffer-name) (howm-menu-name howm-menu-top))
             (eq last-command 'my-howm-menu))
        (turn-on-evil-mode)
        (progn
          (howm-menu)
          (turn-off-evil-mode))))

  (defun klk-find-howm ()
    (interactive)
    (let* ((note-list (cdr (cdr (howm-normalize (howm-all-items)))))
           (file-names (mapcar (lambda (x) (car x)) note-list))
           (titles (mapcar (lambda (x) (car (cdr x))) note-list))
           (search-list (seq-mapn #'(lambda (a b) (cons a b)) titles file-names)))
           (cdr (assoc (completing-read "Note: " titles) search-list))))

  (defun klk-insert-howm-link ()
    (interactive)
    (let* ((file-name (klk-find-howm))
           (adjusted-file-name (replace-regexp-in-string "^/[^/]+/[^/]+" "~" file-name)))
      (insert (concat ">>> " adjusted-file-name "="))))
  (defun klk-open-howm-file ()
    (interactive)
    (let ((file-name (klk-find-howm)))
      (find-file file-name)))
  (howm-mode)
  :custom
  ;; Use ripgrep as grep
  (howm-view-use-grep t)
  (howm-view-grep-command "rg")
  (howm-view-grep-option "-nH --no-heading --color never")
  (howm-view-grep-extended-option nil)
  (howm-view-grep-fixed-option "-F")
  (howm-view-grep-expr-option nil)
  (howm-view-grep-file-stdin-option nil)
  ;; case insensitive keywords
  (howm-keyword-case-fold-search t)
  :general
  (klk/leader-key-def
    "v," '(howm-menu :which-key "howm menu")
    "v." '(howm-find-today :which-key "today")
    "v:" '(howm-find-yesterday :which-key "yesterday")
    "vA" '(howm-list-around :which-key "around")
    "vc" '(howm-create :which-key "create")
    "vb" '(howm-list-buffers :which-key "buffers")
    "vd" '(howm-insert-date :which-key "insert date")
    "vD" '(howm-insert-dtime :which-key "insert datetime")
    "vg" '(howm-list-grep :which-key "grep")
    "va" '(howm-list-all :which-key "all")
    "vl" '(howm-list-recent :which-key "recent")
    "vh" '(howm-history :which-key "history")
    "vo" '(howm-occur :which-key "occur")
    "vs" '(howm-list-grep-fixed :which-key "search")
    "vw" '(howm-random-walk :which-key "random walk")
    "vi" '(klk-insert-howm-link :which-key "insert link")
    "vf" '(klk-open-howm-file :which-key "find file")
    )
  (klk/leader-key-def
  :keymaps 'howm-view-summary-mode-map
    "vS" '(howm-view-sort :which-key "sort")
    )
  :config
  (setq howm-list-buffers-exclude (append howm-list-buffers-exclude org-agenda-files '("*Warnings*" "*howmM:%menu%*" "*scratch*" "*straight-process*" "*Async-native-compile-log*")))
  ; Make it sort recent list with most recent at top
  (advice-add 'howm-list-recent :after 'howm-view-sort-by-date)
  (advice-add 'howm-list-recent :after 'howm-view-sort-by-reverse)
  :hook
  (howm-mode-on-hook turn-off-evil-mode)
  ;; Rename buffers to their title
  (howm-mode-hook howm-mode-set-buffer-name)
  (after-save-hook howm-mode-set-buffer-name)
  )
#+END_SRC

** anki
#+BEGIN_SRC emacs-lisp
(use-package anki-editor
  :defer t
  :straight (:repo "anki-editor/anki-editor"))
#+END_SRC

* Markdown

Code to show markup on current line from [[https://www.reddit.com/r/emacs/comments/10h9jf0/beautify_markdown_on_emacs/][here]].

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :general
  (:keymaps 'markdown-mode-map
	    "<M-return>" 'markdown-insert-header-dwim
	    "<C-return>" 'markdown-insert-list-item
	    "<M-left>" 'markdown-promote-list-item
	    "<M-right>" 'markdown-demote-list-item
	    "<M-up>" 'markdown-move-list-item-up
	    "<M-down>" 'markdown-move-list-item-down
	    "M-n" 'markdown-outline-next
	    "M-p" 'markdown-outline-previous
	    "M-h" 'markdown-outline-up
	    "M-l" 'markdown-outline-next-same-level
	    "M-j" 'markdown-outline-next-same-level
	    "M-k" 'markdown-outline-previous-same-level
	    "M-K" 'markdown-move-subtree-up
	    "M-J" 'markdown-move-subtree-down
	    "M-K" 'markdown-move-list-item-up
	    "M-J" 'markdown-move-list-item-down
	    "M-H" 'markdown-promote
	    "M-L" 'markdown-demote
	    "C-j" 'markdown-next-link
	    "C-k" 'markdown-previous-link
	    )
  (klk/leader-key-def
    :keymaps 'markdown-mode-map
    "ns" 'markdown-narrow-to-subtree :wk "narrow"
    "nw" 'widen :wk "widen"
    "ii" 'klk/insert-org-roam-image-md :wk "insert image"
    "tm" 'markdown-toggle-markup-hiding :wk "toggle markdown hiding"
    "it" 'markdown-toggle-inline-images :wk "toggle images")
  :custom
  (markdown-enable-wiki-links t)
  ;; (markdown-hide-markup t)
  (markdown-max-image-size '(800 . 800))
  :config
  (defvar nb/current-line '(0 . 0)
    "(start . end) of current line in current buffer")
  (make-variable-buffer-local 'nb/current-line)

  (defun nb/unhide-current-line (limit)
    "Font-lock function"
    (let ((start (max (point) (car nb/current-line)))
          (end (min limit (cdr nb/current-line))))
      (when (< start end)
        (remove-text-properties start end
                                '(invisible t display "" composition ""))
        (goto-char limit)
        t)))

  (defun nb/refontify-on-linemove ()
    "Post-command-hook"
    (let* ((start (line-beginning-position))
           (end (line-beginning-position 2))
           (needs-update (not (equal start (car nb/current-line)))))
      (setq nb/current-line (cons start end))
      (when needs-update
        (font-lock-fontify-block 3))))

  (defun nb/markdown-unhighlight ()
    "Enable markdown concealling"
    (interactive)
    (markdown-toggle-markup-hiding 'toggle)
    (font-lock-add-keywords nil '((nb/unhide-current-line)) t)
    (add-hook 'post-command-hook #'nb/refontify-on-linemove nil t))
  ;; :custom-face
  ;; (markdown-header-delimiter-face ((t (:foreground "#616161" :height 0.9))))
  ;; (markdown-header-face-1 ((t (:inherit org-level-1))))
  ;; (markdown-header-face-2 ((t (:inherit org-level-2))))
  ;; (markdown-header-face-3 ((t (:inherit org-level-3))))
  ;; (markdown-header-face-4 ((t (:inherit org-level-4))))
  ;; (markdown-header-face-5 ((t (:inherit org-level-5))))
  ;; (markdown-header-face-6 ((t (:inherit org-level-6))))
  ;; (add-hook 'markdown-mode-hook 'markdown-toggle-inline-images)
  ;; (add-hook 'markdown-mode-hook 'nb/markdown-unhighlight)
  :hook
  ;; (markdown-mode . variable-pitch-mode)
  (markdown-mode . markdown-toggle-inline-images)
  (markdown-mode . nb/markdown-unhighlight)
  :init
  (advice-add #'markdown-indent-line :before-until #'completion-at-point))
#+END_SRC

Custom font-locking for titles in markdown mode to make them look like headers (with more subtle font for folgezettel ids).

(See also [[https://stackoverflow.com/questions/6258455/emacs-font-lock-mode-provide-a-custom-color-instead-of-a-face
][here]])
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :config
  (font-lock-add-keywords 'markdown-mode
			  '(("^title: \\([1-9][^ ]*\\)?\\(.*\\)"
			     (1 'font-lock-keyword-face t t)
			     (2 'markdown-header-face-1 t)))))
#+END_SRC
* Org mode
** Basics
Save all org buffers periodically to reduce conflicts between desktop and orgzly on mobile.
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 60 t 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

Set the org directory and method for getting the full path to an org file from its name.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Set files to be included in the agenda. Includes archive because I like to see old completed tasks in the agenda, and also =daily.org= because I want to show my one-line daily summaries in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (append org-agenda-files
			       `(,(org-file-path "inbox.org")
                 ,(org-roam-path "administrative/meetings/lab-meetings.org")
                 ,(org-roam-path "research-log.org")
				 ,(org-file-path "mobile inbox.org")
				 ,(org-file-path "gcal.org")
				 ,(org-file-path "gtd.org")
				 ,(org-file-path "recurring.org")
				 ,(org-file-path "archive.org")
				 ,(org-file-path "school.org")
				 ,(org-file-path "p-financial.org")
				 ,(org-file-path "p-health.org")
				 ,(org-file-path "p-garden.org"))))
#+END_SRC

** Visual
Hide emphasis markers
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
(setq org-hide-emphasis-markers t)
#+END_SRC

But show them when the cursor is on the word.
#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :config (add-hook 'org-mode-hook 'org-appear-mode))
#+END_SRC

Load images inline.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
(defun klk/goto-last-heading ()
  "Interactively jump to end of current subtree"
  (interactive)
  (org-end-of-subtree))

(use-package org
  :general
  (:keymaps 'org-mode-map
	    "M-n" 'org-next-visible-heading
	    "M-p" 'org-previous-visible-heading
	    "M-h" 'outline-up-heading
	    "M-l" 'org-next-visible-heading
	    "M-j" 'org-forward-heading-same-level
	    "M-k" 'org-backward-heading-same-level
	    "M-K" 'org-move-subtree-up
	    "M-J" 'org-move-subtree-down
	    "M-H" 'org-promote-subtree
	    "M-L" 'org-demote-subtree
	    "C-j" 'org-next-link
	    "C-k" 'org-previous-link
	    )
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "ns" 'org-narrow-to-subtree :wk "narrow"
    "nw" 'widen :wk "widen"
    "it" 'org-toggle-inline-images :wk "toggle images"
    "gl" '(klk/goto-last-heading :wk "last heading")))
#+END_SRC

** Refiling
Set targets for refiling. Use =C-c C-w= to refile. This determines what options you're prompted with. Includes everything in all the agenda files, plus the someday file and various list files.

#+BEGIN_SRC emacs-lisp
(defun klk/refile-in-same-file ()
  "Refile under a heading in the current file."
  (interactive)
  (let ((org-refile-targets '((nil :maxlevel . 9))))
    (org-refile)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9) ;; refile in current file
			   (org-agenda-files :maxlevel . 3)
                           ("someday.org" :level . 1)
			   ("l-media.org" :maxlevel . 2)
			   ("l-ideas.org" :maxlevel . 2)))
#+END_SRC

Include the file name in the outline path to allow refiling as a top-level heading.
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Create ids for links so they will work even if you move them across files.
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-clone-delete-id t)
#+END_SRC
** Tasks
*** Basics
Stop parent tasks from being marked as complete if they have incomplete children.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Set the =TODO= states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence
			   "TODO(t!)"
			   "NEXT(n)"
			   "COLLECTING(C)"
			   "WAITING(w@)"
			   "PROJECT(p)"
			   "INP(i!)"
			   "|"
			   "DONE(d)"
			   "CANCELLED(c@)"
			   "NOTE(e)"
			   )
               (sequence "QUESTION(q)" "|" "ASKED(d)")
			   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-unavailable-files t)
#+END_SRC

Enable inline tasks.
#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

*** Archiving
   Archive to =archive.org= under a tree heading with the name of the origin file.
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
*** Logging
 Log state changes in a drawer, not in the task content.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-state-notes-into-drawer t)
 #+END_SRC

 This will log a CLOSED timestamp when an item is marked as done. This is consistent with what orgzly does, and seems to show up in the agenda much like state change logs, except it makes archived items show up as well.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 #+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (klk/leader-key-def
    "a" '(org-agenda :wk "agenda")
    "c c" '(org-capture :wk "capture"))
  :custom
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-include-deadlines t)
  (org-agenda-start-with-log-mode t)
  (org-deadline-warning-days 7)
  )
#+END_SRC

*** super agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :config
  (org-super-agenda-mode t))
#+END_SRC
Define the agenda views:
#+BEGIN_SRC emacs-lisp
  (defun timestamp-in-n-days (n)
    "Get the timestamp of n days in the future."
    (format-time-string "%Y-%m-%d" (time-add (* 3600 24 n) (current-time))))

  (setq org-agenda-custom-commands
        (list
  	'("x" "Daily Agenda"
  	 ((agenda "" (
  		      (org-agenda-span 'day)
  		      (org-agenda-overriding-header "Today")
  		      (org-agenda-log-mode-items '(closed clock state))
  		      (org-agenda-prefix-format "  %?-12t% s")
  		      (org-super-agenda-groups
  		       '((:name "Calendar" :time-grid t)
  			 (:name "Important" :priority "A")
  			 (:name "Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
  			 (:name "Scheduled Today" :scheduled today)
  			 (:auto-property "Project")
  			 (:auto-category)
  			 (:name "Due" :and (:deadline today :not (:habit t)))
  			 ))
  		      ))
  	  (alltodo "" ((org-agenda-overriding-header "Upcoming Schedule")
                         (org-super-agenda-groups
                          `((:name "Tomorrow" :scheduled (on ,(timestamp-in-n-days 1)))
  			  (:name "In Two Days" :scheduled (on ,(timestamp-in-n-days 2)))
  			  (:discard (:anything t))
  			  ))))
           (tags-todo "project"
                       ((org-agenda-overriding-header "Project Tasks")
                        (org-super-agenda-groups '((:auto-category)))))
 	  ))
         (quote("l" "Lab" todo ""
  	      ((org-agenda-overriding-header "Lab Tasks")
  	       (org-super-agenda-groups '((:discard (:not (:tag "lab")))
                                      (:name "questions" :todo "QUESTION")
                                      (:auto-category) ))
  	       )))
         (quote
  	("U" "Unscheduled"
  	 ((todo ""
  		((org-agenda-overriding-header "Unscheduled Tasks")
  		 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("PROJECT"))))))
  	 ((org-agenda-todo-ignore-scheduled 'future)
  	  (org-agenda-sorting-strategy '(deadline-up)))))
         (quote("N" "Next tasks" todo "NEXT"
  	      ((org-agenda-overriding-header "Next Tasks")
  	       (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
  	       ))
  	     )
        ))
#+END_SRC

** Export
*** pandoc

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc)
#+END_SRC

*** hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo)
#+END_SRC

*** labels
Allow using user-defined labels when exporting (necessary, e.g., for org-ref to reference figures by their =#+name= (see [[https://emacs.stackexchange.com/questions/38457/name-is-ignored-unless-running-emacs-with-q][this stackexchange post]])
#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

*** extras
Enable using :ignore: in a heading to leave off the heading (but not content) of a section in export.
#+BEGIN_SRC emacs-lisp
(use-package org-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+END_SRC

Allow overriding variable values in buffer for export (using =#+BIND: variable value=)
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC
*** Latex command
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

** babel
Don't indent code blocks, and don't confirm to evaluate.
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Set =org-babel-min-lines-for-block-output= to 1 to always wrap output in an example block, rather than prepending with =:=. Alternatively, could use =:results output drawer= in the code block header.
#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-babel-min-lines-for-block-output 1)
  :general
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "'" '(org-edit-special :wk "edit")
    "-" '(org-babel-demarcate-block :wk "split block")
    "z" '(org-babel-hide-result-toggle :wk "fold result")
    "Z" '(org-babel-result-hide-all :wk "fold all results")))
#+END_SRC

*** languages
#+BEGIN_SRC emacs-lisp
(use-package jupyter)
#+END_SRC

Load the languages to be recognized in code blocks, and also set default header args.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (jupyter . t)
   (octave . t)
   ;; (R . t)
   ;; other languages..
   ))

(add-to-list 'org-babel-default-header-args:python
             '(:results . "output"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python3")
#+END_SRC

* RSS
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-feeds
	'(("https://planet.emacslife.com/atom.xml" emacs)
	  ("https://forum.effectivealtruism.org/feed.xml?view=frontpage-rss&karmaThreshold=30" EA) ; EA Forum Top Posts
	  ("https://www.astralcodexten.com/feed" ACX)
	  ("http://nature.com/neuro/rss/current.xml" paper) ; Nature Neuroscience
	  ))
  (defface EA-elfeed-entry
    '((t :background "#02ccbf"))
    "Marks an EA Elfeed entry.")

  (push '(EA EA-elfeed-entry)
	elfeed-search-face-alist)

  (defface ACX-elfeed-entry
    '((t :background "#b0c7ef"))
    "Marks an ACX Elfeed entry.")

  (push '(ACX ACX-elfeed-entry)
	elfeed-search-face-alist)

  (defface emacs-elfeed-entry
    '((t :background "#CEB0F0"))
    "Marks an Emacs Elfeed entry.")

  (push '(emacs emacs-elfeed-entry)
	elfeed-search-face-alist)
  )
#+END_SRC

Scoring
#+BEGIN_SRC emacs-lisp
(use-package elfeed-score
  :after elfeed
  ;; :custom
  ;; (elfeed-score-score-file "~/.emacs.d.default/elfeed.score")
  :config
  (elfeed-score-enable)
  (define-key elfeed-search-mode-map "=" elfeed-score-map))
;; (setq elfeed-search-print-entry-function #'elfeed-score-print-entry)

(defun concatenate-authors (authors-list)
    "Given AUTHORS-LIST, list of plists; return string of all authors concatenated."
    (if (> (length authors-list) 1)
        (format "%s et al." (plist-get (nth 0 authors-list) :name))
      (plist-get (nth 0 authors-list) :name)))

(defun my-search-print-fn (entry)
    "Print ENTRY to the buffer."
    (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
        (title (or (elfeed-meta entry :title)
                    (elfeed-entry-title entry) ""))
        (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
	(feed (elfeed-entry-feed entry))
	(feed-title
	 (when feed
	   (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
	(tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
	(tags-str (mapconcat
		   (lambda (s) (propertize s 'face 'elfeed-search-tag-face))
		   tags ","))
        (entry-authors (concatenate-authors
                        (elfeed-meta entry :authors)))
        (title-width (- (window-width) 10
                        elfeed-search-trailing-width))
        (title-column (elfeed-format-column
                        title 100
                        :left))
        (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 10 :left))
        (authors-column (elfeed-format-column entry-authors 40 :left)))
    (insert (propertize date 'face 'elfeed-search-date-face) " ")

    (insert entry-score "")
    (insert (propertize title-column
                        'face title-faces 'kbd-help title) " ")
    (when feed-title
      (insert (propertize feed-title 'face 'elfeed-search-feed-face) " "))
    (when tags
      (insert "(" tags-str ")"))
    (insert (propertize authors-column
                        'kbd-help entry-authors) " ")
    ))

(setq elfeed-search-print-entry-function #'my-search-print-fn)
(setq elfeed-search-date-format '("%y-%m-%d" 10 :left))
(setq elfeed-score-score-format '("%d-" 2 :right))
(setq elfeed-search-title-max-width 110)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :config
  (defun timu-elfeed-load-db-and-open ()
    "Wrapper to load the `elfeed' db from disk before opening. `elfeed' will be opened in a new tab with `tab-bar-new-tab'."
    (interactive)
    (tab-bar-new-tab)
    (elfeed-db-load)
    (elfeed)
    (elfeed-update))
  (defun timu-elfeed-search-other-window ()
    "Browse `elfeed' entry in the other window.
Credit: https://protesilaos.com/dotemacs"
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (elfeed-entry-link entry))
           (win (selected-window)))
      (with-current-buffer (get-buffer "*elfeed-search*")
	(unless (one-window-p)              ; experimental
          (delete-other-windows win))
	(split-window-right)
	(other-window 1)
	(evil-window-increase-width 10)
	(elfeed-search-show-entry entry))))
  (defun timu-elfeed-kill-buffer-and-window ()
    "Do-what-I-mean way to handle `elfeed' windows and buffers.
When in an entry buffer, kill the buffer and return to the Search view.
If the entry is in its own window, delete it as well.
 When in the search view, close all other windows, else kill the buffer."
    (interactive)
    (let ((win (selected-window)))
      (cond ((eq major-mode 'elfeed-show-mode)
             (elfeed-kill-buffer)
             (unless (one-window-p) (delete-window win))
             (switch-to-buffer "*elfeed-search*"))
            ((eq major-mode 'elfeed-search-mode)
             (if (one-window-p)
		 (progn
		   (message "closing")
                   (elfeed-search-quit-window)
                   (kill-buffer "*elfeed-search*")
                   (kill-buffer "*elfeed-log*")
                   ;; (kill-buffer "elfeed-list.org")
                   (tab-bar-close-tab))
               (delete-other-windows win))))))
  (defun timu-elfeed-filter-include-tag ()
    "Use `completing-read' to select tags to include `+'.
The function reads the tags from the `elfeed' db."
    (interactive)
    (let ((filtered-tag (completing-read "Select Tags: " (elfeed-db-get-all-tags))))
      (progn
	(setq elfeed-search-filter (concat elfeed-search-filter " +" filtered-tag))
	(elfeed-search-update--force))))


  (defun timu-elfeed-filter-exclude-tag ()
    "Use `completing-read' to select tags to exclude `-'.
The function reads the tags from the `elfeed' db."
    (interactive)
    (let ((filtered-tag (completing-read "Select Tags: " (elfeed-db-get-all-tags))))
      (progn
	(setq elfeed-search-filter (concat elfeed-search-filter " -" filtered-tag))
	(elfeed-search-update--force))))

  :bind
  (:map elfeed-search-mode-map
        ("q" . timu-elfeed-kill-buffer-and-window)
        ("y" . timu-elfeed-filter-include-tag))
  ;; :bind
  ;; (:map elfeed-show-mode-map
  ;;       ("q" . timu-elfeed-kill-buffer-and-window))
  ;; (bind-keys :map elfeed-show-mode-map
  ;;            ("q" . timu-elfeed-kill-buffer-and-window)
  ;;            ("f" . timu-elfeed-filter-include-tag)
  ;;            ("F" . timu-elfeed-filter-exclude-tag))
  ;; (bind-keys :map elfeed-search-mode-map
  ;;            ("q" . timu-elfeed-kill-buffer-and-window))
  )
#+END_SRC

* Programming
** shells

Set =comint-prompt-read-only= to nil, since otherwise completions don't work in the Matlab shell.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (comint-prompt-read-only nil))
#+END_SRC

** commenting
Taken from https://github.com/hrs/sensible-defaults.el. Make comment/uncomment affect the current line when no region is selected.
#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(global-set-key (kbd "M-;")
                'sensible-defaults/comment-or-uncomment-region-or-line)

#+END_SRC
** Auto-formatting
#+BEGIN_SRC emacs-lisp
;; auto-format different source code files extremely intelligently
;; https://github.com/radian-software/apheleia
;; Don't enable it globally since it messes up my openfoam files
(use-package apheleia
  :hook (python-mode . apheleia-mode))
#+END_SRC

** eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure nil
  :defer t
  :general
  (klk/leader-key-def
    "l x" '(eglot-code-action-extract :wk "extract code")
    "l a" '(eglot-code-actions :wk "code actions")
    "l r" '(eglot-rename :wk "rename")
    "l d" '(xref-find-definitions :wk "go to definition")
    )
  :commands (eglot
             eglot-rename
             eglot-ensure
             eglot-rename
             eglot-format-buffer)

  :custom
  (eglot-report-progress nil)  ; Prevent minibuffer spam

  :hook
  (python-base-mode-hook . eglot-ensure)

  :config
  ;; Optimizations
  (fset #'jsonrpc--log-event #'ignore)
  (setq jsonrpc-event-hook nil))
#+END_SRC

** python

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :general
  (klk/leader-key-def
    :keymaps 'python-mode-map
    "r p" '(run-python :which-key "run python")
    "e" '(:ignore t :which-key "execute")
    "e r" '(python-shell-send-region :which-key "region"))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package python-isort
  :hook
  (python-mode . python-isort-on-save-mode))

(use-package python-pytest)

(use-package flycheck)

(setq-default eglot-workspace-configuration
              `(:pylsp (:plugins
                        (
                         :autopep8 (:enabled t)

                         ;; Syntax checkers (works with Flymake)
                         :pylint (:enabled t)
                         :pycodestyle (:enabled t)
                         ;; :flake8 (:enabled t)
                         ;; :pyflakes (:enabled t)
                         :pydocstyle (:enabled t)
                         :mccabe (:enabled t)

                         :yapf (:enabled :json-false)
                         :rope_autoimport (:enabled :json-false)))))
#+END_SRC

Include the =(when buffer-file-name ...)= as a workaround to avoid slowness when using org-babel src blocks. See https://github.com/wyuenho/emacs-pet/issues/24.
#+BEGIN_SRC emacs-lisp
(use-package pet
  :config
  (add-hook 'python-base-mode-hook
            (lambda ()
              (when buffer-file-name (setq-local python-shell-interpreter (pet-executable-find "python")
                          python-shell-virtualenv-root (pet-virtualenv-root))

	      (pet-eglot-setup)
	      (eglot-ensure
	      )))))
#+END_SRC

** virtual env
#+BEGIN_SRC emacs-lisp
(use-package pyvenv)
#+END_SRC

** octave
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
  :hook
  ;; unset C-h since I use it for switching tabs
  (octave-mode . (lambda () (local-unset-key (kbd "C-h"))))
  (inferior-octave-mode . (lambda () (local-unset-key (kbd "C-h"))))
  :general
  (klk/leader-key-def
    :keymaps 'octave-mode-map
    "o o" '(run-octave :which-key "run octave")
    "e" '(:ignore t :which-key "execute")
    "e l" '(octave-send-line :which-key "line")
    "e r" '(octave-send-region :which-key "region")
    "e B" '(octave-send-block :which-key "block")
    "e d" '(octave-send-defun :which-key "function def")
    "e b" '(octave-send-buffer :which-key "buffer"))
  )
#+END_SRC

** code cells

Allows defining separate cells in a code file using, e.g., # %% Title. Overwrite code-cells-boundary-regexp to also use ## as a cell marker.

#+BEGIN_SRC emacs-lisp
(use-package code-cells
  :hook 
  (python-mode . code-cells-mode)
  (octave-mode . code-cells-mode)
  (octave-mode . (lambda () (setq-local code-cells-boundary-regexp "^%%\\(%+\\)")))
  (matlab-mode . code-cells-mode)
  (matlab-mode . (lambda () (setq-local code-cells-boundary-regexp "^%%")))
	 ;; (julia-mode . code-cells-mode))
  :custom
  (code-cells-boundary-regexp
   (rx (+ (syntax comment-start))
       (or (seq (* (syntax whitespace)) "%" (group-n 1 (+ "%")))
           (group-n 1 (+ "*"))
           (group-n 1 (+ "#"))
           (seq " In[" (* (any space digit)) "]:")))
   :type 'regexp)
  :general
  (klk/leader-key-def
    :keymaps 'code-cells-mode-map
    "e c" '(code-cells-eval :wk "cell"))
  :config
  ;; (add-to-list 'code-cells-eval-region-commands '(julia-snail-mode . julia-snail-send-code-cell))
  (add-to-list 'code-cells-eval-region-commands '(octave-mode . octave-send-region))
  (add-to-list 'code-cells-eval-region-commands '(matlab-mode . matlab-shell-run-region))
  (let ((map code-cells-mode-map))
    (define-key map (kbd "M-p") 'code-cells-backward-cell)
    (define-key map (kbd "M-n") 'code-cells-forward-cell)
    (define-key map (kbd "M-P") 'code-cells-move-cell-up)
    (define-key map (kbd "M-N") 'code-cells-move-cell-down)
    (define-key map (kbd "C-c C-c") 'code-cells-eval)
    ;; Overriding other minor mode bindings requires some insistence...
    (define-key map [remap jupyter-eval-line-or-region] 'code-cells-eval)))
#+END_SRC

** matlab
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :straight (matlab-mode :type git :host github :repo "MathWorks/Emacs-MATLAB-Mode")
  :hook
  ;; unset C-h since I use it for switching tabs
  (matlab-mode . (lambda () (local-unset-key (kbd "C-h"))))
  :general
  (klk/leader-key-def
    :keymaps 'matlab-mode-map
    "m m" '(matlab-shell :which-key "run matlab shell")
    "e" '(:ignore t :which-key "execute")
    "e l" '(matlab-shell-run-region-or-line :which-key "line")
    "e r" '(matlab-shell-run-region :which-key "region"))
  )
#+END_SRC

* Reference management
** pdf-tools

Better pdf interactions in Emacs. Config based on https://github.com/yanghaoxie/emacs.d/blob/master/init.org#pdf-tools

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :config
  (pdf-tools-install :no-query)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  ;; turn off cua so copy works
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  :general
  (klk/leader-key-def-major-mode
    :keymaps 'pdf-view-mode-map
    :major-modes t
    "/" 'isearch-forward
    "?" 'isearch-backward
    ;; Slicing image
    "s" '(:ignore t :which-key "slice/occur")
    "sm" 'pdf-view-set-slice-using-mouse
    "sb" 'pdf-view-set-slice-from-bounding-box
    "sr" 'pdf-view-reset-slice
    ;; Annotations
    "a" '(:ignore t :which-key "annotation")
    "ad" 	'pdf-annot-delete
    "at" 	'pdf-annot-attachment-dired
    "ah" 	'pdf-annot-add-highlight-markup-annotation
    "al" 	'pdf-annot-list-annotations
    "am" 	'pdf-annot-add-markup-annotation
    "ao" 	'pdf-annot-add-strikeout-markup-annotation
    "as" 	'pdf-annot-add-squiggly-markup-annotation
    "at" 	'pdf-annot-add-text-annotation
    "au" 	'pdf-annot-add-underline-markup-annotation
    "b" 'pdf-isearch-sync-backward
    ;; Fit image to window
    "f" '(:ignore t :which-key "fit")
    "fw" 'pdf-view-fit-width-to-window
    "fh" 'pdf-view-fit-height-to-window
    "fp" 'pdf-view-fit-page-to-window
    ;; Other
    "ss" 'pdf-occur
    "p" 'pdf-misc-print-document
    "O" 'pdf-outline
    "m" 'pdf-view-midnight-minor-mode)
  )
#+END_SRC

** bibtex
Set paths that will be used by multiple packages.
#+BEGIN_SRC emacs-lisp
(setq bib-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      bibtex-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      pdf-files-directory "~/Dropbox/papers/bibtex")
#+END_SRC

** citar
First set up the built-in org-cite to handle export. Use citeproc to include csl support for everything except latex export.
#+BEGIN_SRC emacs-lisp
(use-package citeproc)

(use-package org
  :config
  (require 'oc-biblatex)
  :custom
  (org-cite-global-bibliography '("~/Dropbox/Zotero/library.bib"))
  (org-cite-export-processors '((latex biblatex) (t csl))))
#+END_SRC

Set up citar for citation management.
#+BEGIN_SRC emacs-lisp
(use-package citar
  :straight (citar :type git :host github :repo "emacs-citar/citar")
  :after all-the-icons
  :demand t
  :general
  (klk/leader-key-def
    "c i" '(citar-insert-citation :wk "insert citation")
    "c y" '(citar-org-kill-citation :wk "yank citation")
    "c o" '(citar-open :wk "open citation")
    "c n" '(citar-open-note :wk "open reference note"))
  :custom-face
  (citar-highlight ((t (:weight normal))))
  :init
  (defun citar-setup-capf ()
    (add-to-list 'completion-at-point-functions 'citar-capf))
  :hook
  (LaTeX-mode . citar-setup-capf)
  (org-mode . citar-setup-capf)
  :config
  (defvar citar-indicator-files-icons
    (citar-indicator-create
     :symbol (all-the-icons-faicon
              "file-o"
              :face 'all-the-icons-green
              :v-adjust -0.1)
     :function #'citar-has-files
     :padding "  " ; need this because the default padding is too low for these icons
     :tag "has:files"))

  (defvar citar-indicator-links-icons
    (citar-indicator-create
     :symbol (all-the-icons-octicon
              "link"
              :face 'all-the-icons-orange
              :v-adjust 0.01)
     :function #'citar-has-links
     :padding "  "
     :tag "has:links"))

  (defvar citar-indicator-notes-icons
    (citar-indicator-create
     :symbol (all-the-icons-material
              "speaker_notes"
              :face 'all-the-icons-blue
              :v-adjust -0.3)
     :function #'citar-has-notes
     :padding "  "
     :tag "has:notes"))

  (defvar citar-indicator-cited-icons
    (citar-indicator-create
     :symbol (all-the-icons-faicon
              "circle-o"
              :face 'all-the-icon-green)
     :function #'citar-is-cited
     :padding "  "
     :tag "is:cited"))
  (setq citar-indicators
	(list citar-indicator-files-icons ; plain text
              citar-indicator-notes-icons)) ; icon
  (setq citar-templates
	'((main . "${author editor:30%sn}     ${date year issued:4}     ${title:80}")
          (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
          (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
          (note . "Notes on ${author editor:%etal}, ${title}")))
  :custom
  (citar-at-point-function 'embark-act)
  (citar-open-entry-function 'citar-open-entry-in-zotero)
  (citar-notes-paths `(,(org-roam-path "references")))
  (citar-bibliography '("~/Dropbox/Zotero/library.bib")))
#+END_SRC

*** citar-embark
#+BEGIN_SRC emacs-lisp
(use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+END_SRC

*** citar-org-roam
#+BEGIN_SRC emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-capture-template-key "r")
  (citar-org-roam-note-title-template "${title} - ${author}")
  :config
  (setq citar-org-roam-template-fields
	; override this to include the file field
	'((:citar-title . ("title"))
    (:citar-author . ("author" "editor"))
    (:citar-date . ("date" "year" "issued"))
    (:citar-pages . ("pages"))
    (:citar-file . ("file"))
    (:citar-type . ("=type="))))
  (citar-org-roam-mode))
#+END_SRC
** org-ref

I'm using citar now for reference management, but org-ref still provides a nice menu for inserting references to figures / tables / etc. So I still use it for that.

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :general
  (klk/leader-key-def
    "rr" '(org-ref-insert-ref-link :wk "insert ref")))
#+END_SRC
