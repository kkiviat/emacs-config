#+TITLE: Base emacs configuration
#+DESCRIPTION: Emacs configuration
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent
Enable lexical binding (needed for some of the org-roam config). *This must be at the top of the file.*
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
#+END_SRC

* Basics
** Sensible Defaults
sensible-defaults.el is from [[https://github.com/hrs/sensible-defaults.el][here]].
Enable everything, but disable the visual bell function.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(setq ring-bell-function 'ignore)
#+END_SRC

** Help
*** which-key
Show possible command completions after typing a prefix.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (setq which-key-separator " ")
  (setq which-key-idle-delay 0.5)
 )
#+END_SRC
*** helpful
Get more information about functions, etc.
#+BEGIN_SRC emacs-lisp
(use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Windows
Hide window chrome
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode 0)
 (menu-bar-mode 0)
 (scroll-bar-mode -1)
 #+END_SRC

Start with window maximized and partially transparent.
Transparency toggling / setting code based on [[https://www.reddit.com/r/emacs/comments/9e98hp/translucent_background/e5pi7bl/][this reddit post]].
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))

(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(90 90))))
(global-set-key (kbd "<f9>") 'toggle-transparency)

;; Set transparency of emacs
(defun transparency (arg &optional active)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nEnter alpha value (1-100): \np")
  (let* ((elt (assoc 'alpha default-frame-alist))
         (old (frame-parameter nil 'alpha))
         (new (cond ((atom old)     `(,arg ,arg))
                    ((eql 1 active) `(,arg ,(cadr old)))
                    (t              `(,(car old) ,arg)))))
    (if elt (setcdr elt new) (push `(alpha ,@new) default-frame-alist))
    (set-frame-parameter nil 'alpha new)))
(global-set-key (kbd "C-c p") 'transparency)
#+END_SRC

Allows undo and redo of changes in window configurations.
By default, undo is bound to *C-c <left>* and redo to *C-c <right>*.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode 1))
#+END_SRC

Set up keybinding for =ace-window= to quickly jump to a window.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

** Scrolling
Emacs 29 has smooth scrolling natively.
#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29")
      (progn
	(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; two lines at a time
	(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
	(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
	(setq scroll-step 1) ;; keyboard scroll one line at a time

					; stop emacs from recentering the buffer point when the point goes outside the window
	(setq scroll-conservatively 101)
	)
    (progn
      (pixel-scroll-precision-mode)
      (setq pixel-scroll-precision-large-scroll-height 40.0)
      (setq pixel-scroll-precision-interpolation-factor 30)
      (setq scroll-conservatively 101) ;; keyboard scroll one line at a time
      )
    )
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :init
  (beacon-mode 1))
#+END_SRC

** Line numbers
  Display line numbers except in certain modes. From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode org-agenda-mode pdf-view-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+END_SRC

** Keybindings

*** General
Based on https://www.lucacambiaghi.com/vanilla-emacs/readme.html.
#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :config
  (general-auto-unbind-keys)
  (general-create-definer klk/leader-key-def :prefix "M-SPC")
  (klk/leader-key-def
    ;; Window management
    "w" '(:ignore t :which-key "window")
    "wl" 'windmove-right
    "wh" 'windmove-left
    "wk" 'windmove-up
    "wj" 'windmove-down
    "wr" 'winner-redo
    "wd" 'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wu" 'winner-undo
    "wr" 'winner-redo
    "wm" '(delete-other-windows :which-key "maximize")

    ;; Themes
    "t" 'klk-choose-theme :which-key "themes"

    "r"'(:ignore t :which-key "refile")
    "rr" '(org-refile :which-key "choose heading")
    "rd" '((lambda () (interactive) (org-reverse-datetree--refile-to-file (buffer-file-name))) :which-key "datetree")

    "k" '(:keymap bookmark-map :which-key "bookmarks")

    ;; Jump around
    "jh" #'ap/avy-org-goto-to-heading-timer
    "jj" #'avy-goto-char-timer
    "jl" #'avy-goto-line
    "jp" #'avy-pop-mark))

#+END_SRC
** Selection
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :general ("C-'"  'er/expand-region))
#+END_SRC

** Text
Make the text bigger by default. (sensible-defaults binds font resize to C-- and C-+)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 130)
#+END_SRC

Default to visual line mode for some modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory "~/.emacs.d/themes")
(setq custom--inhibit-theme-enable nil)
#+END_SRC

*** fonts
Enable changing font face per buffer. From https://www.emacswiki.org/emacs/FacesPerBuffer.

ETbb font from https://ctan.org/pkg/etbb

Office Code Pro from https://github.com/nathco/Office-Code-Pro

Set the default variable and fixed-pitch fonts.
#+BEGIN_SRC emacs-lisp
(when (member "Office Code Pro" (font-family-list))
  (set-face-attribute 'default nil :font "Office Code Pro"))

(when (member "SF Pro Rounded" (font-family-list))
  (set-face-attribute 'variable-pitch nil :font "SF Pro Rounded"))

(when (member "Office Code Pro" (font-family-list))
  (set-face-attribute 'fixed-pitch nil :font "Office Code Pro"))
#+END_SRC

Functions to change fonts. "default" includes org buffers when =fixed-pitch-mode= is not enabled. "fixed" controls code blocks, etc. "variable" controls the font in org buffers when =fixed-pitch-mode= is enabled.
#+BEGIN_SRC emacs-lisp
(defun klk-change-font (choice)
  "Top-level function to choose the class of font to change then change it"
  (interactive
   (let ((choices '("default" "fixed" "variable")))
     (list (completing-read "Choose: " choices nil t))))
  (command-execute
   (cond ((string= choice "default") 'klk/change-default-font-family)
	 ((string= choice "fixed") 'klk/change-fixed-font-family)
	 ((string= choice "variable") 'klk/change-variable-font-family)))
  choice)

(defun klk/change-variable-font-family (choice)
  "Change the font used for variable width text"
  (interactive
   (let ((choices '("Source Sans 3" "ETbb" "SF Pro Rounded")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'variable-pitch nil :family choice)
  choice)

(defun klk/change-fixed-font-family (choice)
  "Change the font used for fixed width (including default) text"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Free Mono" "Source Code Pro" "Iosevka Fixed Slab" "Office Code Pro" "JetBrains Mono")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'fixed-pitch nil :family choice)
  choice)

(defun klk/change-default-font-family (choice)
  "Change the font used for default text (used in org buffers when not variable pitch)"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Source Sans Mono" "FreeMono" "Source Code Pro" "Office Code Pro" "Hack" "Iosevka Fixed Slab" "JetBrains Mono")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'default nil :family choice)
  choice)
#+END_SRC


Enable changing font per buffer.
#+BEGIN_SRC emacs-lisp
(defun klk-buffer-set-font-family (family)
  "Set font to the specified family in current buffer"
  (setq buffer-face-mode-face `(:family ,family))
  (buffer-face-mode))
#+END_SRC

Functions to toggle =variable-pitch-mode= it for all org buffers.
#+BEGIN_SRC emacs-lisp
(defun klk-org-variable-pitch-on ()
  (interactive)
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode 1))))
  (buffer-list))
  )

(defun klk-org-variable-pitch-off ()
  (interactive)
  (remove-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode -1))))
  (buffer-list))
  )

(defun klk-toggle-variable-pitch-org-buffers ()
  (interactive)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (call-interactively 'variable-pitch-mode))))
  (buffer-list))
  )
#+END_SRC

Use monospace font in code blocks and tables.  From https://github.com/jparcill/emacs_config/blob/master/config.el
#+BEGIN_SRC emacs-lisp
(defun klk-set-org-block-fixed-pitch ()
  (interactive)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  )
#+END_SRC

*** Mixed pitch mode
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch nil :height 1.2))
#+END_SRC

*** Olivetti mode
#+BEGIN_SRC emacs-lisp
(use-package olivetti
    :general
    (klk/leader-key-def
      "m o" '(olivetti-mode :wk "olivetti"))
    :init
    (setq olivetti-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+END_SRC

*** Load themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :defer t)
#+END_SRC


Config for quiet theme from https://github.com/quiettheme/emacs.
#+BEGIN_SRC emacs-lisp
(setq doom-quiet-dark-padded-modeline t)
(setq doom-quiet-dark-brighter-modeline t)
(setq doom-quiet-dark-brighter-comments t)
(setq doom-quiet-light-padded-modeline t)
(setq doom-quiet-light-brighter-comments t)
#+END_SRC
*** Modeline
**** Doom modeline
Try using this instead since it can show the current perspective. The following config is probably not the right way to do this, but it works to put the modeline at the top like the bespoke modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
  (setq doom-modeline-height 40)
  (doom-modeline-mode 1)
  (setq-default header-line-format mode-line-format)
  (setq-default mode-line-format " ")
  )
#+END_SRC

*** toggle themes
Spring theme uses fonts from https://www.ishouldbemoppingthefloor.com/2015/02/20-free-spring-fonts.html
#+BEGIN_SRC emacs-lisp
(defun klk-disable-all-themes ()
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme)))

(defun klk-choose-theme ()
  (interactive)
  (let ((choices '(("Spring"  . (lambda () (load-theme 'Spring t)))
		   ("Bespoke" . (lambda () (load-theme 'bespoke t)))
		   ("White"  . (lambda () (load-theme 'white t)))
		   ("Clean"  . (lambda () (load-theme 'clean t)))
                   ("Nier" . (lambda () (load-theme 'nier t)))
		   ("Dark" . (lambda () (load-theme 'doom-quiet-dark t)))
		   ("Light" . (lambda () (load-theme 'doom-quiet-light t)))
		   ("Dark Yellow" . (lambda () (load-theme 'dark-yellow t)))
                   ("DefaultPlus"  . (lambda () (load-theme 'defaultplus t))))))
    (let ((choice (alist-get
		   (completing-read "Choose: " choices) choices nil nil 'equal)))
      (klk-disable-all-themes)
      (funcall choice)
      ;; (klk-set-org-block-fixed-pitch)
      )
    )
  )
#+END_SRC

Set up hook for theme changes that resets some faces.

Also add a method to refresh $\LaTeX$ previews in all open org buffers, but don't call it on the hook because it's too slow. Call it manually if needed.
=org-latex-preview= needs a =C-u C-u= prefix argument to reload for the whole buffer. =C-u= corresponds to 4, =C-u= corresponds to 16.
#+BEGIN_SRC emacs-lisp
(defun klk/refresh-latex-previews ()
  (interactive)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
	      (let ((current-prefix-arg '(16))) ; C-u C-u
		(call-interactively 'org-latex-preview)))))
  (buffer-list)))

(defun klk-refresh-org-buffer-colors (&rest args)
  ;; (klk/refresh-latex-previews)
  ;; Reset colors of window divider
  (dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background))
  (set-face-background 'fringe (face-attribute 'default :background))
  ;; reset thin modeline
  (set-face-attribute 'mode-line nil :height 10)
  (set-face-attribute 'header-line nil :height 128)
  ))

(advice-add 'load-theme :after 'klk-refresh-org-buffer-colors)
#+END_SRC

*** Set up current theme
#+BEGIN_SRC emacs-lisp
(load-theme 'doom-quiet-light t)
;; (klk-set-org-block-fixed-pitch) ; default
#+END_SRC

** Prettify
*** org-modern
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :straight (org-modern :type git :host github :repo "minad/org-modern")
  :config
  (setq org-modern-star nil)
  )
#+END_SRC

Include their config to add padding to buffers and tweak a few other things.
#+BEGIN_SRC emacs-lisp
(modify-all-frames-parameters
 '((right-divider-width . 40)
   (internal-border-width . 40)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))


(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…"

 ;; Agenda styling
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")
#+END_SRC
*** icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode)
  :config (setq all-the-icons-dired-monochrome nil))
#+END_SRC
*** Colors
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode))
#+END_SRC
*** Prettify symbols
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq-default prettify-symbols-alist '(
				 ("[#A]" . "⚑")
				 ("[#B]" . "⚐")
				 ("#+BEGIN_QUOTE" . "❝")
				 ("#+END_QUOTE" . "❞")
				 ("#+begin_quote" . "❝")
				 ("#+end_quote" . "❞")
				 ("#+BEGIN_SRC" . "❯")
				 ("#+END_SRC" . "❮")
				 ("#+begin_src" . "❯")
				 ("#+end_src" . "❮")
				 (":END:" . "―")
				 ("#+TITLE: " . "")
				 ("#+title: " . "")
				 ("#+RESULTS:" . "🠶")))
  :hook (org-mode . prettify-symbols-mode))
#+END_SRC

** Flyspell
  #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight nil
  :hook
  (text-mode . flyspell-mode))
  #+END_SRC

** Highlighting
  Highlight all occurrences of word under the cursor. Config from http://xenodium.com/emacs-highlight-symbol-mode/
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (set-face-attribute 'highlight-symbol-face nil
			:background "#A5A5A5"
			:foreground "default")
    (setq highlight-symbol-idle-delay 0)
    (setq highlight-symbol-on-navigation-p t)
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
  #+END_SRC

** Backups / saves
From [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]]
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

Save history between sessions.
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
#+END_SRC


** Undo tree
More typical undo mode. Adds C-/ mapping to undo and C-? mapping to redo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil))
#+END_SRC


** Projects
*** Projectile
+ =C-c p p= to switch to a project
+ =C-c p s r= to ripgrep through current project
+ =C-c p S= save all project buffers
+ =C-c p f= select file in project
#+BEGIN_SRC emacs-lisp
(use-package rg) ;; ripgrep for searching in projectile

(defun klk/org-project-notes-file ()
  (expand-file-name "notes.org" (projectile-project-root)))

(defun klk/open-org-project-notes-file ()
  (interactive)
  (find-file (klk/org-project-notes-file))
  (goto-char (point-min))
  ;; Jump to first heading consisting of the current year
  ;; (this should be where the most recent entries are in the reverse datetree)
  (search-forward-regexp (format "^\\*+ [0-9][0-9][0-9][0-9]$")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :general
  (klk/leader-key-def
    "p" '(:keymap projectile-command-map :which-key "project")
    "pe" '(projectile-run-eshell :which-key "project eshell")
    "pn" '(klk/open-org-project-notes-file :which-key "project notes"))
    :config
  (setq projectile-project-search-path '(("~/Dropbox/org/gtd" . 3) ("~/" . 1) ("~/openfoam/" . 2)))
)
#+END_SRC

*** Perspective
=perspective.el= allows saving multiple buffer lists / window configurations and quickly switching between them.
- =C-z s= switch to or create new perspective
- =C-z [n|p]= switch to next or previous perspective
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)
  :custom
  (persp-mode-prefix-key (kbd "C-z"))
  :init
  (persp-mode)
  :config
  (setq persp-state-default-file "~/Dropbox/org/.persp")
  (setq persp-modestring-short t) ;; only show current persp in modeline
  (add-hook 'kill-emacs-hook #'persp-state-save))

(use-package persp-projectile
  :after projectile)
#+END_SRC
** Completion
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (use-package yasnippet-snippets)
  (yas-global-mode t)
  (add-to-list #'yas-snippet-dirs "~/.emacs.d/my-snippets")
  (yas-reload-all)'
  :diminish yas-minor-mode)
#+END_SRC
*** Yasnippet Company Integration
Taken from [[https://emacs.stackexchange.com/a/7909. Use =C-o= for yasnippet expansion to avoid conflict with company-mode.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-o" 'aya-open-line)

(defun aya-open-line ()
  "Call `open-line', unless there are abbrevs or snippets at point.
In that case expand them.  If there's a snippet expansion in progress,
move to the next field. Call `open-line' if nothing else applies."
  (interactive)
  (cond ((expand-abbrev))

        ((yas--snippets-at-point)
         (yas-next-field-or-maybe-expand))

        ((ignore-errors
           (yas-expand)))

        (t
         (open-line 1))))
#+END_SRC
*** Hippie Expand
Insert proposed expansion with =M-/=. Can be used to, e.g., repeat previous lines. Good for expanding file names.
#+BEGIN_SRC emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC
*** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
*** Marginalia
Provides nice annotations for minibuffer completion options (like command descriptions and keyboard shortcuts).
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+END_SRC
*** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :general
  (klk/leader-key-def
    "s" '(:ignore t :which-key "search")
    "s s" 'consult-line
    "s o" '(consult-outline :which-key "outline")
    "s h" '(consult-org-heading :which-key "org heading")
    "s p" '(consult-ripgrep :which-key "ripgrep project")
    "b" 'consult-buffer :which-key "consult buffer")
  :config
  (autoload 'projectile-project-root "projectile"))
#+END_SRC

Quickly select another directory in minibuffer.
#+BEGIN_SRC emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+END_SRC
*** Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))


(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
*** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-min-width 80)
  (corfu-max-width corfu-min-width) ;; Always have the same width
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  :init
  (global-corfu-mode))

(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC
** Latex
Feature name different from package name; see https://github.com/raxod502/straight.el/issues/516
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex)
#+END_SRC

** Git
*** Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit)
  #+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :init (global-git-gutter-mode +1))
#+END_SRC

** Terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

(use-package multi-vterm)
#+END_SRC

** imenu
#+BEGIN_SRC emacs-lisp
(use-package imenu
  :config
  (setq org-imenu-depth 3))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '(;(recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))
  (setq dashboard-set-navigator t)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-navigator-buttons
        `((;; Github
           (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Github"
            "Github"
            (lambda (&rest _) (browse-url "https://github.com/kkiviat/emacs-config")))
           ;; Perspectives
           (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
            "Restore"
            "Restore"
            (lambda (&rest _) (persp-state-load persp-state-default-file)))
           ))))
#+END_SRC

* Org-mode
** Basics

Save all org buffers periodically to reduce conflicts between desktop and orgzly on mobile.
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 60 t 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

Don't show blank lines between headings in folded view.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC

Unbind this from cycling through the agenda so I can use it with =expand-region=.
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-'") nil)
#+END_SRC

Most of this is from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this]] guide:

Set the org directory and method for getting the full path to an org file from its name.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Increase list indentation
#+BEGIN_SRC emacs-lisp
(setq org-list-indent-offset 2)
#+END_SRC

Set a sequence for list bullet symbols.
#+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
#+END_SRC

Copied from https://mstempl.netlify.app/post/beautify-org-mode/. Replace list dash / plus with bullet symbols.
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+END_SRC

Stop org files from being opened in new windows.
#+BEGIN_SRC emacs-lisp
(setq org-link-frame-setup '((file . find-file)))
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
(defun klk/goto-last-heading ()
  "Interactively jump to end of current subtree"
  (interactive)
  (org-end-of-subtree))

(use-package org
  :general
  (:keymaps 'org-mode-map "M-n" 'org-forward-paragraph "M-p" 'org-backward-paragraph)
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "jl" '(klk/goto-last-heading :wk "last heading")))
#+END_SRC
** Sidebar
The tree sidebar provides an outline on the left that you can use to jump around the file. The regular sidebar on the right shows TODO items in the file.
#+BEGIN_SRC emacs-lisp
(use-package org-sidebar
  :straight (org-sidebar :type git :host github :repo "alphapapa/org-sidebar")
  :bind (("<f5>" . org-sidebar-tree-toggle)
	 ("<f6>" . org-sidebar-toggle))
  )
#+END_SRC
** Indentation
Indent org files by default
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

This draws vertical lines under heading bullets. Add a function here to reset the pipe faces when loading a theme, since otherwise they won't change and it will look bad.
#+BEGIN_SRC emacs-lisp
  (use-package org-visual-indent
    :straight (org-visual-outline :type git :host github :repo "legalnonsense/org-visual-outline")
    :hook
    (org-mode . org-visual-indent-mode)
    (org-mode . org-dynamic-bullets-mode)
    :config
    (defun klk/refresh-pipe-colors (&rest args)
      (set-face-background 'org-visual-indent-blank-pipe-face (face-attribute 'default :background))
      (set-face-background 'org-visual-indent-pipe-face (face-attribute 'default :foreground)))

    (advice-add 'load-theme :after 'klk/refresh-pipe-colors))
#+END_SRC

Don't hide stars since this gets rid of bullets as well, and I have leading stars hidden anyway.
#+BEGIN_SRC emacs-lisp
(setq org-indent-mode-turns-on-hiding-stars nil)
#+END_SRC

** Export
Enable using :ignore: in a heading to leave off the heading (but not content) of a section in export.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+END_SRC

Allow overriding variable values in buffer for export (using =#+BIND: variable value=)
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

Allow formatting code blocks using minted in $\LaTeX$ export. From [[https://stackoverflow.com/questions/46438516/how-to-encapsualte-code-blocks-into-a-frame-when-exporting-to-pdf/60396939#60396939][Stack Overflow]].
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

Add support for Elsevier article format. From https://write.as/dani/writing-a-phd-thesis-with-org-mode.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
		   '("elsarticle"
		     "\\documentclass{elsarticle}
   [NO-DEFAULT-PACKAGES]
   [PACKAGES]
   [EXTRA]"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

** Refiling
Set targets for refiling. Use =C-c C-w= to refile. This determines what options you're prompted with. Includes everything in all the agenda files, plus the someday file and various list files.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9) ;; refile in current file
			   (org-agenda-files :maxlevel . 3)
                           ("someday.org" :level . 1)
			   ("l-media.org" :maxlevel . 2)
			   ("l-ideas.org" :maxlevel . 2)))
#+END_SRC

Include the file name in the outline path to allow refiling as a top-level heading.
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Create ids for links so they will work even if you move them across files.
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-clone-delete-id t)
#+END_SRC

** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cC" 'klk/open-calendar)
#+END_SRC

** Tables
Functions to jump between tables in a buffer. Taken from [[https://www.reddit.com/r/orgmode/comments/ot8g0j/orgnexttable_and_orgprevioustable_jump_to/][reddit]].
#+BEGIN_SRC emacs-lisp
(defun org-next-table (&optional arg)
  "Jump to the next table.

With a prefix argument ARG, jump forward ARG many tables."
  (interactive "p")
  (cl-loop
     for n below (abs arg)
     with backward = (< arg 0)
     with search-fn = (if backward #'re-search-backward #'re-search-forward)
     do
       (setq pt (point))
       (when (org-at-table-p)
         (funcall search-fn org-table-border-regexp nil :move))
     if (funcall search-fn org-table-line-regexp nil t) do
       (when (org-invisible-p)
         (org-reveal t)
         (org-show-entry)
         (unless (org-at-table-p)
           (cl-decf n)))
     else return (goto-char pt)
     finally (when backward
               (when (funcall search-fn org-table-border-regexp nil :move)
                 (next-line))
               (forward-char))))

(defun org-previous-table (&optional arg)
  "Jump to the previous table.

With a prefix argument ARG, jump backward ARG many tables."
  (interactive "p")
  (org-next-table (- arg)))
#+END_SRC

** Images
Make files start with inline images loaded, and add a hook to display them after executing a code block to display resulting graphs.
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

Set this to =nil= to allow customizing image preview size with something like:
=#ATTR_ORG: :width 200=
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

Scale up latex preview images.
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
(setq org-preview-latex-image-directory "/tmp/ltximg/")
(setq org-preview-latex-default-process 'imagemagick)
#+END_SRC

This package uses AucTeX's preview library for org mode LaTeX previews, which is faster. Especially important since I'm regenerating previews in all open buffers when I change themes.
#+BEGIN_SRC emacs-lisp
(use-package org-auctex
  :straight (org-auctex :type git :host github :repo "karthink/org-auctex")
  :config (add-hook 'org-mode-hook 'org-auctex-mode))
#+END_SRC

*** org-download
Note: need =xclip= installed for =org-download-clipboard=.
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :general
  (klk/leader-key-def
    "d" '(:ignore t :which-key "org-download")
    "d s" '(org-download-screenshot :which-key "screenshot")
    "d c" '(org-download-clipboard :which-key "clipboard"))
  :custom
  (org-download-image-dir "images"))
#+END_SRC
** Tasks

*** Basics
Stop parent tasks from being marked as complete if they have incomplete children.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Set the =TODO= states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence
			   "TODO(t!)"
			   "NEXT(n)"
			   "WAITING(w@)"
			   "PROJECT(p)"
			   "INP(i!)"
			   "|"
			   "DONE(d)"
			   "CANCELLED(c@)"
			   "NOTE(e)"
			   )
			   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-unavailable-files t)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/org-checklist.html][org-checklist]] supports recurring checklists
#+BEGIN_SRC emacs-lisp
;(use-package org-checklist)
#+END_SRC

*** Archiving
   Archive to =archive.org= under a tree heading with the name of the origin file.
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

*** Logging
 Log state changes in a drawer, not in the task content.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-state-notes-into-drawer t)
 #+END_SRC

 This will log a CLOSED timestamp when an item is marked as done. This is consistent with what orgzly does, and seems to show up in the agenda much like state change logs, except it makes archived items show up as well.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 #+END_SRC

*** Capture
**** Reverse datetree
#+BEGIN_SRC emacs-lisp
(use-package org-reverse-datetree)
#+END_SRC

**** Templates
[[https://github.com/progfolio/doct][doct]] provides a nicer syntax for defining capture templates.
#+BEGIN_SRC emacs-lisp
(use-package doct)
#+END_SRC

This automatically adds a created timestamp to new captured items, but I'm not using it because I don't always want that.
#+BEGIN_SRC emacs-lisp
;; (use-package org-expiry
;;   :straight (:type built-in)
;;   :config
;;   (setq
;;    org-expiry-created-property-name "CREATED"
;;    org-expiry-inactive-timestamps t
;;    )
;;   (add-hook 'org-capture-before-finalize-hook
;;           (lambda()
;;                (save-excursion
;;                     (org-back-to-heading)
;;                     (org-expiry-insert-created)))))
#+END_SRC

Define a function to go to the last top-level heading in an org file. For my weekly capture template I want to add the heading as a child under the last month heading.
#+BEGIN_SRC emacs-lisp
(defun klk/org-last-top-level-heading ()
  (goto-char (point-max))
  (search-backward-regexp "^* " nil t))
#+END_SRC

Define capture templates. Config for capturing project-specific tasks / notes based on [[https://www.reddit.com/r/emacs/comments/fs7tk3/how_to_manage_todo_tasks_in_my_project/][this thread]].
#+BEGIN_SRC emacs-lisp
(setq
 org-capture-templates
 (doct `((:group
          :empty-lines 1
          :children
          (("TODO" :keys "t"
            :file ,(org-file-path "inbox.org")
	    :template ("* %{todo-state} %?"
                          ":PROPERTIES:"
                          ":CREATED: %U"
                          ":END:"
                          "%{body}")
            :children (
		       ("todo" :keys "t" :body nil :todo-state "TODO")
		       ("scheduled" :keys "s" :body "SCHEDULED: %^{scheduled}t\n" :todo-state "TODO")
		       ("next" :keys "n" :body nil :todo-state "NEXT")))
	   ("Notes" :keys "n"
	    :template ("* %?\n%i\n")
            :children (
		       ("health" :keys "h" :file ,(org-file-path "p-health.org") :headline "Notes")
		       ("financial" :keys "f" :file ,(org-file-path "p-financial.org") :headline "Notes")
		       ("garden" :keys "g" :file ,(org-file-path "p-garden.org") :headline "Notes")
		       ("research" :keys "r" :file ,(org-file-path "research.org") :olp ("Notes") :datetree t :template "* %?\n")))
	   ("Projects" :keys "p"
            :file klk/org-project-notes-file
            :children (("note" :keys "n" :template ("* %^{Title}" "%?") :function (lambda ()
                          (org-reverse-datetree-goto-date-in-file
                           nil :olp '("Notes"))))
                       ("task" :keys "t" :headline "Tasks" :template ("* TODO %^{Title}" "%?"))))
	   ("Goal" :keys "g"
	    :immediate-finish t
	    :template ("* TODO %^{Goal}"
		       ":PROPERTIES:"
		       ":CREATED: %U"
		       ":END:")
            :children (
		       ("weekly" :keys "w" :file ,(org-file-path "goals.org") :headline "Weekly")
		       ("monthly" :keys "m" :file ,(org-file-path "goals.org") :headline "Monthly")))
	   ("Weekly" :keys "w"
	    :empty-lines 1
	    :function (lambda () (klk/org-last-top-level-heading))
	    :file ,(org-file-path "journal/weekly2022.org")
	    :refile-targets ,(org-file-path "journal/weekly2022.org")
	    :template ("** Week %^{week number}"
		       "[[file:~/Dropbox/org/roam/dailies/%^{start of week (yyyymmdd).org}]]"
		       "*** Goals / priorities :goals:"
		       "- %?"
		       "*** Review :weekly:"
		       "*** Key Ideas :keyideas:"))
	   ("Monthly" :keys "m"
	    :empty-lines 1
	    :file ,(org-file-path "journal/weekly2022.org")
	    :template ("* %^{Month}"
		       "** %\\1 Goals / priorities :goals:"
		       "- %?"
		       "** %\\1 Review :monthly:"
		       "** %\\1 Key Ideas :monthlykeyideas:"
		       "** %\\1 Highlights :highlights:" ))
	   )))))

#+END_SRC

**** Capture from outside emacs
Bind a system shortcut to =emacsclient -n -e '(yequake-toggle "org-capture")'= to bring up a temporary capture frame. Must have an emacsclient instance running. Doesn't work with refiling.
#+BEGIN_SRC emacs-lisp
(use-package yequake
  :straight (yequake :type git :host github :repo "alphapapa/yequake")

  :custom
  (yequake-frames
   '(("org-capture"
      (buffer-fns . (yequake-org-capture))
      (width . 0.75)
      (height . 0.5)
      (alpha . 0.95)
      (frame-parameters . ((undecorated . t)
                           (skip-taskbar . t)
                           (sticky . t)))))))
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (klk/leader-key-def
    "a" '(org-agenda :wk "agenda")
    "c" '(org-capture :wk "capture")))
#+END_SRC

Make agenda full screen.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

Some agenda view tweaks.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-include-deadlines t)
(setq org-agenda-start-with-log-mode t)
(setq org-deadline-warning-days 7)
#+END_SRC

Add lines between days in weekly view. Taken from [[https://www.reddit.com/r/orgmode/comments/e4stk2/adding_a_separator_line_between_days_in_emacs/][reddit]].
#+BEGIN_SRC emacs-lisp
(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
#+END_SRC

Add more space for the category in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format '((agenda . " %i %-15:c%?-12t% s")
				 (todo . " %i %-12:c")
				 (tags . " %i %-12:c")
				 (search . " %i %-12:c")))
#+END_SRC

Set files to be included in the agenda. Includes archive because I like to see old completed tasks in the agenda, and also =daily.org= because I want to show my one-line daily summaries in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files `(,(org-file-path "inbox.org")
			 ,(org-file-path "mobile inbox.org")
			 ,(org-file-path "writing_inbox.org")
			 ,(org-file-path "reading_inbox.org")
			 ,(org-file-path "gcal.org")
			 ,(org-file-path "gcal-school.org")
			 ,(org-file-path "gtd.org")
			 ,(org-file-path "goals.org")
			 ,(org-file-path "research.org")
			 ,(org-file-path "recurring.org")
			 ,(org-file-path "archive.org")
			 ,(org-file-path "school.org")
			 ,(org-file-path "p-financial.org")
			 ,(org-file-path "p-health.org")
			 ,(org-file-path "p-garden.org")))
#+END_SRC

Enable inline tasks.
#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

Super Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :config
  (org-super-agenda-mode t))
(require 'org-habit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun timestamp-in-n-days (n)
  "Get the timestamp of n days in the future."
  (format-time-string "%Y-%m-%d" (time-add (* 3600 24 n) (current-time))))

(setq org-agenda-custom-commands
      (list
       (quote
	("d" "Daily Agenda"
	 (
	  (
	   agenda "" ((org-agenda-span 'day)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
		      (org-super-agenda-groups
		       '(
			 (:name "⏰ Calendar" :time-grid t)
			 (:name "☆ Important" :priority "A")
			 (:name "⚠ Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
			 (:name "☆ Due" :and (:deadline today :not (:habit t)))
			 (:auto-property "Project")
			 (:auto-category)
			 (:name "Misc. Scheduled" :and (:scheduled today :not (:habit t)))
			 (:name "📌 Routines" :and (:habit t :category "recurring" :tag "habit"))
			 (:name "📌 Chores" :and (:habit t :category "recurring" :tag "chore"))
			 ))
		      ))
	  )))
       (quote
	("x" "Daily Agenda"
	 (
	  (
	   agenda "" (
		      (org-agenda-span 'day)
		      (org-agenda-overriding-header "Today")
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
		      (org-super-agenda-groups
		       '((:name "Calendar" :time-grid t)
			 (:name "☆ Important" :priority "A")
			 (:name "⚠ Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
			 (:name "Scheduled Today" :scheduled today)
			 (:auto-property "Project")
			 (:auto-category)
			 (:name "☆ Due" :and (:deadline today :not (:habit t)))
			 ))
		      ))
	  (alltodo "" ((org-agenda-overriding-header "Upcoming Schedule")
                       (org-super-agenda-groups
                        `((:name "Tomorrow" :scheduled (on ,(timestamp-in-n-days 1)))
			  (:name "In Two Days" :scheduled (on ,(timestamp-in-n-days 2)))
			  (:discard (:anything t))
			  ))))
	  (alltodo "" ((org-agenda-overriding-header "Goals")
                       (org-super-agenda-groups
                        `((:name "This month" :and (:tag "goal" :tag "monthly"))
			  (:name "This week" :and (:tag "goal" :tag "weekly"))
			  (:discard (:anything t))
			  ))))
	  ;; (todo "NEXT"
	  ;; 	((org-agenda-overriding-header "Next Tasks")
	  ;; 	 (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
	  ;; 	 ))
	  )))
       (quote
	("U" "Unscheduled"
	 ((todo ""
		((org-agenda-overriding-header "Unscheduled Tasks")
		 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("PROJECT"))))))
	 ((org-agenda-todo-ignore-scheduled 'future)
	  (org-agenda-sorting-strategy '(deadline-up)))))
       (quote("N" "Next tasks" todo "NEXT"
	      ((org-agenda-overriding-header "Next Tasks")
	       (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
	       ))
	     )
       (quote("p" "Project tasks" todo ""
	      (
	       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("PROJECT")))
	       (org-super-agenda-groups '((:auto-property "Project" :not (:todo "PROJECT")) (:discard (:anything t))))
	       )
	      ))
       (quote
	("n" "Notes"
	 (
	  (agenda "" ((org-agenda-span 'week)
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
					; (org-agenda-compact-blocks t)
		      (org-super-agenda-groups
		       '(
			 (:name "Daily Summary" :and (:time-grid t :tag "daily"))
			 (:discard (:anything t))
			 ))
		      )))))
       )
      )
#+END_SRC

** Journal

**** COMMENT deft
Deft is good for searching through files in a directory, like the journal directory.
=deft-parse-title= override is from https://github.com/jrblevin/deft/issues/75 so the title isn't just ":PROPERTIES:" with org-roam V2.

Note: this causes some annoyances because it seems to trigger auto-saves in org-roam files every couple of seconds.
#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-c d" . deft)
  :bind ("C-c D" . deft-find-file)
  :commands (deft)
  :config
  (setq deft-default-extension "org"
	deft-extensions '("org")
	deft-directory "~/Dropbox/org/roam"
	deft-recursive t
	deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n\\(#\\+.+\n\\)*\\(- .+::.+\n\\)?"
	deft-use-filename-as-title nil
	deft-file-naming-rules '((noslash . "-")
				 (nospace . "-")
				 (case-fn . downcase))
	deft-text-mode 'org-mode)
  )
(advice-add 'deft-parse-title :override
    (lambda (file contents)
      (if deft-use-filename-as-title
	  (deft-base-filename file)
	(let* ((case-fold-search 't)
	       (begin (string-match "title: " contents))
	       (end-of-begin (match-end 0))
	       (end (string-match "\n" contents begin)))
	  (if begin
	      (substring contents end-of-begin end)
	    (format "%s" file))))))
#+END_SRC

**** random note
Random note, for looking at a random past entry.
#+BEGIN_SRC emacs-lisp
(use-package org-randomnote
	:bind ("C-c r" . org-randomnote)
	:config
	(setq org-randomnote-candidates (directory-files "~/Dropbox/org/roam/dailies" t "^[0-9]+.org$" t))
	(setq org-randomnote-open-behavior 'indirect-buffer)
	)
#+END_SRC

** Visual

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-preserve-indentation t)
#+END_SRC

Hide emphasis markers like *,/,=

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

But show them when the cursor is on the word.
#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :config (add-hook 'org-mode-hook 'org-appear-mode))
#+END_SRC

Load images inline.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

This changes the context settings for sparse subtrees so that it will show the content of a heading matching the tag.
#+BEGIN_SRC emacs-lisp
(push '(tags-tree . local) org-show-context-detail)
#+END_SRC

Use variable font sizes for headings and a large font for titles.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-document-title ((t (:height 250))))
)
#+END_SRC

** Code
*** Basics
Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Roam
After much struggling with getting the org-roam buffer to follow links reasonably, the configuration below (dedicated side window, from [[https://org-roam.discourse.group/t/sidebar-roam-buffer-gets-replaced-with-org-roam-node-instead-of-updating/2162/6][this discussion]]) works well enough.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight (org-roam :type git :flavor melpa :host github :repo "org-roam/org-roam")
  :demand t ; force this to be loaded
  :custom
  (org-roam-directory "~/Dropbox/org/roam")
  :config
  (org-roam-db-autosync-mode)
  (add-hook 'org-roam-mode-hook #'visual-line-mode)
  (define-key org-roam-mode-map [mouse-1] #'org-roam-preview-visit)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (dedicated . t)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head
		    "pages/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("n" "name" plain ;; people, organizations, etc.
           "%?"
           :if-new (file+head
		    "pages/names/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("e" "podcast episode" plain
           "Episode of %?"
           :if-new (file+head
		    "pages/sources/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("s" "source" plain ;; non-academic references
           "Source: %?"
           :if-new (file+head
		    "pages/sources/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("t" "technical" plain ;; general mathy / factual information
	   "%?"
           :if-new (file+head
		    "pages/technical/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("a" "advice" plain ;; collections of tips / advice
	   "%?"
           :if-new (file+head
		    "pages/advice/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("o" "outline" plain ;; files that start to link ideas together
	   "%?"
           :if-new (file+head
		    "pages/outline/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("i" "index" plain ;; broad topics that function like tags
	   "%?"
           :if-new (file+head
		    "pages/index/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n")
           :unnarrowed t)
	  ("p" "project" plain
	   "%?"
           :if-new (file+head
		    "pages/projects/%<%Y%m%d%H%M%S>-${slug}.org"
		    "#+title: ${title}\n#+filetags: :project:\n")
           :unnarrowed t)
	  ("r" "bibliography reference" plain "%?"
           :if-new
           (file+head "pages/references/${citekey}.org" "#+title: ${author} (${year}). ${title}\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ${file}\n:END:\n")
	   :unnarrowed t)))
  (setq org-roam-dailies-directory "dailies/")
  (setq org-roam-dailies-capture-templates
	(quote (("d" "daily" plain
		 "%?"
		 :if-new (file+head
                          "%<%Y%m%d>.org"
                          "#+title: %<%Y-%m-%d (%A)>\n")
		 :unnarrowed t))))

  ;; Set key bindings.
  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
  :bind (("C-c j" . org-roam-dailies-goto-today)
	 ("C-c t" . org-roam-dailies-goto-tomorrow)
	 ("C-c y" . org-roam-dailies-goto-yesterday)
	 ("C-c n d" . org-roam-dailies-goto-date)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c f" . org-roam-dailies-goto-next-note)
	 ("C-c b" . org-roam-dailies-goto-previous-note)))
  #+END_SRC

Handy config from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/ to add roam files with the Project tag to the agenda list, so I can track TODOs within a project. I could switch to just adding everything in the new projects directory, but I like being able to exclude old projects from the agenda list by just removing the tag.
  #+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  ;; Add existing projects to agenda list on startup:
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (append org-agenda-files (my/org-roam-list-notes-by-tag "project"))))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)


  ;; And add new projects to agenda list after capture.
  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
	(add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n"
	:if-new (file+head
		 "%<%Y%m%d%H%M%S>-${slug}"
		 "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:")
	:unnarrowed t))))
)
#+END_SRC


Allow filtering by type (from subdirectory). From https://jethrokuan.github.io/org-roam-guide/. Use subdirectories to define properties of nodes.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
	(file-name-nondirectory
	 (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  ;; Display the type as a column.
  (setq org-roam-node-display-template
	(concat "${type:15} ${title:150} " (propertize "${tags:10}" 'face 'org-tag)))

  (defun klk/org-roam-find-by-type (type-name)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (string-equal type-name (org-roam-node-type node)))))

  (defun klk/org-roam-find-excluding-type (type-name)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (not (string-equal type-name (org-roam-node-type node))))))

  :general
  (klk/leader-key-def
    "n" '(:ignore t :which-key "org-roam")
    "n f" '(:ignore t :which-key "find")
    "n f A" '(org-roam-node-find :wk "all")
    "n f f" '((lambda () (interactive) (klk/org-roam-find-excluding-type "dailies")) :wk "all but dailies")
    "n f a" '((lambda () (interactive) (klk/org-roam-find-by-type "advice")) :wk "main")
    "n f m" '((lambda () (interactive) (klk/org-roam-find-by-type "pages")) :wk "main")
    "n f p" '((lambda () (interactive) (klk/org-roam-find-by-type "projects")) :wk "project")
    "n f n" '((lambda () (interactive) (klk/org-roam-find-by-type "names")) :wk "name")
    "n f s" '((lambda () (interactive) (klk/org-roam-find-by-type "sources")) :wk "source")
    "n f o" '((lambda () (interactive) (klk/org-roam-find-by-type "outline")) :wk "outline")
    "n f i" '((lambda () (interactive) (klk/org-roam-find-by-type "index")) :wk "index")
    "n f r" '((lambda () (interactive) (klk/org-roam-find-by-type "references")) :wk "reference")
    "n f t" '((lambda () (interactive) (klk/org-roam-find-by-type "technical")) :wk "technical"))
  )
#+END_SRC


  Graphical UI
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))
#+END_SRC
** Reference management
*** pdf-tools
Better pdf interactions in Emacs.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width)
  ;; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  :custom
  (pdf-annot-activate-created-annotations t "automatically annotate highlights")
)
#+END_SRC

Emacs 29's =pixel-scroll-precision-mode= doesn't seem to work with pdf-tools ([[https://github.com/vedang/pdf-tools/issues/56][issue]]). For now, work around it by turning mode off when changing to a pdf buffer, and on otherwise.
#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29") nil (progn
  (defun my/set-precision-scrolling ()
    (if (eq major-mode 'pdf-view-mode)
	(pixel-scroll-precision-mode -1)
      (pixel-scroll-precision-mode 1)))

  (add-hook 'buffer-list-update-hook #'my/set-precision-scrolling)))
#+END_SRC

*** bibtex
Set paths that will be used by multiple packages.
#+BEGIN_SRC emacs-lisp
(setq bib-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      bibtex-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      pdf-files-directory "~/Dropbox/papers/bibtex")
#+END_SRC

*** org-ref
Manage references in org mode.
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :bind (:map org-mode-map ("C-c ]" . org-ref-insert-link))
  :config
  (setq org-latex-prefer-user-labels t)
  (setq bibtex-completion-bibliography bib-files
	bibtex-completion-library-path '("~/Dropbox/Zotero/storage/")
	bibtex-completion-notes-path "~/Dropbox/org/roam/references/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath)))
  :demand
  )
#+END_SRC

*** org-roam-bibtex
Integrate bibtex with =org-roam=.

At some point the file keyword stopped being processed correctly. Possibly related to [[https://org-roam.discourse.group/t/orb-process-file-field-not-working-in-orb-templates/795/11][this]]. So for now I set =orb-process-file-keyword= to =nil=, which means the whole contents of the file field are input. Sometimes this includes an extra file (web snapshot), but it's easier to deal with than inserting nothing.
#+BEGIN_SRC emacs-lisp
(use-package org-roam-bibtex
  :after org-roam
  :bind (:map org-mode-map ("C-c n b" . orb-note-actions))
  :config
  (require 'org-ref) ; optional: if Org Ref is not loaded anywhere else, load it here
  (setq orb-preformat-keywords
      '("citekey" "title" "url" "author-or-editor" "keywords" "file" "author" "year")
      orb-process-file-keyword nil) ;; files don't appear otherwise
  (org-roam-bibtex-mode)
  :demand)
#+END_SRC

*** org-noter
Attach notes to locations in the pdf.
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org-roam
  :config
  (setq org-noter-notes-window-location 'horizontal-split
	org-noter-always-create-frame nil
	org-noter-hide-other nil
	org-noter-notes-search-path 'org-roam-directory
	org-noter-doc-split-fraction '(0.66 . 0.5)
   )
  :bind (:map org-mode-map ("C-c n n" . org-noter))
  )
#+END_SRC

*** Anki
#+BEGIN_SRC emacs-lisp
(use-package org-anki
  :config
  (setq org-anki-default-deck "Default")
  :bind (("C-c s" . org-anki-sync-entry))
  )
#+END_SRC
** Calendar
  Set up syncing with google calendar  following https://github.com/emacsmirror/org-gcal.

*** calfw
  Basic calfw config from https://github.com/kiwanami/emacs-calfw
  #+BEGIN_SRC emacs-lisp
    (use-package calfw
      :init
      (setq cfw:fchar-junction ?╋
	    cfw:fchar-vertical-line ?┃
	    cfw:fchar-horizontal-line ?━
	    cfw:fchar-left-junction ?┣
	    cfw:fchar-right-junction ?┫
	    cfw:fchar-top-junction ?┯
	    cfw:fchar-top-left-corner ?┏
	    cfw:fchar-top-right-corner ?┓
	    calendar-week-start-day 1 ; 0:Sunday, 1:Monday
	    ))
    (use-package calfw-org)
    (use-package calfw-ical)
    (use-package calfw-cal)

  (defun klk/open-calendar ()
    "CFW config for my calendars."
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "DarkGreen")
      (cfw:ical-create-source "gcal" (klk/get-gcal) "Blue")
     )))
  #+END_SRC

*** org-gcal
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :config
  (setq org-gcal-client-id (klk/get-gcal-client-id)
	org-gcal-client-secret (klk/get-gcal-client-secret)
	org-gcal-fetch-file-alist `((,(klk/get-gcal-id) . "~/Dropbox/org/gtd/gcal.org")
				    (,(klk/get-gcal-id-school) . "~/Dropbox/org/gtd/gcal-school.org"))))
#+END_SRC
** babel

#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "'" '(org-edit-special :wk "edit")
    "-" '(org-babel-demarcate-block :wk "split block")
    "z" '(org-babel-hide-result-toggle :wk "fold result")
    "Z" '(org-babel-result-hide-all :wk "fold all results")))
#+END_SRC

*** venv
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :init
  (venv-workon "base")
  )
#+END_SRC

*** jupyter
[[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] requires [[https://github.com/nnicandro/emacs-zmq][emacs-zmq]]. To install =emacs-zmq=, after running the following, go to =straight/build/zmq= and run =make=.

May need to first run =sudo dnf install libstdc++-static zeromq-devel libtool=.

#+BEGIN_SRC emacs-lisp
(use-package zmq)

(use-package jupyter
  :config
  (require 'jupyter-julia))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

Fix for ansi color sequence issue from https://github.com/nnicandro/emacs-jupyter/issues/380
#+BEGIN_SRC emacs-lisp
(defun jupyter-ansi-color-apply-on-region (begin end)
  (ansi-color-apply-on-region begin end t))
#+END_SRC

*** load languages
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (jupyter . t)
   (octave . t)
   ;; other languages..
   ))
#+END_SRC

** images
Slightly easier way to interact with krita or xournal++ files in buffers. Still have to create the files separately, though. These just allow clicking on a link in an org buffer to open an existing image file.
*** org-krita
#+BEGIN_SRC emacs-lisp
(use-package org-krita
  :ensure t
  :straight (org-krita :host github :repo "lepisma/org-krita" :files ("*.el" "resources"))
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))
#+END_SRC
*** org-xournalpp
#+BEGIN_SRC emacs-lisp
(defun get-xournal-template ()
  (let ((template-file "~/Dropbox/org/org-xournalpp/resources/"))
    (read-file-name nil template-file)))

(use-package org-xournalpp
  :ensure t
  :straight (org-xournalpp :host gitlab :repo "vherrmann/org-xournalpp" :files ("*.el" "resources"))
  :config
  (add-hook 'org-mode-hook 'org-xournalpp-mode)
  (setq org-xournalpp-template-getter 'get-xournal-template)
)
  ;; (setq 'org-xournalpp-image-type 'png)
#+END_SRC
* Programming
** lsp-mode
*** basic setup
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-l")
  :hook (
         (python-mode . lsp)
         ;; (lsp-mode . lsp-enable-which-key-integration))
	 )
  :commands lsp)

(use-package lsp-ui :commands lsp-ui-mode)
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)

(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                        (require 'lsp-pyright)
                        (lsp-deferred))))
#+END_SRC
*** python
Install the python language server.
#+BEGIN_SRC sh
pip install python-lsp-server[all]
pip install pyright
#+END_SRC
** Flycheck
  Syntax checking support
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish
  :init
  (global-flycheck-mode)
  :config
  (define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive))
#+END_SRC

** COMMENT Company
  Auto-completion support
#+BEGIN_SRC emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+END_SRC

** Python
  Basic elpy config from the docs. Deferring loading to improve emacs startup time.
  Use system virtualenv-path where black is installed.
#+BEGIN_SRC emacs-lisp
;; Remove guess indent python message
(setq python-indent-guess-indent-offset-verbose nil)

(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
  :config
  (setq elpy-rpc-virtualenv-path 'system))
#+END_SRC

Auto-format code on save.
#+BEGIN_SRC emacs-lisp
(add-hook 'elpy-mode-hook (lambda ()
                            (add-hook 'before-save-hook
                                      'elpy-black-fix-code nil t)))
#+END_SRC
