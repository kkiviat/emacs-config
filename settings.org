#+TITLE: Base emacs configuration
#+DESCRIPTION: Emacs configuration
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent
Enable lexical binding (needed for some of the org-roam config). *This must be at the top of the file.*
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
#+END_SRC

* Basics
** Utilities
#+BEGIN_SRC emacs-lisp
(defun klk/save-buffer-and-exit()
  "Save current buffer and kill window"
  (interactive)
  (save-buffer)
  (kill-buffer-and-window))
#+END_SRC

[[https://github.com/bbatsov/crux][Crux]] has various useful functions.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :straight (crux :type git :host github :repo "bbatsov/crux")
  :bind
  ("C-c o" . crux-open-with)
  ("C-x C-r" . crux-rename-buffer-and-file)
  ("C-x C-k" . crux-delete-buffer-and-file))
#+END_SRC
** Sensible Defaults
sensible-defaults.el is from [[https://github.com/hrs/sensible-defaults.el][here]].
Enable everything, but disable the visual bell function.
#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "sensible-defaults.el" user-emacs-directory))
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(setq ring-bell-function 'ignore)
#+END_SRC

** Help
*** which-key
Show possible command completions after typing a prefix.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (setq which-key-separator " ")
  (setq which-key-idle-delay 0.5)
 )
#+END_SRC
*** helpful
Get more information about functions, etc.
#+BEGIN_SRC emacs-lisp
(use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Windows
Hide window chrome
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode 0)
 (menu-bar-mode 0)
 (scroll-bar-mode -1)
 #+END_SRC

 Use this to make the things actually maximized (see https://stackoverflow.com/questions/27758800/why-does-emacs-leave-a-gap-when-trying-to-maximize-the-frame)
 #+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
 #+END_SRC

Start with window maximized and partially transparent. (Disable maximization now since I'm using window tiling.)
Transparency toggling / setting code based on [[https://www.reddit.com/r/emacs/comments/9e98hp/translucent_background/e5pi7bl/][this reddit post]].
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))

(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(60 60))))
(global-set-key (kbd "<f9>") 'toggle-transparency)

;; Set transparency of emacs
(defun transparency (arg &optional active)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nEnter alpha value (1-100): \np")
  (let* ((elt (assoc 'alpha default-frame-alist))
         (old (frame-parameter nil 'alpha))
         (new (cond ((atom old)     `(,arg ,arg))
                    ((eql 1 active) `(,arg ,(cadr old)))
                    (t              `(,(car old) ,arg)))))
    (if elt (setcdr elt new) (push `(alpha ,@new) default-frame-alist))
    (set-frame-parameter nil 'alpha new)))
#+END_SRC

Allows undo and redo of changes in window configurations.
By default, undo is bound to *C-c <left>* and redo to *C-c <right>*.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode 1))
#+END_SRC

Set up keybinding for =ace-window= to quickly jump to a window.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window))
#+END_SRC

*** popper
Install https://github.com/karthink/popper to be able to quickly bring up and dismiss certain buffers as popups.
#+BEGIN_SRC emacs-lisp
(use-package popper
  :after projectile
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
	  "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
          "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
          "^\\*term.*\\*$"   term-mode   ;term as a popup
          "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popupp
          help-mode
          compilation-mode))
  (setq popper-group-function #'popper-group-by-projectile)
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+END_SRC

*** Window rotation

Use code from https://www.emacswiki.org/emacs/TransposeFrame, which enables flipping, transposing, and rotating frames.

#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "transpose-frame.el" user-emacs-directory))
(require 'transpose-frame)
#+END_SRC

** Scrolling
Emacs 29 has smooth scrolling natively.
#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29")
      (progn
	(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; two lines at a time
	(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
	(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
	(setq scroll-step 1) ;; keyboard scroll one line at a time
	(setq auto-window-vscroll nil)
	(setq fast-but-imprecise-scrolling t)
	(setq scroll-conservatively 101)
	)
    (progn
      (pixel-scroll-precision-mode)
      (setq pixel-scroll-precision-large-scroll-height 40.0)
      (setq pixel-scroll-precision-interpolation-factor 30)
      (setq scroll-conservatively 101) ;; keyboard scroll one line at a time
      )
    )
#+END_SRC

** COMMENT beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :init
  (beacon-mode 1))
#+END_SRC

** Line numbers
  Display line numbers except in certain modes. From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode org-agenda-mode pdf-view-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+END_SRC

** Keybindings
*** Evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
  (define-key evil-motion-state-map (kbd ";") 'evil-ex)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'helpful-mode 'emacs)
  (evil-set-initial-state 'special-mode 'emacs)
  (evil-set-initial-state 'vterm-mode 'insert)
  (evil-set-initial-state 'messages-buffer-mode 'normal))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Use ESC to cancel everything
#+END_SRC

Unbind RET from evil mode so it can still be used to follow org links. See https://emacs.stackexchange.com/a/46377. Also unbind =evil-mouse-drag-region= as it causes unintended highlighting (see https://github.com/emacs-evil/evil/issues/936)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map [down-mouse-1] nil))
#+END_SRC

Additional evil keybindings for other parts of Emacs.
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list
        (remove 'outline evil-collection-mode-list))
  (evil-collection-init))
#+END_SRC

Avy-style jumping for evil motion commands. Type space followed by a motion key then type the letters corresponding to the desired candidate target.
#+BEGIN_SRC emacs-lisp
(use-package evil-easymotion
  :config
  (evilem-default-keybindings "SPC"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+END_SRC
*** General
Based on https://www.lucacambiaghi.com/vanilla-emacs/readme.html.

#+BEGIN_SRC emacs-lisp
(defun klk/yank-file-path ()
  (interactive)
  (kill-new (buffer-file-name)))
#+END_SRC

Utility to get the ROAM_REFS citekey from literature notes.

#+BEGIN_SRC emacs-lisp
(defun klk/get-roam-ref ()
  "Attempts to read the file ROAM_REFS."
  (save-excursion
    (goto-char (point-min))
    (let ((ref (org-entry-get nil "ROAM_REFS")))
      (when (and ref (not (string= "" ref)))
	ref))))

(defun klk/yank-roam-ref ()
  (interactive)
  (kill-new (klk/get-roam-ref)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :config
  (general-auto-unbind-keys)
  (general-create-definer klk/leader-key-def :prefix "M-SPC")
  (general-create-definer klk/leader-key-def-major-mode
    :states '(normal visual motion emacs insert)
    :keymaps 'override
    :prefix "M-,")
  (klk/leader-key-def
    ;; Window management
    "w" '(:ignore t :which-key "window")
    "wl" 'windmove-right
    "wh" 'windmove-left
    "wk" 'windmove-up
    "wj" 'windmove-down
    "wR" 'winner-redo
    "wd" 'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wU" 'winner-undo
    "wR" 'winner-redo
    "wm" '(delete-other-windows :which-key "maximize")
    "wr" 'rotate-frame-clockwise
    "wh" 'split-window-below
    "wv" 'split-window-right
    "wt" 'transparency

    ;; Files
    "f" '(:ignore t :which-key "files")
    "fy" 'klk/yank-file-path
    "fk" '(crux-delete-buffer-and-file :which-key "delete current file")
    "fr" '(crux-rename-buffer-and-file :which-key "rename current file")
    "fo" '(crux-open-with :which-key "open externally")
    "ff" '(find-file :which-key "find file")

    "," 'previous-buffer
    "." 'next-buffer

    ;; Yanking
    "y" '(:ignore t :which-key "yank")
    "yf" 'klk/yank-file-path
    "yr" 'klk/yank-roam-ref

    ;; Themes
    "t" 'klk-choose-theme :which-key "themes"

    ;; Utilities
    "q" 'klk/save-buffer-and-exit

    "r"'(:ignore t :which-key "refile")
    "rr" '(org-refile :which-key "choose heading")
    "rf" '(klk/refile-in-same-file :which-key "same file")
    "rd" '((lambda () (interactive) (org-reverse-datetree--refile-to-file (buffer-file-name))) :which-key "datetree")

    "k" '(:keymap bookmark-map :which-key "bookmarks")

    ;; Jump around
    "gh" #'ap/avy-org-goto-to-heading-timer
    "gg" #'avy-goto-char-timer
    "gl" #'avy-goto-line
    "gp" #'avy-pop-mark))

#+END_SRC
** Selection
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :general ("C-'"  'er/expand-region))
#+END_SRC

** Text
Make the text bigger by default. (sensible-defaults binds font resize to C-- and C-+)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 110)
#+END_SRC

Default to visual line mode for some modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory (expand-file-name "themes" user-emacs-directory))
(setq custom--inhibit-theme-enable nil)
#+END_SRC

*** fonts
Enable changing font face per buffer. From https://www.emacswiki.org/emacs/FacesPerBuffer.

ETbb font from https://ctan.org/pkg/etbb

Office Code Pro from https://github.com/nathco/Office-Code-Pro

SF Pro font from https://github.com/sahibjotsaggu/San-Francisco-Pro-Fonts

Put fonts in =~/.local/share/fonts= and run =fc-cache -f -v= to install.

Set the default variable and fixed-pitch fonts.
#+BEGIN_SRC emacs-lisp
(when (member "Office Code Pro" (font-family-list))
  (set-face-attribute 'default nil :font "Office Code Pro"))

(when (member "SF Pro Display" (font-family-list))
  (set-face-attribute 'variable-pitch nil :font "SF Pro Display"))

(when (member "Office Code Pro" (font-family-list))
  (set-face-attribute 'fixed-pitch nil :font "Office Code Pro"))
#+END_SRC

Functions to change fonts. "default" includes org buffers when =fixed-pitch-mode= is not enabled. "fixed" controls code blocks, etc. "variable" controls the font in org buffers when =fixed-pitch-mode= is enabled.
#+BEGIN_SRC emacs-lisp
(defun klk-change-font (choice)
  "Top-level function to choose the class of font to change then change it"
  (interactive
   (let ((choices '("default" "fixed" "variable")))
     (list (completing-read "Choose: " choices nil t))))
  (command-execute
   (cond ((string= choice "default") 'klk/change-default-font-family)
	 ((string= choice "fixed") 'klk/change-fixed-font-family)
	 ((string= choice "variable") 'klk/change-variable-font-family)))
  choice)

(defun klk/change-variable-font-family (choice)
  "Change the font used for variable width text"
  (interactive
   (let ((choices '("Source Sans 3" "ETbb" "SF Pro Display")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'variable-pitch nil :family choice)
  choice)

(defun klk/change-fixed-font-family (choice)
  "Change the font used for fixed width (including default) text"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Free Mono" "Source Code Pro" "Iosevka Fixed Slab" "Office Code Pro" "JetBrains Mono")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'fixed-pitch nil :family choice)
  choice)

(defun klk/change-default-font-family (choice)
  "Change the font used for default text (used in org buffers when not variable pitch)"
  (interactive
   (let ((choices '("DejaVu Sans Mono" "Source Sans Mono" "FreeMono" "Source Code Pro" "Office Code Pro" "Hack" "Iosevka Fixed Slab" "JetBrains Mono")))
     (list (completing-read "Choose: " choices nil t))))
  (set-face-attribute 'default nil :family choice)
  choice)
#+END_SRC


Enable changing font per buffer.
#+BEGIN_SRC emacs-lisp
(defun klk-buffer-set-font-family (family)
  "Set font to the specified family in current buffer"
  (setq buffer-face-mode-face `(:family ,family))
  (buffer-face-mode))
#+END_SRC

Functions to toggle =variable-pitch-mode= it for all org buffers.
#+BEGIN_SRC emacs-lisp
(defun klk-org-variable-pitch-on ()
  (interactive)
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode 1))))
  (buffer-list))
  )

(defun klk-org-variable-pitch-off ()
  (interactive)
  (remove-hook 'org-mode-hook 'variable-pitch-mode)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (variable-pitch-mode -1))))
  (buffer-list))
  )

(defun klk-toggle-variable-pitch-org-buffers ()
  (interactive)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (call-interactively 'variable-pitch-mode))))
  (buffer-list))
  )
#+END_SRC

Use monospace font in code blocks and tables.  From https://github.com/jparcill/emacs_config/blob/master/config.el
#+BEGIN_SRC emacs-lisp
(defun klk-set-org-block-fixed-pitch ()
  (interactive)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  )
#+END_SRC

*** Mixed pitch mode
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode)
  (org-roam-mode . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch nil :height 1.2))
#+END_SRC

*** Olivetti mode
#+BEGIN_SRC emacs-lisp
(use-package olivetti
    :general
    (klk/leader-key-def
      "m o" '(olivetti-mode :wk "olivetti"))
    :init
    (setq olivetti-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t)
    :hook (text-mode . (lambda () (olivetti-mode 1))))
#+END_SRC

*** Load themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :defer t)
#+END_SRC


Config for quiet theme from https://github.com/quiettheme/emacs.
#+BEGIN_SRC emacs-lisp
(setq doom-quiet-dark-padded-modeline t)
(setq doom-quiet-dark-brighter-modeline t)
(setq doom-quiet-dark-brighter-comments t)
(setq doom-quiet-light-padded-modeline t)
(setq doom-quiet-light-brighter-comments t)
#+END_SRC

*** Configure modus themes
#+BEGIN_SRC emacs-lisp
(setq modus-themes-region '(accented bg-only)
      modus-themes-mode-line '(accented)
      modus-themes-completions 'opinionated
      modus-themes-org-blocks 'tinted-background
      modus-themes-bold-constructs t
      modus-themes-italic-constructs t)
#+END_SRC
*** Modeline
**** COMMENT Doom modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
  (setq doom-modeline-height 30)
  (doom-modeline-mode 1)
  )
#+END_SRC

**** Doom Nano Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-nano-modeline
  :straight (doom-nano-modeline :type git :host github :repo "ronisbr/doom-nano-modeline")
  :config
  (doom-nano-modeline-mode 1))
#+END_SRC

*** toggle themes
Spring theme uses fonts from https://www.ishouldbemoppingthefloor.com/2015/02/20-free-spring-fonts.html
#+BEGIN_SRC emacs-lisp
(defun klk-disable-all-themes ()
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme)))

(defun klk-choose-theme ()
  (interactive)
  (let ((choices '(("Bespoke" . (lambda () (load-theme 'bespoke t)))
		   ("Clean"  . (lambda () (load-theme 'clean t)))
		   ("Nano Light"  . (lambda () (load-theme 'doom-nano-light t)))
		   ("One" . (lambda () (load-theme 'doom-one t)))
		   ("Modus" . (lambda () (load-theme 'modus-vivendi t)))
		   ("Leuven" . (lambda () (load-theme 'leuven t)))
		   ("Dark" . (lambda () (load-theme 'doom-quiet-dark t)))
		   ("Light" . (lambda () (load-theme 'doom-quiet-light t)))
		   ("Dark Yellow" . (lambda () (load-theme 'dark-yellow t)))
                   ("DefaultPlus"  . (lambda () (load-theme 'defaultplus t))))))
    (let ((choice (alist-get
		   (completing-read "Choose: " choices) choices nil nil 'equal)))
      (klk-disable-all-themes)
      (funcall choice)
      ;; (klk-set-org-block-fixed-pitch)
      )
    )
  )
#+END_SRC

Set up hook for theme changes that resets some faces.

Also add a method to refresh $\LaTeX$ previews in all open org buffers, but don't call it on the hook because it's too slow. Call it manually if needed.
=org-latex-preview= needs a =C-u C-u= prefix argument to reload for the whole buffer. =C-u= corresponds to 4, =C-u= corresponds to 16.
#+BEGIN_SRC emacs-lisp
(defun klk/refresh-latex-previews ()
  (interactive)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
	      (let ((current-prefix-arg '(16))) ; C-u C-u
		(call-interactively 'org-latex-preview)))))
  (buffer-list)))

(defun klk-refresh-org-buffer-colors (&rest args)
  ;; (klk/refresh-latex-previews)
  ;; Reset colors of window divider
  (dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background))
  (set-face-background 'fringe (face-attribute 'default :background))
  ;; reset thin modeline
  ;; (set-face-attribute 'mode-line nil :height 10)
  ;; (set-face-attribute 'header-line nil :height 128)
  ))

(advice-add 'load-theme :after 'klk-refresh-org-buffer-colors)
#+END_SRC

*** Set up current theme
#+BEGIN_SRC emacs-lisp
(load-theme 'modus-operandi t)
;; (klk-set-org-block-fixed-pitch) ; default
#+END_SRC

** Prettify
*** org-modern
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :straight (org-modern :type git :host github :repo "minad/org-modern")
  :config
  (setq org-modern-star nil)
  )
#+END_SRC

Include their config to add padding to buffers and tweak a few other things.
#+BEGIN_SRC emacs-lisp
(modify-all-frames-parameters
 '((right-divider-width . 20)
   (internal-border-width . 20)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))


(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-pretty-entities-include-sub-superscripts nil
 org-ellipsis "…"
 org-fontify-quote-and-verse-blocks t

 ;; Agenda styling
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")
#+END_SRC

Hide category prefix on tasks.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t% s")
        (todo   . " ")
        (tags   . " %i %-12:c")
        (search . " %i %-12:c")))
#+END_SRC

*** icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode)
  :config (setq all-the-icons-dired-monochrome nil))
#+END_SRC
*** Colors
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode))
#+END_SRC
*** Prettify symbols
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq-default prettify-symbols-alist '(
				 ("[#A]" . "⚑")
				 ("[#B]" . "⚐")
				 ("#+BEGIN_QUOTE" . "❝")
				 ("#+END_QUOTE" . "❞")
				 ("#+begin_quote" . "❝")
				 ("#+end_quote" . "❞")
				 ("#+BEGIN_SRC" . "❯")
				 ("#+END_SRC" . "❮")
				 ("#+begin_src" . "❯")
				 ("#+end_src" . "❮")
				 (":END:" . "―")
				 ("#+TITLE: " . "")
				 ("#+title: " . "")
				 ("#+RESULTS:" . "🠶")))
  :hook (org-mode . prettify-symbols-mode))
#+END_SRC

** COMMENT Flyspell

Disabled because it makes a huge difference in performance.

  #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight nil
  :hook
  (text-mode . flyspell-mode))
  #+END_SRC

** Highlighting
  Highlight all occurrences of word under the cursor. Config from http://xenodium.com/emacs-highlight-symbol-mode/
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (set-face-attribute 'highlight-symbol-face nil
			:background "#D0D0D0"
			:foreground "default")
    (setq highlight-symbol-idle-delay 0)
    (setq highlight-symbol-on-navigation-p t)
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
  #+END_SRC

** electric-pair-mode

Automatically match parentheses, etc.

#+BEGIN_SRC emacs-lisp
;; Exclude pairing '<' and '(' symbols
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (if (or (char-equal c ?\<) (char-equal c ?\()) t (electric-pair-default-inhibit c))))
(electric-pair-mode 1)
#+END_SRC

Add $ as a paired symbol for org mode. From https://emacs.stackexchange.com/a/2559

#+BEGIN_SRC emacs-lisp
(defvar org-electric-pairs '((?$ . ?$)) "Electric pairs for org-mode.")

(defun org-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))

(add-hook 'org-mode-hook 'org-add-electric-pairs)
#+END_SRC

** Backups / saves
From [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]]
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

Save history between sessions.
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
#+END_SRC


** Undo tree
More typical undo mode. Adds C-/ mapping to undo and C-? mapping to redo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil))
#+END_SRC


** Projects
*** Projectile
Define some helper methods to support my current project notes workflow. I like to have roam files corresponding to projects for high-level information, but often there will be a separate (projectile-managed) directory for various project-related files, including a file for notes and tasks. I put a property in the roam file with the projectile project root, and define here a method to jump to the appropriate notes file. That uses the =PROJECT_ROOT= property if it exists, otherwise the current project root. There is also a method to insert the root of a chosen project as a property in the current file.
#+BEGIN_SRC emacs-lisp
(use-package rg) ;; ripgrep for searching in projectile

(defvar klk/org-project-file-base "notes.org")

(defun klk/get-project-from-property ()
  (interactive)
  "Attempts to read the project root path from a property."
  (save-excursion
    (goto-char (point-min))
    (let ((root (org-entry-get nil "PROJECT_ROOT")))
      (when (and root (not (string= "" root)))
	root))))

(defun klk/org-project-notes-file ()
  "Get the project notes file path from a property if it is defined. Otherwise use the current projectile project"
  (let ((project-root
	 (or (klk/get-project-from-property) (projectile-project-root))))
    (expand-file-name klk/org-project-file-base project-root)))

(defun klk/get-project-root ()
  "Returns root of selected project."
  (projectile-load-known-projects)
  (let ((choices projectile-known-projects))
    (completing-read "Choose: " choices)))

(defun klk/yank-project-root ()
  (interactive)
  (kill-new (klk/get-project-root)))

(defun klk/insert-project-root-property ()
  "Insert the root of the selected project as a property in current file."
  (interactive)
  (save-excursion
    (let ((root (klk/get-project-root)))
      (goto-char (point-min))
      (org-entry-put nil "PROJECT_ROOT" root))))

(defun klk/open-org-project-notes-file ()
  "Finds the notes file for the project, and opens it to the beginning of a reverse datetree if it exists"
  (interactive)
  (find-file (klk/org-project-notes-file))
  (goto-char (point-min))
  ;; Jump to first heading consisting of the current year
  ;; (this should be where the most recent entries are in the reverse datetree)
  (search-forward-regexp (format "^\\*+ [0-9][0-9][0-9][0-9]$") nil t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :general
  (klk/leader-key-def
    "p" '(:keymap projectile-command-map :which-key "project")
    "pe" '(projectile-run-eshell :which-key "project eshell")
    "pn" '(klk/open-org-project-notes-file :which-key "project notes")
    "py" '(klk/yank-project-root :which-key "yank root"))
    :config
  (setq projectile-project-search-path '(("~/Dropbox/org/" . 3) ("~/" . 2) ("~/openfoam/" . 3) ("~/Dropbox/classes/" . 3)))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :general
  (klk/leader-key-def
    "pb" '(consult-projectile-switch-to-buffer :which-key "project buffer")
    "pf" '(consult-projectile-find-file :which-key "project file")))
#+END_SRC

*** Perspective
=perspective.el= allows saving multiple buffer lists / window configurations and quickly switching between them.
- =C-z s= switch to or create new perspective
- =C-z [n|p]= switch to next or previous perspective
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)
  :custom
  (persp-mode-prefix-key (kbd "C-z"))
  :init
  (persp-mode)
  :config
  (setq persp-state-default-file "~/Dropbox/org/.persp")
  (setq persp-modestring-short t) ;; only show current persp in modeline
  (add-hook 'kill-emacs-hook #'persp-state-save))

(use-package persp-projectile
  :after projectile)
#+END_SRC
** Completion
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (use-package yasnippet-snippets)
  (yas-global-mode t)
  (add-to-list #'yas-snippet-dirs (expand-file-name "my-snippets" user-emacs-directory))
  (yas-reload-all)'
  :diminish yas-minor-mode)
#+END_SRC

*** Yasnippet Company Integration
Taken from [[https://emacs.stackexchange.com/a/7909. Use =C-o= for yasnippet expansion to avoid conflict with company-mode.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-o" 'aya-open-line)

(defun aya-open-line ()
  "Call `open-line', unless there are abbrevs or snippets at point.
In that case expand them.  If there's a snippet expansion in progress,
move to the next field. Call `open-line' if nothing else applies."
  (interactive)
  (cond ((expand-abbrev))

        ((yas--snippets-at-point)
         (yas-next-field-or-maybe-expand))

        ((ignore-errors
           (yas-expand)))

        (t
         (open-line 1))))
#+END_SRC
*** Hippie Expand
Insert proposed expansion with =M-/=. Can be used to, e.g., repeat previous lines. Good for expanding file names.
#+BEGIN_SRC emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC
*** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous))
  :custom
  (vertico-cycle t))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Marginalia
Provides nice annotations for minibuffer completion options (like command descriptions and keyboard shortcuts).
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+END_SRC
*** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :general
  (klk/leader-key-def
    "s" '(:ignore t :which-key "search")
    "s s" 'consult-line
    "s o" '(consult-outline :which-key "outline")
    "s h" '(consult-org-heading :which-key "org heading")
    "s p" '(consult-ripgrep :which-key "ripgrep project")
    "b" 'consult-buffer :which-key "consult buffer")
  :config
  (autoload 'projectile-project-root "projectile"))
#+END_SRC

Quickly select another directory in minibuffer.
#+BEGIN_SRC emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+END_SRC
*** Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))


(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
*** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect 'prompt) ;; Always preselect the prompt

  :bind
  (:map corfu-map
	("SPC" . corfu-insert-separator)
   ("TAB" . corfu-next)
	("C-j" . corfu-next)
	("C-k" . corfu-previous)
   ([tab] . corfu-next)
   ("S-TAB" . corfu-previous)
   ([backtab] . corfu-previous))
  :config
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
		(bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  (evil-make-overriding-map corfu-map)
  (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
  (advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
  :init
  (global-corfu-mode))

(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC
** Latex
*** auctex

Feature name different from package name; see https://github.com/raxod502/straight.el/issues/516

#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex)
#+END_SRC

*** cdlatex

[[https://github.com/cdominik/cdlatex][cdlatex]] gives an efficient way to enter $\LaTeX$ symbols. See [[https://karthinks.com/software/latex-input-for-impatient-scholars/][Latex Input for Impatient Scholars]] for a good introduction and configuration tips.

#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :config
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook #'turn-on-cdlatex)   ; with Emacs latex mode
  (dolist (cmd '(("vc" "Insert \\vect{}" "\\vect{?}"
                  cdlatex-position-cursor nil nil t)
                 ("sfr" "Insert \\sfrac{}{}" "\\sfrac{?}{}"
                  cdlatex-position-cursor nil nil t)
                 ("abs" "Insert \\abs{}" "\\abs{?}"
                  cdlatex-position-cursor nil nil t)
                 ("equ*" "Insert equation* env"
                  "\\begin{equation*}\n?\n\\end{equation*}"
                  cdlatex-position-cursor nil t nil)
                 ("sn*" "Insert section* env"
                  "\\section*{?}"
                  cdlatex-position-cursor nil t nil)
                 ("ss*" "Insert subsection* env"
                  "\\subsection*{?}"
                  cdlatex-position-cursor nil t nil)
                 ("sss*" "Insert subsubsection* env"
                  "\\subsubsection*{?}"
                  cdlatex-position-cursor nil t nil)))
    (push cmd cdlatex-command-alist))
  :init
  (setq cdlatex-math-symbol-alist '((?F ("\\Phi"))
				    (?o ("\\omega" "\\mho" "\\mathcal{O}"))
				    (?. ("\\cdot" "\\circ"))
				    (?6 ("\\partial"))
				    (?v ("\\vee" "\\forall"))
				    (?^ ("\\uparrow" "\\Updownarrow" "\\updownarrow"))))
  (setq cdlatex-math-modify-alist '((?b "\\mathbb" "\\textbf" t nil nil)
				    (?B "\\mathbf" "\\textbf" t nil nil)
				    (?t "\\text" nil t nil nil))))
#+END_SRC

*** latex-auto-activating-snippets

https://github.com/tecosaur/LaTeX-auto-activating-snippets

Doesn't have the which-key-like suggestions and doesn't work as well in org-mode, but some of these are more convenient to type.

#+BEGIN_SRC emacs-lisp
(use-package laas
  :init
  (setq laas-accent-snippets nil)
  :hook
  (LaTeX-mode . laas-mode)
  (org-mode . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    "Span" (lambda () (interactive)
                             (yas-expand-snippet "\\Span($1)$0"))
                    ;; add accent snippets
                    :cond #'laas-object-on-left-condition
                    ";t" (lambda () (interactive) (laas-wrap-previous-object "text"))
                    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))))
#+END_SRC

** Git
*** Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit
  :straight (magit :type git :host github :repo "magit/magit"))
  #+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :init (global-git-gutter-mode +1))
#+END_SRC

** Terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

(use-package multi-vterm)
#+END_SRC

** imenu
#+BEGIN_SRC emacs-lisp
(use-package imenu
  :config
  (setq org-imenu-depth 3))
#+END_SRC

** COMMENT Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '(;(recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))
  (setq dashboard-set-navigator t)
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-navigator-buttons
        `((;; Github
           (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Github"
            "Github"
            (lambda (&rest _) (browse-url "https://github.com/kkiviat/emacs-config")))
           ;; Perspectives
           (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
            "Restore"
            "Restore"
            (lambda (&rest _) (persp-state-load persp-state-default-file)))
           ))))
#+END_SRC

** Utilities

*** explain pause mode
#+BEGIN_SRC emacs-lisp
(use-package explain-pause-mode
  :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode")
  :config
  (explain-pause-mode))
#+END_SRC

** local variables
Don't prompt me about local variables.
#+BEGIN_SRC emacs-lisp
(setq enable-local-variables t)
#+END_SRC

* Org-mode
** Basics

Save all org buffers periodically to reduce conflicts between desktop and orgzly on mobile.
#+BEGIN_SRC emacs-lisp
(run-with-idle-timer 60 t 'org-save-all-org-buffers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

Don't show blank lines between headings in folded view.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC

Unbind this from cycling through the agenda so I can use it with =expand-region=.
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-'") nil)
#+END_SRC

Most of this is from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this]] guide:

Set the org directory and method for getting the full path to an org file from its name.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/gtd")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Increase list indentation
#+BEGIN_SRC emacs-lisp
(setq org-list-indent-offset 2)
#+END_SRC

Set a sequence for list bullet symbols.
#+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
#+END_SRC

Copied from https://mstempl.netlify.app/post/beautify-org-mode/. Replace list dash / plus with bullet symbols.
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+END_SRC

Stop org files from being opened in new windows.
#+BEGIN_SRC emacs-lisp
(setq org-link-frame-setup '((file . find-file)))
#+END_SRC

** Folding

Org mode 9.6 switched to a different folding backend, and drawers are no longer folded after cycling folding in a file. This is supposed to do what I want, which is to set drawers folded by default, but it doesn't seem to be working.

#+BEGIN_SRC emacs-lisp
(setq org-hide-drawer-startup t)
#+END_SRC

 This restores the old behavior, although they warn there may be performance issues with large files.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'org-cycle-hook #'org-cycle-hide-drawers)
#+END_SRC

Alternatively, set org files to be headings-only on startup. This will start with drawers folded.

#+BEGIN_SRC emacs-lisp
;; (setq org-startup-folded 'content)
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
(defun klk/goto-last-heading ()
  "Interactively jump to end of current subtree"
  (interactive)
  (org-end-of-subtree))

(use-package org
  :general
  (:keymaps 'org-mode-map
	    "M-n" 'org-next-visible-heading
	    "M-p" 'org-previous-visible-heading
	    "M-h" 'outline-up-heading
	    "M-l" 'org-next-visible-heading
	    "M-j" 'org-forward-heading-same-level
	    "M-k" 'org-backward-heading-same-level
	    "M-K" 'org-move-subtree-up
	    "M-J" 'org-move-subtree-down
	    "M-H" 'org-promote-subtree
	    "M-L" 'org-demote-subtree)
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "ns" 'org-narrow-to-subtree :wk "narrow"
    "nw" 'widen :wk "widen"
    "gl" '(klk/goto-last-heading :wk "last heading")))
#+END_SRC

** org-ql
#+BEGIN_SRC emacs-lisp
(use-package org-ql
  :straight (org-ql :type git :host github :repo "alphapapa/org-ql"
            :files (:defaults (:exclude "helm-org-ql.el")))
  :general
  (klk/leader-key-def
    "oqr" '(klk/view-refs-by-tag :which-key "view related papers"))
  )
#+END_SRC

Wrap =org-ql-view--format-element= to display reference notes matching a tag along with their summary field. Adapted from https://www.reddit.com/r/emacs/comments/uivx1f/comment/i7gv85g/

I use a top-level heading in each reference file with the paper name, and apply any project tags to that heading. That way I can use =org-ql= to list matching papers, even thought it doesn't currently support file-level properties.

#+BEGIN_SRC emacs-lisp
(defun klk/org-ql-view-reference (orig-fun &rest args)
  "This function will intercept the original function and
   add the summary to the result as a new line.

   ARGS is `element' in `org-ql-view--format-element'"
  (if (not args)
      ""
    (let* ((element args)
           (properties (cadar element))
           (result (apply orig-fun element))
           (summary (plist-get properties :SUMMARY)))
      (concat result "\n\n" summary)
      )))

(defun klk/view-refs-by-tag ()
  (interactive)
  (require 'org-ql)
  (advice-add 'org-ql-view--format-element :around #'klk/org-ql-view-reference)
  (let ((tag (completing-read "Choose tag:" (org-get-buffer-tags))))
  (org-ql-search
    (directory-files-recursively (org-roam-path "references") "\\.org$")
    `(tags-local ,tag)
    :sort nil
    :super-groups '((:auto-category t))))
  (advice-remove #'klk/org-ql-view-reference 'org-ql-view--format-element))
#+END_SRC
** Sidebar
The tree sidebar provides an outline on the left that you can use to jump around the file. The regular sidebar on the right shows TODO items in the file.
#+BEGIN_SRC emacs-lisp
(use-package org-sidebar
  :straight (org-sidebar :type git :host github :repo "alphapapa/org-sidebar")
  :bind (("<f5>" . org-sidebar-tree-toggle)
	 ("<f6>" . org-sidebar-toggle))
  )
#+END_SRC
** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook
  ('org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
** Indentation
Indent org files by default
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

This draws vertical lines under heading bullets. Add a function here to reset the pipe faces when loading a theme, since otherwise they won't change and it will look bad.
#+BEGIN_SRC emacs-lisp
  (use-package org-visual-indent
    :straight (org-visual-outline :type git :host github :repo "legalnonsense/org-visual-outline")
    :hook
    (org-mode . org-visual-indent-mode)
    ;; (org-mode . org-dynamic-bullets-mode)
    :config
    (defun klk/refresh-pipe-colors (&rest args)
      (set-face-background 'org-visual-indent-blank-pipe-face (face-attribute 'default :background))
      (set-face-background 'org-visual-indent-pipe-face (face-attribute 'default :foreground)))

    (advice-add 'load-theme :after 'klk/refresh-pipe-colors))
#+END_SRC

Don't hide stars since this gets rid of bullets as well, and I have leading stars hidden anyway.
#+BEGIN_SRC emacs-lisp
(setq org-indent-mode-turns-on-hiding-stars nil)
#+END_SRC

** Export
Enable using :ignore: in a heading to leave off the heading (but not content) of a section in export.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+END_SRC

Allow overriding variable values in buffer for export (using =#+BIND: variable value=)
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

Allow formatting code blocks using minted in $\LaTeX$ export. From [[https://stackoverflow.com/questions/46438516/how-to-encapsualte-code-blocks-into-a-frame-when-exporting-to-pdf/60396939#60396939][Stack Overflow]].
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

Add support for Elsevier article format. From https://write.as/dani/writing-a-phd-thesis-with-org-mode.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
		   '("elsarticle"
		     "\\documentclass{elsarticle}
   [NO-DEFAULT-PACKAGES]
   [PACKAGES]
   [EXTRA]"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

** Refiling
Set targets for refiling. Use =C-c C-w= to refile. This determines what options you're prompted with. Includes everything in all the agenda files, plus the someday file and various list files.

#+BEGIN_SRC emacs-lisp
(defun klk/refile-in-same-file ()
  "Refile under a heading in the current file."
  (interactive)
  (let ((org-refile-targets '((nil :maxlevel . 9))))
    (org-refile)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9) ;; refile in current file
			   (org-agenda-files :maxlevel . 3)
                           ("someday.org" :level . 1)
			   ("l-media.org" :maxlevel . 2)
			   ("l-ideas.org" :maxlevel . 2)))
#+END_SRC

Include the file name in the outline path to allow refiling as a top-level heading.
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Create ids for links so they will work even if you move them across files.
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-clone-delete-id t)
#+END_SRC

** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cC" 'klk/open-calendar)
#+END_SRC

** Tables
Functions to jump between tables in a buffer. Taken from [[https://www.reddit.com/r/orgmode/comments/ot8g0j/orgnexttable_and_orgprevioustable_jump_to/][reddit]].
#+BEGIN_SRC emacs-lisp
(defun org-next-table (&optional arg)
  "Jump to the next table.

With a prefix argument ARG, jump forward ARG many tables."
  (interactive "p")
  (cl-loop
     for n below (abs arg)
     with backward = (< arg 0)
     with search-fn = (if backward #'re-search-backward #'re-search-forward)
     do
       (setq pt (point))
       (when (org-at-table-p)
         (funcall search-fn org-table-border-regexp nil :move))
     if (funcall search-fn org-table-line-regexp nil t) do
       (when (org-invisible-p)
         (org-reveal t)
         (org-show-entry)
         (unless (org-at-table-p)
           (cl-decf n)))
     else return (goto-char pt)
     finally (when backward
               (when (funcall search-fn org-table-border-regexp nil :move)
                 (next-line))
               (forward-char))))

(defun org-previous-table (&optional arg)
  "Jump to the previous table.

With a prefix argument ARG, jump backward ARG many tables."
  (interactive "p")
  (org-next-table (- arg)))
#+END_SRC

** Images
Make files start with inline images loaded, and add a hook to display them after executing a code block to display resulting graphs.
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

Set this to =nil= to allow customizing image preview size with something like:
=#ATTR_ORG: :width 200=
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

*** LaTeX rendering with math-preview

Taken from [[https://daryl.wakatara.com/emacs-gtd-flow-evolved/#science-stuff][this nice config]].

[[https://gitlab.com/matsievskiysv/math-preview][math-preview]] uses MathJax to display LaTeX. It has an external dependency, but it makes rendering much faster.

#+BEGIN_SRC emacs-lisp
(use-package math-preview
  :general
  (klk/leader-key-def
    "m p" '(math-preview-all :which-key "latex preview"))
	:custom
    (math-preview-scale 1.25)
    (math-preview-tex-marks-inline
			'(("$" "$")))
    (math-preview-tex-marks
	 '(("\\begin{equation}" "\\end{equation}")
		 ("\\begin{equation*}" "\\end{equation*}")
		 ("\\begin{align}" "\\end{align}")
		 ("\\begin{align*}" "\\end{align*}")
		 ("$$" "$$")
		 ))
    ;; Remove labels to avoid error when re-evaluating
    ;; This is supposed to be a list of functions, but it doesn't
    ;; seem to work if there's more than one. But the default value
    ;; doesn't seem important.
    (math-preview-tex-preprocess-functions '((lambda (x)
					       (puthash 'string
							(s-replace-regexp "\\label{.+}" ""
									  (gethash 'string x))
							x)))))
;; (add-hook 'org-mode-hook #'math-preview-all)
(defalias #'org-latex-preview #'math-preview-at-point)
(defalias #'org-clear-latex-preview #'math-preview-clear-region)
#+END_SRC

*** org-fragtog

Automatically disable LaTeX images when the cursor is on them, and re-enable after leaving.

#+BEGIN_SRC emacs-lisp
(use-package org-fragtog
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+END_SRC


*** org-download
Note: need =xclip= installed for =org-download-clipboard=.
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :general
  (klk/leader-key-def
    "d" '(:ignore t :which-key "org-download")
    "d s" '(org-download-screenshot :which-key "screenshot")
    "d c" '(org-download-clipboard :which-key "clipboard"))
  :custom
  (org-download-heading-lvl nil)
  (org-download-screenshot-method "spectacle -br -o %s")
  (org-download-image-dir "images"))
#+END_SRC

** Roam
#+BEGIN_SRC emacs-lisp
(defvar org-roam-dir "~/Dropbox/org/roam")
(defvar org-roam-image-dir "~/Dropbox/org/roam/images/")
(defvar org-roam-attachments-dir "~/Dropbox/org/roam/attachments/")
(defun org-roam-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-roam-dir) filename))

(use-package org-roam
  :straight (org-roam :type git :flavor melpa :host github :repo "org-roam/org-roam")
  :demand t ; force this to be loaded
  :custom
  (org-roam-directory org-roam-dir)
  :config
  (org-roam-db-autosync-mode)
  (add-hook 'org-roam-mode-hook #'visual-line-mode)
  (define-key org-roam-mode-map [mouse-1] #'org-roam-preview-visit)
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head
		    "%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("t" "technical" plain
           "%?"
           :if-new (file+head
		    "technical/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("s" "source" plain ;; non-academic references
           "Source: %?"
           :if-new (file+head
		    "references/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("h" "howto" plain
	   "%?"
           :if-new (file+head
		    "howto/%<%Y%m%dT%H%M%S>--${slug}.org"
		    "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
	  ("r" "bibliography reference" plain "%?"
           :if-new
           (file+head "references/@${citekey}.org" "#+title: @${citekey}\n${title}")
	   :unnarrowed t)))
  (setq org-roam-dailies-directory "dailies/")
  (setq org-roam-dailies-capture-templates
	(quote (("d" "daily" plain
		 "%?"
		 :if-new (file+head
                          "%<%Y-%m-%d>.org"
                          "#+title: %<%Y-%m-%d (%A)>\n")
		 :unnarrowed t)))))
  #+END_SRC

Change org-roam's slugs to use dashes instead of underscores in filename, like in Denote. Copied from [[https://www.reddit.com/r/emacs/comments/omxl6n/config_for_orgroam_v2/][this post]].
  #+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (cl-defmethod org-roam-node-slug ((node org-roam-node))
    "Return the slug of NODE."
    (let ((title (org-roam-node-title node))
          (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                             768    ; U+0300 COMBINING GRAVE ACCENT
                             769    ; U+0301 COMBINING ACUTE ACCENT
                             770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                             771 ; U+0303 COMBINING TILDE
                             772 ; U+0304 COMBINING MACRON
                             774 ; U+0306 COMBINING BREVE
                             775 ; U+0307 COMBINING DOT ABOVE
                             776 ; U+0308 COMBINING DIAERESIS
                             777 ; U+0309 COMBINING HOOK ABOVE
                             778 ; U+030A COMBINING RING ABOVE
                             780 ; U+030C COMBINING CARON
                             795 ; U+031B COMBINING HORN
                             803 ; U+0323 COMBINING DOT BELOW
                             804 ; U+0324 COMBINING DIAERESIS BELOW
                             805 ; U+0325 COMBINING RING BELOW
                             807 ; U+0327 COMBINING CEDILLA
                             813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                             814 ; U+032E COMBINING BREVE BELOW
                             816 ; U+0330 COMBINING TILDE BELOW
                             817 ; U+0331 COMBINING MACRON BELOW
                             )))
      (cl-flet* ((nonspacing-mark-p (char)
                                    (memq char slug-trim-chars))
		 (strip-nonspacing-marks (s)
					 (ucs-normalize-NFC-string
                                          (apply #'string (seq-remove #'nonspacing-mark-p
                                                                      (ucs-normalize-NFD-string s)))))
		 (cl-replace (title pair)
                             (replace-regexp-in-string (car pair) (cdr pair) title)))
	(let* ((pairs `(("[^[:alnum:][:digit:]]" . "-") ;; convert anything not alphanumeric
			;; ("__*" . "_") ;; remove sequential underscores
			;; ("^_" . "")   ;; remove starting underscore
			;; ("_$" . "")   ;; remove ending underscore
			))
               (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
          (downcase slug))))))
#+END_SRC

Handy config from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/ to add roam files with the Project tag to the agenda list, so I can track TODOs within a project. I could switch to just adding everything in the new projects directory, but I like being able to exclude old projects from the agenda list by just removing the tag.
  #+BEGIN_SRC emacs-lisp :lexical t
;; Add existing projects to agenda list on startup:
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (cl-remove-duplicates
   (mapcar #'org-roam-node-file
	   (seq-filter
	    (my/org-roam-filter-by-tag tag-name)
	    (org-roam-node-list)))
   :test 'string=))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (append org-agenda-files (my/org-roam-list-notes-by-tag "project"))))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

;; And add new projects to agenda list after capture.
(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "project")
   nil
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n"
      :if-new (file+head
	       "%<%Y%m%dT%H%M%S>--${slug}.org"
	       "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:")
      :unnarrowed t))))


(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "project"))
                     :templates '(("p" "project" plain "** TODO %?\n:PROPERTIES:\n:CREATED: %U\n:Purpose: %^{purpose}\n:Results:\n:END:\n"
                                   :if-new (file+head+olp "%<%Y%m%dT%H%M%S>--${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: :project:"
                                                          ("Tasks"))))))
#+END_SRC


Allow filtering by type (from subdirectory). From https://jethrokuan.github.io/org-roam-guide/. Use subdirectories to define properties of nodes.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :config
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
	(file-name-nondirectory
	 (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  ;; Display the type as a column.
  (setq org-roam-node-display-template
	(concat "${type:15} ${title:150} " (propertize "${tags:20}" 'face 'org-tag)))

  (defun klk/org-roam-find-by-type (type-name)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (string-equal type-name (org-roam-node-type node)))))

  (defun klk/org-roam-find-excluding-type (type-name)
    (interactive)
    (org-roam-node-find
     nil nil
     (lambda (node)
       (not (string-equal type-name (org-roam-node-type node))))))

  :general
  (klk/leader-key-def
    "n" '(:ignore t :which-key "org-roam")
    "n c" '(my/org-roam-capture-task :wk "capture task")
    "n l" '(org-roam-buffer-toggle :wk "backlinks")
    "n p" '(my/org-roam-find-project :wk "project")
    "n j" '(org-roam-dailies-goto-today :wk "today")
    "n t" '(org-roam-dailies-goto-tomorrow :wk "tomorrow")
    "n y" '(org-roam-dailies-goto-yesterday :wk "yesterday")
    "n d" '(org-roam-dailies-goto-date :wk "open date")
    "n ," '(org-roam-dailies-goto-previous-note :wk "previous day")
    "n ." '(org-roam-dailies-goto-next-note :wk "next day")
    "n i" '(org-roam-node-insert :wk "insert")
    "n f" '(:ignore t :which-key "find")
    "n f a" '(org-roam-node-find :wk "all")
    "n f f" '((lambda () (interactive) (klk/org-roam-find-excluding-type "dailies")) :wk "all but dailies")
    "n f r" '((lambda () (interactive) (klk/org-roam-find-by-type "references")) :wk "reference")
    "n f h" '((lambda () (interactive) (klk/org-roam-find-by-type "howto")) :wk "howto"))
  )
#+END_SRC

  Graphical UI
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))
#+END_SRC

*** roam images

I insert a lot of screenshots into org-roam notes, but I don't want to have to worry about where the links point, in case I decide to move a file to another directory. To solve this, I define a single directory for org-roam images, and set =org-link-abbrev-alist= so I can use links of the form =[[org-roam-images:myimage.png]]=.

#+BEGIN_SRC emacs-lisp
(setq org-link-abbrev-alist
      `(("org-roam-images"  . ,org-roam-image-dir)
	("org-roam-attachments"  . ,org-roam-attachments-dir)))
#+END_SRC

Here I define a function that converts all png links in a file to use the =org-roam-images:= syntax (if in the org-roam directory), and add advice to call this after inserting a screenshot.

#+BEGIN_SRC emacs-lisp
(defun klk/convert-org-roam-image-links (&optional arg)
  "Replace links to png files to be relative to the org-roam-images directory"
  (interactive)
  (when (string-prefix-p (file-truename org-roam-directory) (expand-file-name (buffer-file-name)))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\\[\\[file:[^\]]*/\\(.*\.png\\)" nil t)
	(replace-match "[[org-roam-images:\\1"))
      (org-redisplay-inline-images))))

(advice-add 'org-download-screenshot :after 'klk/convert-org-roam-image-links)
(advice-add 'org-download-clipboard :after 'klk/convert-org-roam-image-links)
#+END_SRC


Finally, I add the following to a =.dir-locals.el= in the root of the org roam directory, so org-download will save screenshots there.
#+begin_example
((nil . ((org-download-image-dir . "~/Dropbox/org/roam/images"))))
#+end_example

** org-journal

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :general
  (klk/leader-key-def
    "j" '(:ignore t :wk "journal")
    "j j" '(org-journal-new-entry :wk "new entry")
    "j o" '(org-journal-open-current-journal-file :wk "open file")
    "j d" '(org-journal-new-date-entry :wk "new entry at date")
    "j s" '(org-journal-search :wk "search")
    "j S" '(org-journal-search-forever :wk "search all"))
  (klk/leader-key-def
    :keymaps 'org-journal-mode-map
    "," 'org-journal-previous-entry
    "." 'org-journal-next-entry)
  :custom
  ;; Don't carry over
  (org-journal-file-type 'yearly)
  (org-journal-carryover-items "")
  (org-journal-dir "~/Dropbox/org/journal/")
  (org-journal-file-format "%Y.org")
  (org-journal-date-format "%A, %Y-%m-%d"))
#+END_SRC

** Tasks

*** Basics
Stop parent tasks from being marked as complete if they have incomplete children.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Set the =TODO= states.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence
			   "TODO(t!)"
			   "NEXT(n)"
			   "COLLECTING(C)"
			   "WAITING(w@)"
			   "PROJECT(p)"
			   "INP(i!)"
			   "|"
			   "DONE(d)"
			   "CANCELLED(c@)"
			   "NOTE(e)"
			   )
			   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-unavailable-files t)
#+END_SRC

[[https://orgmode.org/worg/org-contrib/org-checklist.html][org-checklist]] supports recurring checklists
#+BEGIN_SRC emacs-lisp
;(use-package org-checklist)
#+END_SRC

*** Archiving
   Archive to =archive.org= under a tree heading with the name of the origin file.
#+BEGIN_SRC emacs-lisp
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

*** Logging
 Log state changes in a drawer, not in the task content.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-state-notes-into-drawer t)
 #+END_SRC

 This will log a CLOSED timestamp when an item is marked as done. This is consistent with what orgzly does, and seems to show up in the agenda much like state change logs, except it makes archived items show up as well.
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 #+END_SRC

*** Capture
**** Reverse datetree
#+BEGIN_SRC emacs-lisp
(use-package org-reverse-datetree)
#+END_SRC

**** Templates
[[https://github.com/progfolio/doct][doct]] provides a nicer syntax for defining capture templates.
#+BEGIN_SRC emacs-lisp
(use-package doct)
#+END_SRC

This automatically adds a created timestamp to new captured items, but I'm not using it because I don't always want that.
#+BEGIN_SRC emacs-lisp
;; (use-package org-expiry
;;   :straight (:type built-in)
;;   :config
;;   (setq
;;    org-expiry-created-property-name "CREATED"
;;    org-expiry-inactive-timestamps t
;;    )
;;   (add-hook 'org-capture-before-finalize-hook
;;           (lambda()
;;                (save-excursion
;;                     (org-back-to-heading)
;;                     (org-expiry-insert-created)))))
#+END_SRC

Define a function to go to the last top-level heading in an org file. For my weekly capture template I want to add the heading as a child under the last month heading.
#+BEGIN_SRC emacs-lisp
(defun klk/org-last-top-level-heading ()
  (goto-char (point-max))
  (search-backward-regexp "^* " nil t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun klk/get-date-string ()
  (format-time-string "%Y-%m-%d %A" (org-read-date nil t)))
#+END_SRC

Define capture templates. Config for capturing project-specific tasks / notes based on [[https://www.reddit.com/r/emacs/comments/fs7tk3/how_to_manage_todo_tasks_in_my_project/][this thread]].
#+BEGIN_SRC emacs-lisp
(setq
 org-capture-templates
 (doct `((:group
          :empty-lines 1
          :children
          (("TODO" :keys "t"
            :file ,(org-file-path "inbox.org")
	    :template ("* %{todo-state} %?"
                       "%{scheduled}:PROPERTIES:"
                       ":CREATED: %U"
                       ":END:"
                       "%{body}")
            :children (
		       ("todo" :keys "t" :body nil :scheduled nil :todo-state "TODO")
		       ("scheduled" :keys "s" :body nil :scheduled "SCHEDULED: %^{scheduled}t\n" :todo-state "TODO")
		       ("next" :keys "n" :body nil :scheduled nil :todo-state "NEXT")))
	   ("Notes" :keys "n"
	    :template ("* %?\n%i\n")
            :children (
		       ("health" :keys "h" :file ,(org-file-path "p-health.org") :headline "Notes")
		       ("financial" :keys "f" :file ,(org-file-path "p-financial.org") :headline "Notes")
		       ("garden" :keys "g" :file ,(org-file-path "p-garden.org") :headline "Notes")
		       ("research" :keys "r" :file ,(org-file-path "research.org") :olp ("Notes") :datetree t :template "* %?\n")))
	   ("Projects" :keys "p"
            :file klk/org-project-notes-file
            :children (("note" :keys "n" :template ("* %^{Title}" "%?") :function (lambda ()
										    (org-reverse-datetree-goto-date-in-file
										     nil :olp '("Notes"))))
                       ("task" :keys "t" :headline "Tasks" :template ("* TODO %^{Title}" "%?"))))
	   ("Meetings"
	    :keys "m"
	    :template ("* %^u\n%?")
	    :prepend t
      :children (
                ("advisor"
                :type plain
                :keys "a"
                :file ,(org-roam-path "Research/Advisor Meetings.org")
                :template ("* %^u\n** Questions\n%?")
                :function (lambda () (goto-char (point-min)) (search-forward "* Questions") (org-forward-heading-same-level 1))
                )
                ("group"
                :keys "g"
		      :file (lambda () (read-file-name "File: " (org-roam-path "Research/") nil nil nil (lambda (x) (string-match-p ".*[mM]eeting.*" x))))
                :template ("* %^u\n%?")
                :function (lambda () (goto-char (point-min)) (search-forward "* "))
                )))
	   ("Advisor Question"
	    :keys "q"
      :file ,(org-roam-path "Research/Advisor Meetings.org")
	    :type item
	    :empty-lines 0
	    :olp ("Questions")
	    :function (lambda () (goto-char (point-min)))
	    :template ("%?"))
	   ("Goal" :keys "g"
	    :immediate-finish t
	    :template ("* TODO %^{Goal}"
		       ":PROPERTIES:"
		       ":CREATED: %U"
		       ":END:")
            :children (
		       ("weekly" :keys "w" :file ,(org-file-path "goals.org") :headline "Weekly")
		       ("monthly" :keys "m" :file ,(org-file-path "goals.org") :headline "Monthly")))
	   ("Research Weekly" :keys "w"
	    :empty-lines 1
	    :prepend t
	    :function (lambda () (goto-char (point-min)))
	    :file ,(org-roam-path "Research/research_weekly.org")
	    :template ("* Week ending %(klk/get-date-string)"))
	    ;; :template ("* Week ending %<%Y-%m-%d (%A)>")
	    ;; :time-prompt t)
	   ;; ("Weekly" :keys "w"
	   ;;  :empty-lines 1
	   ;;  :function (lambda () (klk/org-last-top-level-heading))
	   ;;  :file ,(org-file-path "journal/weekly2022.org")
	   ;;  :refile-targets ,(org-file-path "journal/weekly2022.org")
	   ;;  :template ("** Week %^{week number}"
	   ;; 	       "[[file:~/Dropbox/org/roam/dailies/%^{start of week (yyyymmdd).org}]]"
	   ;; 	       "*** Goals / priorities :goals:"
	   ;; 	       "- %?"
	   ;; 	       "*** Review :weekly:"
	   ;; 	       "*** Key Ideas :keyideas:"))
	   ;; ("Monthly" :keys "m"
	   ;;  :empty-lines 1
	   ;;  :file ,(org-file-path "journal/weekly2022.org")
	   ;;  :template ("* %^{Month}"
	   ;; 	       "** %\\1 Goals / priorities :goals:"
	   ;; 	       "- %?"
	   ;; 	       "** %\\1 Review :monthly:"
	   ;; 	       "** %\\1 Key Ideas :monthlykeyideas:"
	   ;; 	       "** %\\1 Highlights :highlights:" ))
	   )))))

#+END_SRC

**** Capture from outside emacs
Bind a system shortcut to =emacsclient -n -e '(yequake-toggle "org-capture")'= to bring up a temporary capture frame. Must have an emacsclient instance running. Doesn't work with refiling.
#+BEGIN_SRC emacs-lisp
(use-package yequake
  :straight (yequake :type git :host github :repo "alphapapa/yequake")

  :custom
  (yequake-frames
   '(("org-capture"
      (buffer-fns . (yequake-org-capture))
      (width . 0.75)
      (height . 0.5)
      (alpha . 0.95)
      (frame-parameters . ((undecorated . t)
                           (skip-taskbar . t)
                           (sticky . t)))))))
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (klk/leader-key-def
    "a" '(org-agenda :wk "agenda")
    "c c" '(org-capture :wk "capture")))
#+END_SRC

Make agenda full screen.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

Some agenda view tweaks.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-include-deadlines t)
(setq org-agenda-start-with-log-mode t)
(setq org-deadline-warning-days 7)
#+END_SRC

Add lines between days in weekly view. Taken from [[https://www.reddit.com/r/orgmode/comments/e4stk2/adding_a_separator_line_between_days_in_emacs/][reddit]].
#+BEGIN_SRC emacs-lisp
(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
#+END_SRC

Add more space for the category in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format '((agenda . " %i %-15:c%?-12t% s")
				 (todo . " %i %-12:c")
				 (tags . "")
				 (search . " %i %-12:c")))
#+END_SRC

Set files to be included in the agenda. Includes archive because I like to see old completed tasks in the agenda, and also =daily.org= because I want to show my one-line daily summaries in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (append org-agenda-files
			       `(,(org-file-path "inbox.org")
				 ,(org-file-path "mobile inbox.org")
				 ,(org-file-path "gcal.org")
				 ,(org-file-path "gcal-school.org")
				 ,(org-file-path "gtd.org")
				 ,(org-file-path "recurring.org")
				 ,(org-file-path "archive.org")
				 ,(org-file-path "school.org")
				 ,(org-file-path "p-financial.org")
				 ,(org-file-path "p-health.org")
				 ,(org-file-path "p-garden.org"))))
#+END_SRC

Enable inline tasks.
#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

Super Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :config
  (org-super-agenda-mode t))
(require 'org-habit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun timestamp-in-n-days (n)
  "Get the timestamp of n days in the future."
  (format-time-string "%Y-%m-%d" (time-add (* 3600 24 n) (current-time))))

(setq org-agenda-custom-commands
      (list
       (quote
	("x" "Daily Agenda"
	 ((agenda "" (
		      (org-agenda-span 'day)
		      (org-agenda-overriding-header "Today")
		      (org-agenda-log-mode-items '(closed clock state))
		      (org-agenda-prefix-format "  %?-12t% s")
		      (org-super-agenda-groups
		       '((:name "Calendar" :time-grid t)
			 (:name "☆ Important" :priority "A")
			 (:name "⚠ Overdue!" :deadline past :and (:scheduled past :not (:habit t)))
			 (:name "Scheduled Today" :scheduled today)
			 (:auto-property "Project")
			 (:auto-category)
			 (:name "☆ Due" :and (:deadline today :not (:habit t)))
			 ))
		      ))
	  (alltodo "" ((org-agenda-overriding-header "Upcoming Schedule")
                       (org-super-agenda-groups
                        `((:name "Tomorrow" :scheduled (on ,(timestamp-in-n-days 1)))
			  (:name "In Two Days" :scheduled (on ,(timestamp-in-n-days 2)))
			  (:discard (:anything t))
			  ))))
         (tags-todo "project"
                     ((org-agenda-overriding-header "Project Tasks")
                      (org-super-agenda-groups '((:auto-category)))))
	  )))
       (quote
	("U" "Unscheduled"
	 ((todo ""
		((org-agenda-overriding-header "Unscheduled Tasks")
		 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("PROJECT"))))))
	 ((org-agenda-todo-ignore-scheduled 'future)
	  (org-agenda-sorting-strategy '(deadline-up)))))
       (quote("N" "Next tasks" todo "NEXT"
	      ((org-agenda-overriding-header "Next Tasks")
	       (org-super-agenda-groups '((:auto-property "Project") (:auto-category)))
	       ))
	     )
       (quote("p" "Project Tasks"
         ((tags-todo "project"
                     ((org-agenda-overriding-header "Project Tasks")
                      (org-super-agenda-groups '((:auto-category)))))
          )))
      (quote("P" "Projects (old)" todo ""
	     (
	      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("PROJECT")))
	      (org-super-agenda-groups '((:auto-property "Project" :not (:todo "PROJECT")) (:discard (:anything t))))
	      )
	     ))
      (quote
       ("n" "Notes"
	(
	 (agenda "" ((org-agenda-span 'week)
		     (org-agenda-log-mode-items '(closed clock state))
		     (org-agenda-prefix-format "  %?-12t% s")
					; (org-agenda-compact-blocks t)
		     (org-super-agenda-groups
		      '(
			(:name "Daily Summary" :and (:time-grid t :tag "daily"))
			(:discard (:anything t))
			))
		     )))))
      ))
#+END_SRC

** Journal

**** COMMENT deft
Deft is good for searching through files in a directory, like the journal directory.
=deft-parse-title= override is from https://github.com/jrblevin/deft/issues/75 so the title isn't just ":PROPERTIES:" with org-roam V2.

Note: this causes some annoyances because it seems to trigger auto-saves in org-roam files every couple of seconds.
#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-c d" . deft)
  :bind ("C-c D" . deft-find-file)
  :commands (deft)
  :config
  (setq deft-default-extension "org"
	deft-extensions '("org")
	deft-directory "~/Dropbox/org/roam"
	deft-recursive t
	deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n\\(#\\+.+\n\\)*\\(- .+::.+\n\\)?"
	deft-use-filename-as-title nil
	deft-file-naming-rules '((noslash . "-")
				 (nospace . "-")
				 (case-fn . downcase))
	deft-text-mode 'org-mode)
  )
(advice-add 'deft-parse-title :override
    (lambda (file contents)
      (if deft-use-filename-as-title
	  (deft-base-filename file)
	(let* ((case-fold-search 't)
	       (begin (string-match "title: " contents))
	       (end-of-begin (match-end 0))
	       (end (string-match "\n" contents begin)))
	  (if begin
	      (substring contents end-of-begin end)
	    (format "%s" file))))))
#+END_SRC

**** random note
Random note, for looking at a random past entry.
#+BEGIN_SRC emacs-lisp
(use-package org-randomnote
	:bind ("C-c r" . org-randomnote)
	:config
	(setq org-randomnote-candidates (directory-files "~/Dropbox/org/roam/dailies" t "^[0-9]+.org$" t))
	(setq org-randomnote-open-behavior 'indirect-buffer)
	)
#+END_SRC

** Visual

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-preserve-indentation t)
#+END_SRC

Hide emphasis markers like *,/,=

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

But show them when the cursor is on the word.
#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :config (add-hook 'org-mode-hook 'org-appear-mode))
#+END_SRC

Load images inline.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

This changes the context settings for sparse subtrees so that it will show the content of a heading matching the tag.
#+BEGIN_SRC emacs-lisp
(push '(tags-tree . local) org-show-context-detail)
#+END_SRC

Use variable font sizes for headings and a large font for titles.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.15 :weight normal))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.1 :weight normal))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1 :weight normal))))
  '(org-document-title ((t (:height 250))))
)
#+END_SRC

** Code
*** Basics
Make TAB act as if it were issued in a buffer of the language's major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Reference management
*** pdf-tools

Better pdf interactions in Emacs. Config based on https://github.com/yanghaoxie/emacs.d/blob/master/init.org#pdf-tools

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :config
  (pdf-tools-install :no-query)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  ;; turn off cua so copy works
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  :general
  (klk/leader-key-def-major-mode
    :keymaps 'pdf-view-mode-map
    :major-modes t
    "/" 'isearch-forward
    "?" 'isearch-backward
    ;; Slicing image
    "s" '(:ignore t :which-key "slice/occur")
    "sm" 'pdf-view-set-slice-using-mouse
    "sb" 'pdf-view-set-slice-from-bounding-box
    "sr" 'pdf-view-reset-slice
    ;; Annotations
    "a" '(:ignore t :which-key "annotation")
    "ad" 	'pdf-annot-delete
    "at" 	'pdf-annot-attachment-dired
    "ah" 	'pdf-annot-add-highlight-markup-annotation
    "al" 	'pdf-annot-list-annotations
    "am" 	'pdf-annot-add-markup-annotation
    "ao" 	'pdf-annot-add-strikeout-markup-annotation
    "as" 	'pdf-annot-add-squiggly-markup-annotation
    "at" 	'pdf-annot-add-text-annotation
    "au" 	'pdf-annot-add-underline-markup-annotation
    "b" 'pdf-isearch-sync-backward
    ;; Fit image to window
    "f" '(:ignore t :which-key "fit")
    "fw" 'pdf-view-fit-width-to-window
    "fh" 'pdf-view-fit-height-to-window
    "fp" 'pdf-view-fit-page-to-window
    ;; Other
    "ss" 'pdf-occur
    "p" 'pdf-misc-print-document
    "O" 'pdf-outline
    "m" 'pdf-view-midnight-minor-mode)
  )
#+END_SRC

Emacs 29's =pixel-scroll-precision-mode= doesn't seem to work with pdf-tools ([[https://github.com/vedang/pdf-tools/issues/56][issue]]). For now, work around it by turning mode off when changing to a pdf buffer, and on otherwise.
#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "29") nil (progn
  (defun my/set-precision-scrolling ()
    (if (eq major-mode 'pdf-view-mode)
	(pixel-scroll-precision-mode -1)
      (pixel-scroll-precision-mode 1)))

  (add-hook 'buffer-list-update-hook #'my/set-precision-scrolling)))
#+END_SRC

*** bibtex
Set paths that will be used by multiple packages.
#+BEGIN_SRC emacs-lisp
(setq bib-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      bibtex-files (directory-files "~/Dropbox/Zotero" t "^[A-Z|a-z].+.bib$")
      pdf-files-directory "~/Dropbox/papers/bibtex")
#+END_SRC

*** citar
First set up the built-in org-cite to handle export. Use citeproc to include csl support for everything except latex export.
#+BEGIN_SRC emacs-lisp
(use-package citeproc)

(use-package org
  :config
  (require 'oc-biblatex)
  :custom
  (org-cite-global-bibliography '("~/Dropbox/Zotero/library.bib"))
  (org-cite-export-processors '((latex biblatex) (t csl))))
#+END_SRC

Set up citar for citation management.
#+BEGIN_SRC emacs-lisp
(use-package citar
  :straight (citar :type git :host github :repo "emacs-citar/citar")
  :after all-the-icons
  :demand t
  :general
  (klk/leader-key-def
    "c i" '(citar-insert-citation :wk "insert citation")
    "c y" '(citar-org-kill-citation :wk "yank citation")
    "c n" '(citar-open-note :wk "open reference note"))
  :custom-face
  (citar-highlight ((t (:weight normal))))
  :init
  (defun citar-setup-capf ()
    (add-to-list 'completion-at-point-functions 'citar-capf))
  :hook
  (LaTeX-mode . citar-setup-capf)
  (org-mode . citar-setup-capf)
  :config
  (setq citar-symbols
        `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (setq citar-symbol-separator "  ")
  ; Remove type and expand name field
  (setq citar-templates
	'((main . "${author editor:30%sn}     ${date year issued:4}     ${title:80}")
          (suffix . "          ${=key= id:15}   ${tags keywords:*}")
          (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
          (note . "Notes on ${author editor:%etal}, ${title}")))
  :custom
  (citar-at-point-function 'embark-act)
  (citar-library-paths '("~/Dropbox/Zotero/"))
  (citar-notes-paths `(,(org-roam-path "references")))
  (citar-bibliography '("~/Dropbox/Zotero/library.bib")))
#+END_SRC

**** citar-embark
#+BEGIN_SRC emacs-lisp
(use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+END_SRC

**** citar-org-roam
#+BEGIN_SRC emacs-lisp
(use-package citar-org-roam
  :after citar org-roam
  :no-require
  :custom
  (citar-org-roam-capture-template-key "r")
  (citar-org-roam-note-title-template "#+created: %U\n\n[[file:~/Dropbox/Zotero/${file}][Link to PDF]]\n* ${title} (${year})\n${author}\n\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ~/Dropbox/Zotero/${file}\n:END:\n")  :config (citar-org-roam-mode))
#+END_SRC
*** org-ref

I'm using citar now for reference management, but org-ref still provides a nice menu for inserting references to figures / tables / etc. So I still use it for that.

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :general
  (klk/leader-key-def
    "rr" '(org-ref-insert-ref-link :wk "insert ref")))
  ;; :bind (:map org-mode-map ("C-c ]" . org-ref-insert-link))
  ;; :config
  ;; (setq org-latex-prefer-user-labels t)
  ;; (setq bibtex-completion-bibliography bib-files
  ;; 	bibtex-completion-library-path '("~/Dropbox/Zotero/storage/")
  ;; 	bibtex-completion-notes-path "~/Dropbox/Notes/org_zettel/references/"
  ;; 	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

  ;; 	bibtex-completion-additional-search-fields '(keywords)
  ;; 	bibtex-completion-display-formats
  ;; 	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
  ;; 	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
  ;; 	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
  ;; 	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
  ;; 	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
  ;; 	bibtex-completion-pdf-open-function
  ;; 	(lambda (fpath)
  ;; 	  (call-process "open" nil 0 nil fpath)))
  ;; :demand
  ;; )
#+END_SRC

*** COMMENT org-roam-bibtex
Integrate bibtex with =org-roam=.

At some point the file keyword stopped being processed correctly. Possibly related to [[https://org-roam.discourse.group/t/orb-process-file-field-not-working-in-orb-templates/795/11][this]]. So for now I set =orb-process-file-keyword= to =nil=, which means the whole contents of the file field are input. Sometimes this includes an extra file (web snapshot), but it's easier to deal with than inserting nothing.
#+BEGIN_SRC emacs-lisp
(use-package org-roam-bibtex
  :after org-roam
  :bind (:map org-mode-map ("C-c n b" . orb-note-actions))
  :config
  ;; (require 'org-ref) ; optional: if Org Ref is not loaded anywhere else, load it here
  (setq orb-preformat-keywords
      '("citekey" "title" "url" "author-or-editor" "keywords" "file" "author" "year")
      orb-process-file-keyword nil) ;; files don't appear otherwise
  (org-roam-bibtex-mode)
  :demand)
#+END_SRC

*** org-noter
Attach notes to locations in the pdf.
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  ;; :after org-roam
  :config
  (setq org-noter-notes-window-location 'other-frame
	org-noter-always-create-frame nil
	org-noter-hide-other nil
	org-noter-kill-frame-at-session-end nil
	;; org-noter-notes-search-path (org-roam-path "references")
	org-noter-doc-split-fraction '(0.66 . 0.5)
	)
  :general
  (klk/leader-key-def-major-mode
   :keymaps 'pdf-view-mode-map
   "i" 'org-noter-insert-note
   "k" 'org-noter-kill-session)
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "nn" '(org-noter :wk "noter")
    "nk" '(org-noter-kill-session :wk "noter"))
  )
#+END_SRC

*** Anki
#+BEGIN_SRC emacs-lisp
(use-package org-anki
  :config
  (setq org-anki-default-deck "Default")
  :bind (("C-c s" . org-anki-sync-entry))
  )
#+END_SRC
** Calendar
  Set up syncing with google calendar  following https://github.com/emacsmirror/org-gcal.

*** calfw
  Basic calfw config from https://github.com/kiwanami/emacs-calfw
  #+BEGIN_SRC emacs-lisp
    (use-package calfw
      :init
      (setq cfw:fchar-junction ?╋
	    cfw:fchar-vertical-line ?┃
	    cfw:fchar-horizontal-line ?━
	    cfw:fchar-left-junction ?┣
	    cfw:fchar-right-junction ?┫
	    cfw:fchar-top-junction ?┯
	    cfw:fchar-top-left-corner ?┏
	    cfw:fchar-top-right-corner ?┓
	    calendar-week-start-day 1 ; 0:Sunday, 1:Monday
	    ))
    (use-package calfw-org)
    (use-package calfw-ical)
    (use-package calfw-cal)

  (defun klk/open-calendar ()
    "CFW config for my calendars."
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "DarkGreen")
      (cfw:ical-create-source "gcal" (klk/get-gcal) "Blue")
     )))
  #+END_SRC

*** org-gcal
#+BEGIN_SRC emacs-lisp
; Install some dependencies first
(use-package alert)
(use-package request)
(use-package request-deferred)
(use-package persist)
(use-package aio)

(use-package org-gcal
  :straight (org-gcal.el :host github :repo "kidd/org-gcal.el")
  :config
  (setq org-gcal-client-id (klk/get-gcal-client-id)
	org-gcal-client-secret (klk/get-gcal-client-secret)
	org-gcal-fetch-file-alist `((,(klk/get-gcal-id) . "~/Dropbox/org/gtd/gcal.org")
				    (,(klk/get-gcal-id-school) . "~/Dropbox/org/gtd/gcal-school.org"))))
#+END_SRC
** babel

Set =org-babel-min-lines-for-block-output= to 1 to always wrap output in an example block, rather than prepending with =:=. Alternatively, could use =:results output drawer= in the code block header.
#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-babel-min-lines-for-block-output 1)
  :general
  (klk/leader-key-def
    :keymaps 'org-mode-map
    "'" '(org-edit-special :wk "edit")
    "-" '(org-babel-demarcate-block :wk "split block")
    "z" '(org-babel-hide-result-toggle :wk "fold result")
    "Z" '(org-babel-result-hide-all :wk "fold all results")))
#+END_SRC

*** venv
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :init
  (venv-workon "base")
  )
#+END_SRC

*** jupyter from scimax
Make use of the jupyter customizations in [[https://github.com/jkitchin/scimax][scimax]].
#+BEGIN_SRC emacs-lisp
(use-package pretty-hydra)
(use-package jupyter)
(add-to-list 'load-path "~/.emacs.d.scimax/")
(require 'scimax-jupyter)
(setq org-confirm-babel-evaluate nil)
#+END_SRC
*** COMMENT jupyter
[[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] requires [[https://github.com/nnicandro/emacs-zmq][emacs-zmq]]. To install =emacs-zmq=, after running the following, go to =straight/build/zmq= and run =make=.

May need to first run =sudo dnf install libstdc++-static zeromq-devel libtool=.

#+BEGIN_SRC emacs-lisp
(use-package zmq)

(use-package jupyter
  :config
  (require 'jupyter-julia))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

Fix for ansi color sequence issue from https://github.com/nnicandro/emacs-jupyter/issues/380
#+BEGIN_SRC emacs-lisp
(defun jupyter-ansi-color-apply-on-region (begin end)
  (ansi-color-apply-on-region begin end t))
#+END_SRC

*** load languages

Load the languages to be recognized in code blocks, and also set default header args.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (jupyter . t)
   (octave . t)
   ;; other languages..
   ))

(add-to-list 'org-babel-default-header-args:python
             '(:results . "output"))
#+END_SRC

** images
Slightly easier way to interact with krita or xournal++ files in buffers. Still have to create the files separately, though. These just allow clicking on a link in an org buffer to open an existing image file.
*** org-krita
#+BEGIN_SRC emacs-lisp
(use-package org-krita
  :ensure t
  :straight (org-krita :host github :repo "lepisma/org-krita" :files ("*.el" "resources"))
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))
#+END_SRC
*** org-xournalpp
#+BEGIN_SRC emacs-lisp
(defun get-xournal-template ()
  (let ((template-file "~/Dropbox/org/org-xournalpp/resources/"))
    (read-file-name nil template-file)))

(use-package org-xournalpp
  :ensure t
  :straight (org-xournalpp :host gitlab :repo "vherrmann/org-xournalpp" :files ("*.el" "resources"))
  :config
  (add-hook 'org-mode-hook 'org-xournalpp-mode)
  (setq org-xournalpp-template-getter 'get-xournal-template)
)
  ;; (setq 'org-xournalpp-image-type 'png)
#+END_SRC
* Notes
** Denote
#+BEGIN_SRC emacs-lisp
(use-package denote
  :custom
  (denote-directory "~/Dropbox/org/denote/")
  (xref-search-program 'ripgrep)
  (denote-known-keywords '(""))
  (denote-backlinks-show-context t)
  (denote-date-prompt-use-org-read-date nil)
  :general
  (klk/leader-key-def
    "dn" '(denote :wk "denote new file")
    "db" '(denote-link-backlinks :wk "denote new file")
    "df" '(consult-notes :wk "find note")
    "di" '(denote-link :wk "denote insert link"))
  :config
  (require 'denote-org-dblock)
  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  (add-hook 'dired-before-readin-hook #'denote-dired-mode-in-directories)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer))

(use-package consult-notes
  :after denote consult
  :config
  (consult-notes-denote-mode))
#+END_SRC

* Programming
** Auto-formatting
#+BEGIN_SRC emacs-lisp
;; auto-format different source code files extremely intelligently
;; https://github.com/radian-software/apheleia
;; Don't enable it globally since it messes up my openfoam files
(use-package apheleia
  :hook (python-mode . apheleia-mode))
#+END_SRC
** Tree-sitter
#+BEGIN_SRC emacs-lisp
(use-package tree-sitter
  :config
  ;; activate tree-sitter on any buffer containing code for which it has a parser available
  (global-tree-sitter-mode)
  ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
  ;; by switching on and off
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :after tree-sitter)
#+END_SRC
** eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot)
#+END_SRC
** LSP

Config from the corfu [[https://github.com/minad/corfu/wiki#configuring-corfu-for-lsp-mode][wiki]].

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!
  :init
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))) ;; Configure orderless
  :hook
  (lsp-completion-mode . my/lsp-mode-setup-completion))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package lsp-ui
;;   :ensure t
;;   :custom
;;   (lsp-enable-symbol-highlighting nil)
;;   (lsp-ui-doc-show-with-mouse nil)
;;   (lsp-headerline-breadcrumb-enable nil)
;;   (lsp-ui-sideline-enable nil)
;;   (lsp-completion-provider :none)
;;   :config
;;   (add-hook 'lsp-completion-mode-hook 'my/lsp-mode-use-orderless)
;;   (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
;;   (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
#+END_SRC
** Flycheck
  Syntax checking support
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish
  :init
  (global-flycheck-mode)
  ;; only check on save
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive))
#+END_SRC

** COMMENT Company
  Auto-completion support
#+BEGIN_SRC emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+END_SRC

** Python
Simple python config based on https://gist.github.com/Nathan-Furnal/b327f14e861f009c014af36c1790ec49.
#+BEGIN_SRC emacs-lisp
;; Remove guess indent python message
(use-package python
  :config
  (setq python-indent-guess-indent-offset-verbose nil))

(use-package blacken
  :ensure t
  :defer t
  :custom
  (blacken-allow-py36 t)
  :hook (python-mode-hook . blacken-mode))

(use-package numpydoc
  :ensure t
  :defer t
  :custom
  (numpydoc-insert-examples-block nil)
  (numpydoc-template-long nil)
  :bind (:map python-mode-map
              ("C-c C-n" . numpydoc-generate)))

(use-package lsp-pyright
  :ensure t
  :custom
  (read-process-output-max (* 1024 1024))
  :general
  (klk/leader-key-def
    "l" '(:ignore t :which-key "lsp")
    "ld" '(lsp-find-definition :which-key "definition")
    "lb" '(xref-pop-marker-stack :which-key "xref back")
    "lr" '(lsp-rename :which-key "rename")
    "lx" '(lsp-find-references :which-key "references"))
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))
#+END_SRC

** Typescript
Taken from https://vxlabs.com/2022/06/12/typescript-development-with-emacs-tree-sitter-and-lsp-in-2022/.
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :after tree-sitter
  :config
  ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
  ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")

  ;; use our derived mode for tsx files
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
  ;; by default, typescript-mode is mapped to the treesitter typescript parser
  ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package tide
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
#+END_SRC


** Julia

Set =julia-snail-multimedia-enable= in a =.dir-locals.el= to enable displaying plots in buffer.
#+BEGIN_SRC emacs-lisp
(use-package julia-snail
  :hook (julia-mode . julia-snail-mode)
  :general
  (klk/leader-key-def
    :keymaps 'julia-snail-mode-map
    "e e" '(julia-snail-send-dwim :wk "eval dwim"))
  )
#+END_SRC
** code cells

Allows defining separate cells in a code file using, e.g., =# %% Title=.
Overwrite =code-cells-boundary-regexp= to also use =##= as a cell marker.
#+BEGIN_SRC emacs-lisp
(use-package code-cells
  :hook (
	 (python-mode . code-cells-mode)
	 (julia-mode . code-cells-mode))
  :custom
  (code-cells-boundary-regexp
   (rx (+ (syntax comment-start))
       (or (seq (* (syntax whitespace)) "%" (group-n 1 (+ "%")))
           (group-n 1 (+ "*"))
           (group-n 1 (+ "#"))
           (seq " In[" (* (any space digit)) "]:")))
   :type 'regexp)
  :general
  (klk/leader-key-def
    :keymaps 'code-cells-mode-map
    "e c" '(code-cells-eval :wk "cell"))
  :config
  (add-to-list 'code-cells-eval-region-commands '(julia-snail-mode . julia-snail-send-code-cell))
  (let ((map code-cells-mode-map))
    (define-key map (kbd "M-p") 'code-cells-backward-cell)
    (define-key map (kbd "M-n") 'code-cells-forward-cell)
    (define-key map (kbd "M-P") 'code-cells-move-cell-up)
    (define-key map (kbd "M-N") 'code-cells-move-cell-down)
    (define-key map (kbd "C-c C-c") 'code-cells-eval)
    ;; Overriding other minor mode bindings requires some insistence...
    (define-key map [remap jupyter-eval-line-or-region] 'code-cells-eval)))
#+END_SRC

** COMMENT C / C++
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC
