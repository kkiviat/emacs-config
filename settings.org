#+TITLE: Base emacs configuration
#+DESCRIPTION: Core configuration
#+LANGUAGE: en
#+PROPERTY: header-args    :results silent

* Sensible Defaults
sensible-defaults.el is from [[https://github.com/hrs/sensible-defaults.el][here]].
Enable everything, but disable the visual bell function.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(setq ring-bell-function 'ignore)
#+END_SRC


* Windows
Hide window chrome
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode 0)
 ;(menu-bar-mode 0)
 (scroll-bar-mode -1)
 #+END_SRC

Start with window maximized and partially transparent.
Transparency toggling / setting code based on [[https://www.reddit.com/r/emacs/comments/9e98hp/translucent_background/e5pi7bl/][this reddit post]].
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))

(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(90 90))))
(global-set-key (kbd "<f9>") 'toggle-transparency)

;; Set transparency of emacs
(defun transparency (arg &optional active)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nEnter alpha value (1-100): \np")
  (let* ((elt (assoc 'alpha default-frame-alist))
         (old (frame-parameter nil 'alpha))
         (new (cond ((atom old)     `(,arg ,arg))
                    ((eql 1 active) `(,arg ,(cadr old)))
                    (t              `(,(car old) ,arg)))))
    (if elt (setcdr elt new) (push `(alpha ,@new) default-frame-alist))
    (set-frame-parameter nil 'alpha new)))
(global-set-key (kbd "C-c p") 'transparency)
#+END_SRC

Allows undo and redo of changes in window configurations.
By default, undo is bound to *C-c <left>* and redo to *C-c <right>*.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode 1))
#+END_SRC


* COMMENT Scrolling (pre Emacs 29)
Make scrolling less jumpy
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; two lines at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

; stop emacs from recentering the buffer point when the point goes outside the window
(setq scroll-conservatively 100)
#+END_SRC

* Scrolling
Emacs 29 has smooth scrolling natively.
#+BEGIN_SRC emacs-lisp
(pixel-scroll-precision-mode)
(setq pixel-scroll-precision-large-scroll-height 40.0)
(setq pixel-scroll-precision-interpolation-factor 30)
#+END_SRC


* Line numbers
  Display line numbers except in certain modes. From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode org-mode org-agenda-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)
#+END_SRC


* Themes

** fonts
Enable changing font face per buffer. From https://www.emacswiki.org/emacs/FacesPerBuffer.

ETBookOT font is installed from https://github.com/edwardtufte/et-book (by downloading the .otf files in =et-book-ligatures-enabled= and putting them in =~/.local/share/fonts= and running =fc-cache -f -v=). (Font name obtained from =fc-list=.)

#+BEGIN_SRC emacs-lisp
(defvar my-variable-font-family "Source Sans Pro")
;; Use variable width font faces in current buffer
(defun klk-buffer-face-mode-variable ()
  "Set font to a variable width (proportional) fonts in current buffer"
  (interactive)
  (setq buffer-face-mode-face `(:family ,my-variable-font-family :height 140))
  (buffer-face-mode))

 ;; Use monospaced font faces in current buffer
 (defun klk-buffer-face-mode-fixed ()
   "Sets a fixed width (monospace) font in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Consolas" :weight 'light))
   (buffer-face-mode))
#+END_SRC

Function to change the default variable font family and apply the change to all currently open org buffers.
#+BEGIN_SRC emacs-lisp
(defun my/change-variable-font-family (family)
  (setq my-variable-font-family family)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
            (call-interactively 'klk-buffer-face-mode-variable))))
  (buffer-list))
  )
#+END_SRC

Use the variable font for org buffers by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'klk-buffer-face-mode-variable)
#+END_SRC

Use monospace font in code blocks and tables.  From https://github.com/jparcill/emacs_config/blob/master/config.el
#+BEGIN_SRC emacs-lisp
(defun klk-set-org-block-fixed-pitch ()
  (interactive)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  )
#+END_SRC

** general customizations
#+BEGIN_SRC emacs-lisp
(use-package doom-themes :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ï„‡ ")
#+END_SRC

Add more padding in text buffers.  Based on https://lepisma.xyz/2017/10/28/ricing-org-mode/index.html.
#+BEGIN_SRC emacs-lisp
(defun klk-text-file-spacing ()
  (setq line-spacing 0.1)
  (setq header-line-format " ") ; add top margin
  (setq display-line-numbers nil)
  (setq left-fringe-width 0) ; disable fringe
  (setq right-fringe-width 0)
  (progn
  (setq left-margin-width 2) ; add side margins
  (setq right-margin-width 2)
  (set-window-buffer nil (current-buffer)))
  )

(add-hook 'text-mode-hook 'klk-text-file-spacing)
#+END_SRC

** toggle themes
Spring theme uses fonts from https://www.ishouldbemoppingthefloor.com/2015/02/20-free-spring-fonts.html
#+BEGIN_SRC emacs-lisp
(defun klk-disable-all-themes ()
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme)))

(defun klk-light-theme ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'nier t)
  (klk-set-org-block-fixed-pitch)
  )

(defun klk-dark-theme ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'doom-palenight t)
  (klk-set-org-block-fixed-pitch)
  )

(defun klk-spring-theme ()
  (interactive)
  (klk-disable-all-themes)
  (load-theme 'Spring t)
  (klk-set-org-block-fixed-pitch)
  )
#+END_SRC

Set up hook for theme changes. Refreshes $\LaTeX$ previews in all open org buffers, and toggles =org-bullets-mode= to update bullets.
=org-latex-preview= needs a =C-u C-u= prefix argument to reload for the whole buffer. =C-u= corresponds to 4, =C-u= corresponds to 16.
#+BEGIN_SRC emacs-lisp
(defun klk-refresh-org-buffer-colors (&rest args)
  (mapc (lambda (buffer)
          (with-current-buffer buffer
	    (when (eq major-mode 'org-mode)
	      (let ((current-prefix-arg '(16))) ; C-u C-u
		(call-interactively 'org-latex-preview))
	      (org-bullets-mode))))
  (buffer-list))
  )

(advice-add 'load-theme :after 'klk-refresh-org-buffer-colors)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(klk-spring-theme) ; default
#+END_SRC

* Text
Make the text bigger by default. (sensible-defaults binds font resize to C-- and C-+)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 110)
#+END_SRC

Default to visual line mode for some modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

* Flyspell
  #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight nil
  :hook
  (text-mode . flyspell-mode))
  #+END_SRC

* Highlighting
  Highlight all occurrences of word under the cursor. Config from http://xenodium.com/emacs-highlight-symbol-mode/
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (set-face-attribute 'highlight-symbol-face nil
			:background "#858585"
			:foreground "default")
    (setq highlight-symbol-idle-delay 0)
    (setq highlight-symbol-on-navigation-p t)
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
  #+END_SRC


* Backups / saves
From [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]]
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

Save history between sessions.
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
#+END_SRC


* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
     :bind (("M-x" . helm-M-x)
     	 ("M-y" . helm-show-kill-ring)
     	 ("C-x b" . helm-mini)
     	 ("C-x C-f" . helm-find-files))
     :init
     (helm-mode 1)
     :config
     (setq helm-split-window-in-side-p t
     	helm-move-to-line-cycle-in-source t
     	helm-autoresize-mode t
     	helm-ff-file-name-history-use-recentf t)
    )
#+END_SRC


* Undo tree
More typical undo mode. Adds C-/ mapping to undo and C-? mapping to redo.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1))
#+END_SRC


* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (use-package yasnippet-snippets)
  (yas-global-mode t)
  (add-to-list #'yas-snippet-dirs "~/.emacs.d/my-snippets")
  (yas-reload-all)'
  :diminish yas-minor-mode)
#+END_SRC


* Latex
Feature name different from package name; see https://github.com/raxod502/straight.el/issues/516
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex)
#+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit)
  #+END_SRC
